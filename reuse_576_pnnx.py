import os
import numpy as np
import tempfile, zipfile
import torch
import torch.nn as nn
import torch.nn.functional as F
try:
    import torchvision
except:
    pass

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()

        self.featnet_block1_0 = nn.PReLU(num_parameters=1)
        self.featnet_block1_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=3, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.featnet_block1_2 = nn.PReLU(num_parameters=1)
        self.featnet_block1_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.featnet_block2_0 = nn.PReLU(num_parameters=1)
        self.featnet_block2_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.featnet_block2_2 = nn.PReLU(num_parameters=1)
        self.featnet_block2_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.featnet_block3_0 = nn.PReLU(num_parameters=1)
        self.featnet_block3_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.featnet_block3_2 = nn.PReLU(num_parameters=1)
        self.featnet_block3_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_0 = nn.PReLU(num_parameters=1)
        self.pnnx_unique_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=3, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.pnnx_unique_2 = nn.PReLU(num_parameters=1)
        self.pnnx_unique_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_4 = nn.PReLU(num_parameters=1)
        self.pnnx_unique_5 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.pnnx_unique_6 = nn.PReLU(num_parameters=1)
        self.pnnx_unique_7 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_8 = nn.PReLU(num_parameters=1)
        self.pnnx_unique_9 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.pnnx_unique_10 = nn.PReLU(num_parameters=1)
        self.pnnx_unique_11 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_conv1 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=3, kernel_size=(7,7), out_channels=64, padding=(3,3), padding_mode='zeros', stride=(2,2))
        self.flownet_backbone_norm1 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.flownet_backbone_relu1 = nn.ReLU()
        self.flownet_backbone_layer1_0_conv1 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer1_0_norm1 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.flownet_backbone_layer1_0_relu = nn.ReLU()
        self.flownet_backbone_layer1_0_conv2 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer1_0_norm2 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_12 = nn.ReLU()
        self.pnnx_unique_13 = nn.ReLU()
        self.flownet_backbone_layer1_1_conv1 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer1_1_norm1 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.flownet_backbone_layer1_1_relu = nn.ReLU()
        self.flownet_backbone_layer1_1_conv2 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer1_1_norm2 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_14 = nn.ReLU()
        self.pnnx_unique_15 = nn.ReLU()
        self.flownet_backbone_layer2_0_conv1 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.flownet_backbone_layer2_0_norm1 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.flownet_backbone_layer2_0_relu = nn.ReLU()
        self.flownet_backbone_layer2_0_conv2 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer2_0_norm2 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_16 = nn.ReLU()
        self.flownet_backbone_layer2_0_downsample_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=96, padding=(0,0), padding_mode='zeros', stride=(2,2))
        self.flownet_backbone_layer2_0_downsample_1 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_17 = nn.ReLU()
        self.flownet_backbone_layer2_1_conv1 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer2_1_norm1 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.flownet_backbone_layer2_1_relu = nn.ReLU()
        self.flownet_backbone_layer2_1_conv2 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer2_1_norm2 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_18 = nn.ReLU()
        self.pnnx_unique_19 = nn.ReLU()
        self.flownet_backbone_layer3_0_conv1 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer3_0_norm1 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.flownet_backbone_layer3_0_relu = nn.ReLU()
        self.flownet_backbone_layer3_0_conv2 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer3_0_norm2 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_20 = nn.ReLU()
        self.flownet_backbone_layer3_0_downsample_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer3_0_downsample_1 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_21 = nn.ReLU()
        self.flownet_backbone_layer3_1_conv1 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer3_1_norm1 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.flownet_backbone_layer3_1_relu = nn.ReLU()
        self.flownet_backbone_layer3_1_conv2 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_backbone_layer3_1_norm2 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_22 = nn.ReLU()
        self.pnnx_unique_23 = nn.ReLU()
        self.flownet_backbone_conv2 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_24 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=3, kernel_size=(7,7), out_channels=64, padding=(3,3), padding_mode='zeros', stride=(2,2))
        self.pnnx_unique_25 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_26 = nn.ReLU()
        self.pnnx_unique_27 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_28 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_29 = nn.ReLU()
        self.pnnx_unique_30 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_31 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_32 = nn.ReLU()
        self.pnnx_unique_33 = nn.ReLU()
        self.pnnx_unique_34 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_35 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_36 = nn.ReLU()
        self.pnnx_unique_37 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_38 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_39 = nn.ReLU()
        self.pnnx_unique_40 = nn.ReLU()
        self.pnnx_unique_41 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.pnnx_unique_42 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_43 = nn.ReLU()
        self.pnnx_unique_44 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_45 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_46 = nn.ReLU()
        self.pnnx_unique_47 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=96, padding=(0,0), padding_mode='zeros', stride=(2,2))
        self.pnnx_unique_48 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_49 = nn.ReLU()
        self.pnnx_unique_50 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_51 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_52 = nn.ReLU()
        self.pnnx_unique_53 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_54 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_55 = nn.ReLU()
        self.pnnx_unique_56 = nn.ReLU()
        self.pnnx_unique_57 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_58 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_59 = nn.ReLU()
        self.pnnx_unique_60 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_61 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_62 = nn.ReLU()
        self.pnnx_unique_63 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_64 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_65 = nn.ReLU()
        self.pnnx_unique_66 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_67 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_68 = nn.ReLU()
        self.pnnx_unique_69 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_70 = nn.InstanceNorm2d(affine=False, eps=0.000010, track_running_stats=False)
        self.pnnx_unique_71 = nn.ReLU()
        self.pnnx_unique_72 = nn.ReLU()
        self.pnnx_unique_73 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_0 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_2 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.flownet_transformer_layers_0_self_attn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_0_self_attn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_0_self_attn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_0_self_attn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_0_self_attn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_0_cross_attn_ffn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_0_cross_attn_ffn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_0_cross_attn_ffn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_0_cross_attn_ffn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_0_cross_attn_ffn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_0_cross_attn_ffn_mlp_0 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.flownet_transformer_layers_0_cross_attn_ffn_mlp_1 = nn.GELU()
        self.flownet_transformer_layers_0_cross_attn_ffn_mlp_2 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.flownet_transformer_layers_0_cross_attn_ffn_norm2 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_86 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_87 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_88 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_93 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_94 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_95 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_96 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_97 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_102 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_103 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_104 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_105 = nn.GELU()
        self.pnnx_unique_106 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_107 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_1_self_attn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_1_self_attn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_1_self_attn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_1_self_attn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_1_self_attn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_1_cross_attn_ffn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_1_cross_attn_ffn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_1_cross_attn_ffn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_1_cross_attn_ffn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_1_cross_attn_ffn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_1_cross_attn_ffn_mlp_0 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.flownet_transformer_layers_1_cross_attn_ffn_mlp_1 = nn.GELU()
        self.flownet_transformer_layers_1_cross_attn_ffn_mlp_2 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.flownet_transformer_layers_1_cross_attn_ffn_norm2 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_116 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_117 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_118 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_123 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_124 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_125 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_126 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_127 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_132 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_133 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_134 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_135 = nn.GELU()
        self.pnnx_unique_136 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_137 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_2_self_attn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_2_self_attn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_2_self_attn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_2_self_attn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_2_self_attn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_2_cross_attn_ffn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_2_cross_attn_ffn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_2_cross_attn_ffn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_2_cross_attn_ffn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_2_cross_attn_ffn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_2_cross_attn_ffn_mlp_0 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.flownet_transformer_layers_2_cross_attn_ffn_mlp_1 = nn.GELU()
        self.flownet_transformer_layers_2_cross_attn_ffn_mlp_2 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.flownet_transformer_layers_2_cross_attn_ffn_norm2 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_146 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_147 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_148 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_153 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_154 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_155 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_156 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_157 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_162 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_163 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_164 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_165 = nn.GELU()
        self.pnnx_unique_166 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_167 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_3_self_attn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_3_self_attn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_3_self_attn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_3_self_attn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_3_self_attn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_3_cross_attn_ffn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_3_cross_attn_ffn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_3_cross_attn_ffn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_3_cross_attn_ffn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_3_cross_attn_ffn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_3_cross_attn_ffn_mlp_0 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.flownet_transformer_layers_3_cross_attn_ffn_mlp_1 = nn.GELU()
        self.flownet_transformer_layers_3_cross_attn_ffn_mlp_2 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.flownet_transformer_layers_3_cross_attn_ffn_norm2 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_176 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_177 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_178 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_183 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_184 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_185 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_186 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_187 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_192 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_193 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_194 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_195 = nn.GELU()
        self.pnnx_unique_196 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_197 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_4_self_attn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_4_self_attn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_4_self_attn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_4_self_attn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_4_self_attn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_4_cross_attn_ffn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_4_cross_attn_ffn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_4_cross_attn_ffn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_4_cross_attn_ffn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_4_cross_attn_ffn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_4_cross_attn_ffn_mlp_0 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.flownet_transformer_layers_4_cross_attn_ffn_mlp_1 = nn.GELU()
        self.flownet_transformer_layers_4_cross_attn_ffn_mlp_2 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.flownet_transformer_layers_4_cross_attn_ffn_norm2 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_206 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_207 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_208 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_213 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_214 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_215 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_216 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_217 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_222 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_223 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_224 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_225 = nn.GELU()
        self.pnnx_unique_226 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_227 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_5_self_attn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_5_self_attn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_5_self_attn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_5_self_attn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_5_self_attn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_5_cross_attn_ffn_q_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_5_cross_attn_ffn_k_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_5_cross_attn_ffn_v_proj = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_5_cross_attn_ffn_merge = nn.Linear(bias=False, in_features=128, out_features=128)
        self.flownet_transformer_layers_5_cross_attn_ffn_norm1 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_transformer_layers_5_cross_attn_ffn_mlp_0 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.flownet_transformer_layers_5_cross_attn_ffn_mlp_1 = nn.GELU()
        self.flownet_transformer_layers_5_cross_attn_ffn_mlp_2 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.flownet_transformer_layers_5_cross_attn_ffn_norm2 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_236 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_237 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_238 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_243 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_244 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_245 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_246 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_247 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_252 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_253 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_254 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_255 = nn.GELU()
        self.pnnx_unique_256 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_257 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.flownet_feature_flow_attn_q_proj = nn.Linear(bias=True, in_features=128, out_features=128)
        self.flownet_feature_flow_attn_k_proj = nn.Linear(bias=True, in_features=128, out_features=128)
        self.conv2d_1 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_3 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_263 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_264 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_265 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_270 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_271 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_272 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_273 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_274 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_279 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_280 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_281 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_282 = nn.GELU()
        self.pnnx_unique_283 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_284 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_285 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_286 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_287 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_292 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_293 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_294 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_295 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_296 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_301 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_302 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_303 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_304 = nn.GELU()
        self.pnnx_unique_305 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_306 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_307 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_308 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_309 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_314 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_315 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_316 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_317 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_318 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_323 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_324 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_325 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_326 = nn.GELU()
        self.pnnx_unique_327 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_328 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_329 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_330 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_331 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_336 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_337 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_338 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_339 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_340 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_345 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_346 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_347 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_348 = nn.GELU()
        self.pnnx_unique_349 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_350 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_351 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_352 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_353 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_358 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_359 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_360 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_361 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_362 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_367 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_368 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_369 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_370 = nn.GELU()
        self.pnnx_unique_371 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_372 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_373 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_374 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_375 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_380 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_381 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_382 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_383 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_384 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_389 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_390 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_391 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_392 = nn.GELU()
        self.pnnx_unique_393 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_394 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_395 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_396 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_397 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_402 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_403 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_404 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_405 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_406 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_411 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_412 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_413 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_414 = nn.GELU()
        self.pnnx_unique_415 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_416 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_417 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_418 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_419 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_424 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_425 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_426 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_427 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_428 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_433 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_434 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_435 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_436 = nn.GELU()
        self.pnnx_unique_437 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_438 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_439 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_440 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_441 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_446 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_447 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_448 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_449 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_450 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_455 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_456 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_457 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_458 = nn.GELU()
        self.pnnx_unique_459 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_460 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_461 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_462 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_463 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_468 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_469 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_470 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_471 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_472 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_477 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_478 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_479 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_480 = nn.GELU()
        self.pnnx_unique_481 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_482 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_483 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_484 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_485 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_490 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_491 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_492 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_493 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_494 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_499 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_500 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_501 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_502 = nn.GELU()
        self.pnnx_unique_503 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_504 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_505 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_506 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_507 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_512 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_513 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_514 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_515 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_516 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_521 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_522 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_523 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_524 = nn.GELU()
        self.pnnx_unique_525 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_526 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_527 = nn.Linear(bias=True, in_features=128, out_features=128)
        self.pnnx_unique_528 = nn.Linear(bias=True, in_features=128, out_features=128)
        self.flownet_upsampler_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=130, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.flownet_upsampler_1 = nn.ReLU()
        self.flownet_upsampler_2 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=144, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_4 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_6 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.pnnx_unique_636 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_637 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_638 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_643 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_644 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_645 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_646 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_647 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_652 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_653 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_654 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_655 = nn.GELU()
        self.pnnx_unique_656 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_657 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_658 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_659 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_660 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_665 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_666 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_667 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_668 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_669 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_674 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_675 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_676 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_677 = nn.GELU()
        self.pnnx_unique_678 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_679 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_680 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_681 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_682 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_687 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_688 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_689 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_690 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_691 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_696 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_697 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_698 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_699 = nn.GELU()
        self.pnnx_unique_700 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_701 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_702 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_703 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_704 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_709 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_710 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_711 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_712 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_713 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_718 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_719 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_720 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_721 = nn.GELU()
        self.pnnx_unique_722 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_723 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_724 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_725 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_726 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_731 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_732 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_733 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_734 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_735 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_740 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_741 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_742 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_743 = nn.GELU()
        self.pnnx_unique_744 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_745 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_746 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_747 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_748 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_753 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_754 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_755 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_756 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_757 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_762 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_763 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_764 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_765 = nn.GELU()
        self.pnnx_unique_766 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_767 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_768 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_769 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_770 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_775 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_776 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_777 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_778 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_779 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_784 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_785 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_786 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_787 = nn.GELU()
        self.pnnx_unique_788 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_789 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_790 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_791 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_792 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_797 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_798 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_799 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_800 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_801 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_806 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_807 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_808 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_809 = nn.GELU()
        self.pnnx_unique_810 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_811 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_812 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_813 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_814 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_819 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_820 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_821 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_822 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_823 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_828 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_829 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_830 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_831 = nn.GELU()
        self.pnnx_unique_832 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_833 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_834 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_835 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_836 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_841 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_842 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_843 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_844 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_845 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_850 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_851 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_852 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_853 = nn.GELU()
        self.pnnx_unique_854 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_855 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_856 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_857 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_858 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_863 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_864 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_865 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_866 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_867 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_872 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_873 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_874 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_875 = nn.GELU()
        self.pnnx_unique_876 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_877 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_878 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_879 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_880 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_885 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_886 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_887 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_888 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_889 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_894 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_895 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_896 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_897 = nn.GELU()
        self.pnnx_unique_898 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_899 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_900 = nn.Linear(bias=True, in_features=128, out_features=128)
        self.pnnx_unique_901 = nn.Linear(bias=True, in_features=128, out_features=128)
        self.conv2d_5 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_7 = nn.Conv2d(bias=False, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_907 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_908 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_909 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_914 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_915 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_916 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_917 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_918 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_923 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_924 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_925 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_926 = nn.GELU()
        self.pnnx_unique_927 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_928 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_929 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_930 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_931 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_936 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_937 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_938 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_939 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_940 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_945 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_946 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_947 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_948 = nn.GELU()
        self.pnnx_unique_949 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_950 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_951 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_952 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_953 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_958 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_959 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_960 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_961 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_962 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_967 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_968 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_969 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_970 = nn.GELU()
        self.pnnx_unique_971 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_972 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_973 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_974 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_975 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_980 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_981 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_982 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_983 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_984 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_989 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_990 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_991 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_992 = nn.GELU()
        self.pnnx_unique_993 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_994 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_995 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_996 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_997 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1002 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1003 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1004 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1005 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1006 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1011 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1012 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1013 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_1014 = nn.GELU()
        self.pnnx_unique_1015 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_1016 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1017 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1018 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1019 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1024 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1025 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1026 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1027 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1028 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1033 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1034 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1035 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_1036 = nn.GELU()
        self.pnnx_unique_1037 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_1038 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1039 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1040 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1041 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1046 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1047 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1048 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1049 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1050 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1055 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1056 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1057 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_1058 = nn.GELU()
        self.pnnx_unique_1059 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_1060 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1061 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1062 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1063 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1068 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1069 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1070 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1071 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1072 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1077 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1078 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1079 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_1080 = nn.GELU()
        self.pnnx_unique_1081 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_1082 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1083 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1084 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1085 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1090 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1091 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1092 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1093 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1094 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1099 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1100 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1101 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_1102 = nn.GELU()
        self.pnnx_unique_1103 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_1104 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1105 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1106 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1107 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1112 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1113 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1114 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1115 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1116 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1121 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1122 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1123 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_1124 = nn.GELU()
        self.pnnx_unique_1125 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_1126 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1127 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1128 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1129 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1134 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1135 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1136 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1137 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1138 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1143 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1144 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1145 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_1146 = nn.GELU()
        self.pnnx_unique_1147 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_1148 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1149 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1150 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1151 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1156 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1157 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1158 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1159 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1160 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1165 = nn.Linear(bias=False, in_features=128, out_features=128)
        self.pnnx_unique_1166 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1167 = nn.Linear(bias=False, in_features=256, out_features=1024)
        self.pnnx_unique_1168 = nn.GELU()
        self.pnnx_unique_1169 = nn.Linear(bias=False, in_features=1024, out_features=128)
        self.pnnx_unique_1170 = nn.LayerNorm(elementwise_affine=True, eps=0.000010, normalized_shape=(128,))
        self.pnnx_unique_1171 = nn.Linear(bias=True, in_features=128, out_features=128)
        self.pnnx_unique_1172 = nn.Linear(bias=True, in_features=128, out_features=128)
        self.pnnx_unique_1173 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=130, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.pnnx_unique_1174 = nn.ReLU()
        self.pnnx_unique_1175 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=144, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.metricnet_metric_in = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=14, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.metricnet_metric_net1_0 = nn.PReLU(num_parameters=1)
        self.metricnet_metric_net1_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.metricnet_metric_net2_0 = nn.PReLU(num_parameters=1)
        self.metricnet_metric_net2_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.metricnet_metric_net3_0 = nn.PReLU(num_parameters=1)
        self.metricnet_metric_net3_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.metricnet_metric_out_0 = nn.PReLU(num_parameters=1)
        self.metricnet_metric_out_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=2, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.metricnet_metric_out_2 = nn.Tanh()

        archive = zipfile.ZipFile('D:/60-fps-Project/VFI/GMFSS2NCNN/reuse_576.pnnx.bin', 'r')
        self.featnet_block1_0.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block1.0.weight', (1), 'float32')
        self.featnet_block1_1.bias = self.load_pnnx_bin_as_parameter(archive, 'featnet.block1.1.bias', (64), 'float32')
        self.featnet_block1_1.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block1.1.weight', (64,3,3,3), 'float32')
        self.featnet_block1_2.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block1.2.weight', (1), 'float32')
        self.featnet_block1_3.bias = self.load_pnnx_bin_as_parameter(archive, 'featnet.block1.3.bias', (64), 'float32')
        self.featnet_block1_3.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block1.3.weight', (64,64,3,3), 'float32')
        self.featnet_block2_0.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block2.0.weight', (1), 'float32')
        self.featnet_block2_1.bias = self.load_pnnx_bin_as_parameter(archive, 'featnet.block2.1.bias', (128), 'float32')
        self.featnet_block2_1.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block2.1.weight', (128,64,3,3), 'float32')
        self.featnet_block2_2.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block2.2.weight', (1), 'float32')
        self.featnet_block2_3.bias = self.load_pnnx_bin_as_parameter(archive, 'featnet.block2.3.bias', (128), 'float32')
        self.featnet_block2_3.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block2.3.weight', (128,128,3,3), 'float32')
        self.featnet_block3_0.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block3.0.weight', (1), 'float32')
        self.featnet_block3_1.bias = self.load_pnnx_bin_as_parameter(archive, 'featnet.block3.1.bias', (192), 'float32')
        self.featnet_block3_1.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block3.1.weight', (192,128,3,3), 'float32')
        self.featnet_block3_2.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block3.2.weight', (1), 'float32')
        self.featnet_block3_3.bias = self.load_pnnx_bin_as_parameter(archive, 'featnet.block3.3.bias', (192), 'float32')
        self.featnet_block3_3.weight = self.load_pnnx_bin_as_parameter(archive, 'featnet.block3.3.weight', (192,192,3,3), 'float32')
        self.pnnx_unique_0.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_0.weight', (1), 'float32')
        self.pnnx_unique_1.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1.bias', (64), 'float32')
        self.pnnx_unique_1.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1.weight', (64,3,3,3), 'float32')
        self.pnnx_unique_2.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_2.weight', (1), 'float32')
        self.pnnx_unique_3.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_3.bias', (64), 'float32')
        self.pnnx_unique_3.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_3.weight', (64,64,3,3), 'float32')
        self.pnnx_unique_4.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_4.weight', (1), 'float32')
        self.pnnx_unique_5.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_5.bias', (128), 'float32')
        self.pnnx_unique_5.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_5.weight', (128,64,3,3), 'float32')
        self.pnnx_unique_6.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_6.weight', (1), 'float32')
        self.pnnx_unique_7.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_7.bias', (128), 'float32')
        self.pnnx_unique_7.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_7.weight', (128,128,3,3), 'float32')
        self.pnnx_unique_8.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_8.weight', (1), 'float32')
        self.pnnx_unique_9.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_9.bias', (192), 'float32')
        self.pnnx_unique_9.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_9.weight', (192,128,3,3), 'float32')
        self.pnnx_unique_10.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_10.weight', (1), 'float32')
        self.pnnx_unique_11.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_11.bias', (192), 'float32')
        self.pnnx_unique_11.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_11.weight', (192,192,3,3), 'float32')
        self.flownet_backbone_conv1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.conv1.weight', (64,3,7,7), 'float32')
        self.flownet_backbone_layer1_0_conv1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer1.0.conv1.weight', (64,64,3,3), 'float32')
        self.flownet_backbone_layer1_0_conv2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer1.0.conv2.weight', (64,64,3,3), 'float32')
        self.flownet_backbone_layer1_1_conv1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer1.1.conv1.weight', (64,64,3,3), 'float32')
        self.flownet_backbone_layer1_1_conv2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer1.1.conv2.weight', (64,64,3,3), 'float32')
        self.flownet_backbone_layer2_0_conv1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer2.0.conv1.weight', (96,64,3,3), 'float32')
        self.flownet_backbone_layer2_0_conv2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer2.0.conv2.weight', (96,96,3,3), 'float32')
        self.flownet_backbone_layer2_0_downsample_0.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer2.0.downsample.0.bias', (96), 'float32')
        self.flownet_backbone_layer2_0_downsample_0.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer2.0.downsample.0.weight', (96,64,1,1), 'float32')
        self.flownet_backbone_layer2_1_conv1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer2.1.conv1.weight', (96,96,3,3), 'float32')
        self.flownet_backbone_layer2_1_conv2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer2.1.conv2.weight', (96,96,3,3), 'float32')
        self.flownet_backbone_layer3_0_conv1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer3.0.conv1.weight', (128,96,3,3), 'float32')
        self.flownet_backbone_layer3_0_conv2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer3.0.conv2.weight', (128,128,3,3), 'float32')
        self.flownet_backbone_layer3_0_downsample_0.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer3.0.downsample.0.bias', (128), 'float32')
        self.flownet_backbone_layer3_0_downsample_0.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer3.0.downsample.0.weight', (128,96,1,1), 'float32')
        self.flownet_backbone_layer3_1_conv1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer3.1.conv1.weight', (128,128,3,3), 'float32')
        self.flownet_backbone_layer3_1_conv2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.layer3.1.conv2.weight', (128,128,3,3), 'float32')
        self.flownet_backbone_conv2.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.conv2.bias', (128), 'float32')
        self.flownet_backbone_conv2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.backbone.conv2.weight', (128,128,1,1), 'float32')
        self.pnnx_unique_24.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_24.weight', (64,3,7,7), 'float32')
        self.pnnx_unique_27.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_27.weight', (64,64,3,3), 'float32')
        self.pnnx_unique_30.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_30.weight', (64,64,3,3), 'float32')
        self.pnnx_unique_34.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_34.weight', (64,64,3,3), 'float32')
        self.pnnx_unique_37.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_37.weight', (64,64,3,3), 'float32')
        self.pnnx_unique_41.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_41.weight', (96,64,3,3), 'float32')
        self.pnnx_unique_44.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_44.weight', (96,96,3,3), 'float32')
        self.pnnx_unique_47.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_47.bias', (96), 'float32')
        self.pnnx_unique_47.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_47.weight', (96,64,1,1), 'float32')
        self.pnnx_unique_50.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_50.weight', (96,96,3,3), 'float32')
        self.pnnx_unique_53.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_53.weight', (96,96,3,3), 'float32')
        self.pnnx_unique_57.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_57.weight', (128,96,3,3), 'float32')
        self.pnnx_unique_60.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_60.weight', (128,128,3,3), 'float32')
        self.pnnx_unique_63.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_63.bias', (128), 'float32')
        self.pnnx_unique_63.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_63.weight', (128,96,1,1), 'float32')
        self.pnnx_unique_66.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_66.weight', (128,128,3,3), 'float32')
        self.pnnx_unique_69.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_69.weight', (128,128,3,3), 'float32')
        self.pnnx_unique_73.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_73.bias', (128), 'float32')
        self.pnnx_unique_73.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_73.weight', (128,128,1,1), 'float32')
        self.conv2d_0.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_0.weight', (128,128,3,3), 'float32')
        self.conv2d_2.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_2.weight', (128,128,3,3), 'float32')
        self.flownet_transformer_layers_0_self_attn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.self_attn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_0_self_attn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.self_attn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_0_self_attn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.self_attn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_0_self_attn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.self_attn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_0_self_attn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.self_attn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_0_self_attn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.self_attn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_0_cross_attn_ffn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.cross_attn_ffn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_0_cross_attn_ffn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.cross_attn_ffn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_0_cross_attn_ffn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.cross_attn_ffn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_0_cross_attn_ffn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.cross_attn_ffn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_0_cross_attn_ffn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.cross_attn_ffn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_0_cross_attn_ffn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.cross_attn_ffn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_0_cross_attn_ffn_mlp_0.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.cross_attn_ffn.mlp.0.weight', (1024,256), 'float32')
        self.flownet_transformer_layers_0_cross_attn_ffn_mlp_2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.cross_attn_ffn.mlp.2.weight', (128,1024), 'float32')
        self.flownet_transformer_layers_0_cross_attn_ffn_norm2.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.cross_attn_ffn.norm2.bias', (128), 'float32')
        self.flownet_transformer_layers_0_cross_attn_ffn_norm2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.0.cross_attn_ffn.norm2.weight', (128), 'float32')
        self.pnnx_unique_86.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_86.weight', (128,128), 'float32')
        self.pnnx_unique_87.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_87.weight', (128,128), 'float32')
        self.pnnx_unique_88.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_88.weight', (128,128), 'float32')
        self.pnnx_unique_93.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_93.weight', (128,128), 'float32')
        self.pnnx_unique_94.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_94.bias', (128), 'float32')
        self.pnnx_unique_94.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_94.weight', (128), 'float32')
        self.pnnx_unique_95.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_95.weight', (128,128), 'float32')
        self.pnnx_unique_96.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_96.weight', (128,128), 'float32')
        self.pnnx_unique_97.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_97.weight', (128,128), 'float32')
        self.pnnx_unique_102.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_102.weight', (128,128), 'float32')
        self.pnnx_unique_103.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_103.bias', (128), 'float32')
        self.pnnx_unique_103.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_103.weight', (128), 'float32')
        self.pnnx_unique_104.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_104.weight', (1024,256), 'float32')
        self.pnnx_unique_106.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_106.weight', (128,1024), 'float32')
        self.pnnx_unique_107.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_107.bias', (128), 'float32')
        self.pnnx_unique_107.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_107.weight', (128), 'float32')
        self.flownet_transformer_layers_1_self_attn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.self_attn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_1_self_attn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.self_attn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_1_self_attn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.self_attn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_1_self_attn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.self_attn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_1_self_attn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.self_attn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_1_self_attn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.self_attn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_1_cross_attn_ffn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.cross_attn_ffn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_1_cross_attn_ffn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.cross_attn_ffn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_1_cross_attn_ffn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.cross_attn_ffn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_1_cross_attn_ffn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.cross_attn_ffn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_1_cross_attn_ffn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.cross_attn_ffn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_1_cross_attn_ffn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.cross_attn_ffn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_1_cross_attn_ffn_mlp_0.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.cross_attn_ffn.mlp.0.weight', (1024,256), 'float32')
        self.flownet_transformer_layers_1_cross_attn_ffn_mlp_2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.cross_attn_ffn.mlp.2.weight', (128,1024), 'float32')
        self.flownet_transformer_layers_1_cross_attn_ffn_norm2.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.cross_attn_ffn.norm2.bias', (128), 'float32')
        self.flownet_transformer_layers_1_cross_attn_ffn_norm2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.1.cross_attn_ffn.norm2.weight', (128), 'float32')
        self.pnnx_unique_116.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_116.weight', (128,128), 'float32')
        self.pnnx_unique_117.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_117.weight', (128,128), 'float32')
        self.pnnx_unique_118.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_118.weight', (128,128), 'float32')
        self.pnnx_unique_123.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_123.weight', (128,128), 'float32')
        self.pnnx_unique_124.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_124.bias', (128), 'float32')
        self.pnnx_unique_124.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_124.weight', (128), 'float32')
        self.pnnx_unique_125.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_125.weight', (128,128), 'float32')
        self.pnnx_unique_126.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_126.weight', (128,128), 'float32')
        self.pnnx_unique_127.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_127.weight', (128,128), 'float32')
        self.pnnx_unique_132.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_132.weight', (128,128), 'float32')
        self.pnnx_unique_133.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_133.bias', (128), 'float32')
        self.pnnx_unique_133.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_133.weight', (128), 'float32')
        self.pnnx_unique_134.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_134.weight', (1024,256), 'float32')
        self.pnnx_unique_136.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_136.weight', (128,1024), 'float32')
        self.pnnx_unique_137.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_137.bias', (128), 'float32')
        self.pnnx_unique_137.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_137.weight', (128), 'float32')
        self.flownet_transformer_layers_2_self_attn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.self_attn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_2_self_attn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.self_attn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_2_self_attn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.self_attn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_2_self_attn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.self_attn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_2_self_attn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.self_attn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_2_self_attn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.self_attn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_2_cross_attn_ffn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.cross_attn_ffn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_2_cross_attn_ffn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.cross_attn_ffn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_2_cross_attn_ffn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.cross_attn_ffn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_2_cross_attn_ffn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.cross_attn_ffn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_2_cross_attn_ffn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.cross_attn_ffn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_2_cross_attn_ffn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.cross_attn_ffn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_2_cross_attn_ffn_mlp_0.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.cross_attn_ffn.mlp.0.weight', (1024,256), 'float32')
        self.flownet_transformer_layers_2_cross_attn_ffn_mlp_2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.cross_attn_ffn.mlp.2.weight', (128,1024), 'float32')
        self.flownet_transformer_layers_2_cross_attn_ffn_norm2.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.cross_attn_ffn.norm2.bias', (128), 'float32')
        self.flownet_transformer_layers_2_cross_attn_ffn_norm2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.2.cross_attn_ffn.norm2.weight', (128), 'float32')
        self.pnnx_unique_146.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_146.weight', (128,128), 'float32')
        self.pnnx_unique_147.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_147.weight', (128,128), 'float32')
        self.pnnx_unique_148.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_148.weight', (128,128), 'float32')
        self.pnnx_unique_153.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_153.weight', (128,128), 'float32')
        self.pnnx_unique_154.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_154.bias', (128), 'float32')
        self.pnnx_unique_154.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_154.weight', (128), 'float32')
        self.pnnx_unique_155.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_155.weight', (128,128), 'float32')
        self.pnnx_unique_156.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_156.weight', (128,128), 'float32')
        self.pnnx_unique_157.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_157.weight', (128,128), 'float32')
        self.pnnx_unique_162.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_162.weight', (128,128), 'float32')
        self.pnnx_unique_163.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_163.bias', (128), 'float32')
        self.pnnx_unique_163.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_163.weight', (128), 'float32')
        self.pnnx_unique_164.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_164.weight', (1024,256), 'float32')
        self.pnnx_unique_166.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_166.weight', (128,1024), 'float32')
        self.pnnx_unique_167.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_167.bias', (128), 'float32')
        self.pnnx_unique_167.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_167.weight', (128), 'float32')
        self.flownet_transformer_layers_3_self_attn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.self_attn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_3_self_attn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.self_attn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_3_self_attn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.self_attn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_3_self_attn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.self_attn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_3_self_attn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.self_attn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_3_self_attn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.self_attn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_3_cross_attn_ffn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.cross_attn_ffn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_3_cross_attn_ffn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.cross_attn_ffn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_3_cross_attn_ffn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.cross_attn_ffn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_3_cross_attn_ffn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.cross_attn_ffn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_3_cross_attn_ffn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.cross_attn_ffn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_3_cross_attn_ffn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.cross_attn_ffn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_3_cross_attn_ffn_mlp_0.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.cross_attn_ffn.mlp.0.weight', (1024,256), 'float32')
        self.flownet_transformer_layers_3_cross_attn_ffn_mlp_2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.cross_attn_ffn.mlp.2.weight', (128,1024), 'float32')
        self.flownet_transformer_layers_3_cross_attn_ffn_norm2.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.cross_attn_ffn.norm2.bias', (128), 'float32')
        self.flownet_transformer_layers_3_cross_attn_ffn_norm2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.3.cross_attn_ffn.norm2.weight', (128), 'float32')
        self.pnnx_unique_176.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_176.weight', (128,128), 'float32')
        self.pnnx_unique_177.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_177.weight', (128,128), 'float32')
        self.pnnx_unique_178.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_178.weight', (128,128), 'float32')
        self.pnnx_unique_183.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_183.weight', (128,128), 'float32')
        self.pnnx_unique_184.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_184.bias', (128), 'float32')
        self.pnnx_unique_184.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_184.weight', (128), 'float32')
        self.pnnx_unique_185.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_185.weight', (128,128), 'float32')
        self.pnnx_unique_186.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_186.weight', (128,128), 'float32')
        self.pnnx_unique_187.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_187.weight', (128,128), 'float32')
        self.pnnx_unique_192.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_192.weight', (128,128), 'float32')
        self.pnnx_unique_193.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_193.bias', (128), 'float32')
        self.pnnx_unique_193.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_193.weight', (128), 'float32')
        self.pnnx_unique_194.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_194.weight', (1024,256), 'float32')
        self.pnnx_unique_196.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_196.weight', (128,1024), 'float32')
        self.pnnx_unique_197.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_197.bias', (128), 'float32')
        self.pnnx_unique_197.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_197.weight', (128), 'float32')
        self.flownet_transformer_layers_4_self_attn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.self_attn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_4_self_attn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.self_attn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_4_self_attn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.self_attn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_4_self_attn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.self_attn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_4_self_attn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.self_attn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_4_self_attn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.self_attn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_4_cross_attn_ffn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.cross_attn_ffn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_4_cross_attn_ffn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.cross_attn_ffn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_4_cross_attn_ffn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.cross_attn_ffn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_4_cross_attn_ffn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.cross_attn_ffn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_4_cross_attn_ffn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.cross_attn_ffn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_4_cross_attn_ffn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.cross_attn_ffn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_4_cross_attn_ffn_mlp_0.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.cross_attn_ffn.mlp.0.weight', (1024,256), 'float32')
        self.flownet_transformer_layers_4_cross_attn_ffn_mlp_2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.cross_attn_ffn.mlp.2.weight', (128,1024), 'float32')
        self.flownet_transformer_layers_4_cross_attn_ffn_norm2.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.cross_attn_ffn.norm2.bias', (128), 'float32')
        self.flownet_transformer_layers_4_cross_attn_ffn_norm2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.4.cross_attn_ffn.norm2.weight', (128), 'float32')
        self.pnnx_unique_206.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_206.weight', (128,128), 'float32')
        self.pnnx_unique_207.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_207.weight', (128,128), 'float32')
        self.pnnx_unique_208.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_208.weight', (128,128), 'float32')
        self.pnnx_unique_213.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_213.weight', (128,128), 'float32')
        self.pnnx_unique_214.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_214.bias', (128), 'float32')
        self.pnnx_unique_214.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_214.weight', (128), 'float32')
        self.pnnx_unique_215.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_215.weight', (128,128), 'float32')
        self.pnnx_unique_216.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_216.weight', (128,128), 'float32')
        self.pnnx_unique_217.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_217.weight', (128,128), 'float32')
        self.pnnx_unique_222.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_222.weight', (128,128), 'float32')
        self.pnnx_unique_223.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_223.bias', (128), 'float32')
        self.pnnx_unique_223.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_223.weight', (128), 'float32')
        self.pnnx_unique_224.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_224.weight', (1024,256), 'float32')
        self.pnnx_unique_226.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_226.weight', (128,1024), 'float32')
        self.pnnx_unique_227.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_227.bias', (128), 'float32')
        self.pnnx_unique_227.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_227.weight', (128), 'float32')
        self.flownet_transformer_layers_5_self_attn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.self_attn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_5_self_attn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.self_attn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_5_self_attn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.self_attn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_5_self_attn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.self_attn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_5_self_attn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.self_attn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_5_self_attn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.self_attn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_5_cross_attn_ffn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.cross_attn_ffn.q_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_5_cross_attn_ffn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.cross_attn_ffn.k_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_5_cross_attn_ffn_v_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.cross_attn_ffn.v_proj.weight', (128,128), 'float32')
        self.flownet_transformer_layers_5_cross_attn_ffn_merge.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.cross_attn_ffn.merge.weight', (128,128), 'float32')
        self.flownet_transformer_layers_5_cross_attn_ffn_norm1.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.cross_attn_ffn.norm1.bias', (128), 'float32')
        self.flownet_transformer_layers_5_cross_attn_ffn_norm1.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.cross_attn_ffn.norm1.weight', (128), 'float32')
        self.flownet_transformer_layers_5_cross_attn_ffn_mlp_0.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.cross_attn_ffn.mlp.0.weight', (1024,256), 'float32')
        self.flownet_transformer_layers_5_cross_attn_ffn_mlp_2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.cross_attn_ffn.mlp.2.weight', (128,1024), 'float32')
        self.flownet_transformer_layers_5_cross_attn_ffn_norm2.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.cross_attn_ffn.norm2.bias', (128), 'float32')
        self.flownet_transformer_layers_5_cross_attn_ffn_norm2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.transformer.layers.5.cross_attn_ffn.norm2.weight', (128), 'float32')
        self.pnnx_unique_236.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_236.weight', (128,128), 'float32')
        self.pnnx_unique_237.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_237.weight', (128,128), 'float32')
        self.pnnx_unique_238.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_238.weight', (128,128), 'float32')
        self.pnnx_unique_243.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_243.weight', (128,128), 'float32')
        self.pnnx_unique_244.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_244.bias', (128), 'float32')
        self.pnnx_unique_244.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_244.weight', (128), 'float32')
        self.pnnx_unique_245.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_245.weight', (128,128), 'float32')
        self.pnnx_unique_246.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_246.weight', (128,128), 'float32')
        self.pnnx_unique_247.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_247.weight', (128,128), 'float32')
        self.pnnx_unique_252.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_252.weight', (128,128), 'float32')
        self.pnnx_unique_253.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_253.bias', (128), 'float32')
        self.pnnx_unique_253.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_253.weight', (128), 'float32')
        self.pnnx_unique_254.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_254.weight', (1024,256), 'float32')
        self.pnnx_unique_256.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_256.weight', (128,1024), 'float32')
        self.pnnx_unique_257.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_257.bias', (128), 'float32')
        self.pnnx_unique_257.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_257.weight', (128), 'float32')
        self.flownet_feature_flow_attn_q_proj.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.feature_flow_attn.q_proj.bias', (128), 'float32')
        self.flownet_feature_flow_attn_q_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.feature_flow_attn.q_proj.weight', (128,128), 'float32')
        self.flownet_feature_flow_attn_k_proj.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.feature_flow_attn.k_proj.bias', (128), 'float32')
        self.flownet_feature_flow_attn_k_proj.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.feature_flow_attn.k_proj.weight', (128,128), 'float32')
        self.conv2d_1.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_1.weight', (128,128,3,3), 'float32')
        self.conv2d_3.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_3.weight', (128,128,3,3), 'float32')
        self.pnnx_unique_263.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_263.weight', (128,128), 'float32')
        self.pnnx_unique_264.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_264.weight', (128,128), 'float32')
        self.pnnx_unique_265.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_265.weight', (128,128), 'float32')
        self.pnnx_unique_270.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_270.weight', (128,128), 'float32')
        self.pnnx_unique_271.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_271.bias', (128), 'float32')
        self.pnnx_unique_271.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_271.weight', (128), 'float32')
        self.pnnx_unique_272.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_272.weight', (128,128), 'float32')
        self.pnnx_unique_273.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_273.weight', (128,128), 'float32')
        self.pnnx_unique_274.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_274.weight', (128,128), 'float32')
        self.pnnx_unique_279.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_279.weight', (128,128), 'float32')
        self.pnnx_unique_280.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_280.bias', (128), 'float32')
        self.pnnx_unique_280.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_280.weight', (128), 'float32')
        self.pnnx_unique_281.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_281.weight', (1024,256), 'float32')
        self.pnnx_unique_283.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_283.weight', (128,1024), 'float32')
        self.pnnx_unique_284.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_284.bias', (128), 'float32')
        self.pnnx_unique_284.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_284.weight', (128), 'float32')
        self.pnnx_unique_285.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_285.weight', (128,128), 'float32')
        self.pnnx_unique_286.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_286.weight', (128,128), 'float32')
        self.pnnx_unique_287.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_287.weight', (128,128), 'float32')
        self.pnnx_unique_292.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_292.weight', (128,128), 'float32')
        self.pnnx_unique_293.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_293.bias', (128), 'float32')
        self.pnnx_unique_293.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_293.weight', (128), 'float32')
        self.pnnx_unique_294.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_294.weight', (128,128), 'float32')
        self.pnnx_unique_295.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_295.weight', (128,128), 'float32')
        self.pnnx_unique_296.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_296.weight', (128,128), 'float32')
        self.pnnx_unique_301.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_301.weight', (128,128), 'float32')
        self.pnnx_unique_302.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_302.bias', (128), 'float32')
        self.pnnx_unique_302.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_302.weight', (128), 'float32')
        self.pnnx_unique_303.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_303.weight', (1024,256), 'float32')
        self.pnnx_unique_305.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_305.weight', (128,1024), 'float32')
        self.pnnx_unique_306.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_306.bias', (128), 'float32')
        self.pnnx_unique_306.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_306.weight', (128), 'float32')
        self.pnnx_unique_307.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_307.weight', (128,128), 'float32')
        self.pnnx_unique_308.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_308.weight', (128,128), 'float32')
        self.pnnx_unique_309.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_309.weight', (128,128), 'float32')
        self.pnnx_unique_314.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_314.weight', (128,128), 'float32')
        self.pnnx_unique_315.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_315.bias', (128), 'float32')
        self.pnnx_unique_315.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_315.weight', (128), 'float32')
        self.pnnx_unique_316.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_316.weight', (128,128), 'float32')
        self.pnnx_unique_317.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_317.weight', (128,128), 'float32')
        self.pnnx_unique_318.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_318.weight', (128,128), 'float32')
        self.pnnx_unique_323.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_323.weight', (128,128), 'float32')
        self.pnnx_unique_324.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_324.bias', (128), 'float32')
        self.pnnx_unique_324.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_324.weight', (128), 'float32')
        self.pnnx_unique_325.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_325.weight', (1024,256), 'float32')
        self.pnnx_unique_327.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_327.weight', (128,1024), 'float32')
        self.pnnx_unique_328.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_328.bias', (128), 'float32')
        self.pnnx_unique_328.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_328.weight', (128), 'float32')
        self.pnnx_unique_329.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_329.weight', (128,128), 'float32')
        self.pnnx_unique_330.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_330.weight', (128,128), 'float32')
        self.pnnx_unique_331.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_331.weight', (128,128), 'float32')
        self.pnnx_unique_336.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_336.weight', (128,128), 'float32')
        self.pnnx_unique_337.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_337.bias', (128), 'float32')
        self.pnnx_unique_337.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_337.weight', (128), 'float32')
        self.pnnx_unique_338.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_338.weight', (128,128), 'float32')
        self.pnnx_unique_339.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_339.weight', (128,128), 'float32')
        self.pnnx_unique_340.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_340.weight', (128,128), 'float32')
        self.pnnx_unique_345.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_345.weight', (128,128), 'float32')
        self.pnnx_unique_346.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_346.bias', (128), 'float32')
        self.pnnx_unique_346.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_346.weight', (128), 'float32')
        self.pnnx_unique_347.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_347.weight', (1024,256), 'float32')
        self.pnnx_unique_349.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_349.weight', (128,1024), 'float32')
        self.pnnx_unique_350.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_350.bias', (128), 'float32')
        self.pnnx_unique_350.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_350.weight', (128), 'float32')
        self.pnnx_unique_351.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_351.weight', (128,128), 'float32')
        self.pnnx_unique_352.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_352.weight', (128,128), 'float32')
        self.pnnx_unique_353.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_353.weight', (128,128), 'float32')
        self.pnnx_unique_358.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_358.weight', (128,128), 'float32')
        self.pnnx_unique_359.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_359.bias', (128), 'float32')
        self.pnnx_unique_359.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_359.weight', (128), 'float32')
        self.pnnx_unique_360.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_360.weight', (128,128), 'float32')
        self.pnnx_unique_361.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_361.weight', (128,128), 'float32')
        self.pnnx_unique_362.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_362.weight', (128,128), 'float32')
        self.pnnx_unique_367.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_367.weight', (128,128), 'float32')
        self.pnnx_unique_368.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_368.bias', (128), 'float32')
        self.pnnx_unique_368.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_368.weight', (128), 'float32')
        self.pnnx_unique_369.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_369.weight', (1024,256), 'float32')
        self.pnnx_unique_371.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_371.weight', (128,1024), 'float32')
        self.pnnx_unique_372.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_372.bias', (128), 'float32')
        self.pnnx_unique_372.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_372.weight', (128), 'float32')
        self.pnnx_unique_373.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_373.weight', (128,128), 'float32')
        self.pnnx_unique_374.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_374.weight', (128,128), 'float32')
        self.pnnx_unique_375.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_375.weight', (128,128), 'float32')
        self.pnnx_unique_380.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_380.weight', (128,128), 'float32')
        self.pnnx_unique_381.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_381.bias', (128), 'float32')
        self.pnnx_unique_381.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_381.weight', (128), 'float32')
        self.pnnx_unique_382.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_382.weight', (128,128), 'float32')
        self.pnnx_unique_383.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_383.weight', (128,128), 'float32')
        self.pnnx_unique_384.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_384.weight', (128,128), 'float32')
        self.pnnx_unique_389.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_389.weight', (128,128), 'float32')
        self.pnnx_unique_390.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_390.bias', (128), 'float32')
        self.pnnx_unique_390.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_390.weight', (128), 'float32')
        self.pnnx_unique_391.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_391.weight', (1024,256), 'float32')
        self.pnnx_unique_393.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_393.weight', (128,1024), 'float32')
        self.pnnx_unique_394.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_394.bias', (128), 'float32')
        self.pnnx_unique_394.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_394.weight', (128), 'float32')
        self.pnnx_unique_395.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_395.weight', (128,128), 'float32')
        self.pnnx_unique_396.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_396.weight', (128,128), 'float32')
        self.pnnx_unique_397.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_397.weight', (128,128), 'float32')
        self.pnnx_unique_402.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_402.weight', (128,128), 'float32')
        self.pnnx_unique_403.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_403.bias', (128), 'float32')
        self.pnnx_unique_403.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_403.weight', (128), 'float32')
        self.pnnx_unique_404.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_404.weight', (128,128), 'float32')
        self.pnnx_unique_405.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_405.weight', (128,128), 'float32')
        self.pnnx_unique_406.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_406.weight', (128,128), 'float32')
        self.pnnx_unique_411.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_411.weight', (128,128), 'float32')
        self.pnnx_unique_412.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_412.bias', (128), 'float32')
        self.pnnx_unique_412.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_412.weight', (128), 'float32')
        self.pnnx_unique_413.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_413.weight', (1024,256), 'float32')
        self.pnnx_unique_415.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_415.weight', (128,1024), 'float32')
        self.pnnx_unique_416.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_416.bias', (128), 'float32')
        self.pnnx_unique_416.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_416.weight', (128), 'float32')
        self.pnnx_unique_417.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_417.weight', (128,128), 'float32')
        self.pnnx_unique_418.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_418.weight', (128,128), 'float32')
        self.pnnx_unique_419.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_419.weight', (128,128), 'float32')
        self.pnnx_unique_424.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_424.weight', (128,128), 'float32')
        self.pnnx_unique_425.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_425.bias', (128), 'float32')
        self.pnnx_unique_425.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_425.weight', (128), 'float32')
        self.pnnx_unique_426.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_426.weight', (128,128), 'float32')
        self.pnnx_unique_427.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_427.weight', (128,128), 'float32')
        self.pnnx_unique_428.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_428.weight', (128,128), 'float32')
        self.pnnx_unique_433.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_433.weight', (128,128), 'float32')
        self.pnnx_unique_434.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_434.bias', (128), 'float32')
        self.pnnx_unique_434.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_434.weight', (128), 'float32')
        self.pnnx_unique_435.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_435.weight', (1024,256), 'float32')
        self.pnnx_unique_437.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_437.weight', (128,1024), 'float32')
        self.pnnx_unique_438.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_438.bias', (128), 'float32')
        self.pnnx_unique_438.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_438.weight', (128), 'float32')
        self.pnnx_unique_439.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_439.weight', (128,128), 'float32')
        self.pnnx_unique_440.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_440.weight', (128,128), 'float32')
        self.pnnx_unique_441.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_441.weight', (128,128), 'float32')
        self.pnnx_unique_446.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_446.weight', (128,128), 'float32')
        self.pnnx_unique_447.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_447.bias', (128), 'float32')
        self.pnnx_unique_447.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_447.weight', (128), 'float32')
        self.pnnx_unique_448.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_448.weight', (128,128), 'float32')
        self.pnnx_unique_449.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_449.weight', (128,128), 'float32')
        self.pnnx_unique_450.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_450.weight', (128,128), 'float32')
        self.pnnx_unique_455.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_455.weight', (128,128), 'float32')
        self.pnnx_unique_456.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_456.bias', (128), 'float32')
        self.pnnx_unique_456.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_456.weight', (128), 'float32')
        self.pnnx_unique_457.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_457.weight', (1024,256), 'float32')
        self.pnnx_unique_459.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_459.weight', (128,1024), 'float32')
        self.pnnx_unique_460.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_460.bias', (128), 'float32')
        self.pnnx_unique_460.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_460.weight', (128), 'float32')
        self.pnnx_unique_461.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_461.weight', (128,128), 'float32')
        self.pnnx_unique_462.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_462.weight', (128,128), 'float32')
        self.pnnx_unique_463.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_463.weight', (128,128), 'float32')
        self.pnnx_unique_468.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_468.weight', (128,128), 'float32')
        self.pnnx_unique_469.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_469.bias', (128), 'float32')
        self.pnnx_unique_469.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_469.weight', (128), 'float32')
        self.pnnx_unique_470.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_470.weight', (128,128), 'float32')
        self.pnnx_unique_471.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_471.weight', (128,128), 'float32')
        self.pnnx_unique_472.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_472.weight', (128,128), 'float32')
        self.pnnx_unique_477.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_477.weight', (128,128), 'float32')
        self.pnnx_unique_478.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_478.bias', (128), 'float32')
        self.pnnx_unique_478.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_478.weight', (128), 'float32')
        self.pnnx_unique_479.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_479.weight', (1024,256), 'float32')
        self.pnnx_unique_481.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_481.weight', (128,1024), 'float32')
        self.pnnx_unique_482.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_482.bias', (128), 'float32')
        self.pnnx_unique_482.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_482.weight', (128), 'float32')
        self.pnnx_unique_483.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_483.weight', (128,128), 'float32')
        self.pnnx_unique_484.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_484.weight', (128,128), 'float32')
        self.pnnx_unique_485.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_485.weight', (128,128), 'float32')
        self.pnnx_unique_490.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_490.weight', (128,128), 'float32')
        self.pnnx_unique_491.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_491.bias', (128), 'float32')
        self.pnnx_unique_491.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_491.weight', (128), 'float32')
        self.pnnx_unique_492.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_492.weight', (128,128), 'float32')
        self.pnnx_unique_493.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_493.weight', (128,128), 'float32')
        self.pnnx_unique_494.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_494.weight', (128,128), 'float32')
        self.pnnx_unique_499.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_499.weight', (128,128), 'float32')
        self.pnnx_unique_500.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_500.bias', (128), 'float32')
        self.pnnx_unique_500.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_500.weight', (128), 'float32')
        self.pnnx_unique_501.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_501.weight', (1024,256), 'float32')
        self.pnnx_unique_503.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_503.weight', (128,1024), 'float32')
        self.pnnx_unique_504.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_504.bias', (128), 'float32')
        self.pnnx_unique_504.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_504.weight', (128), 'float32')
        self.pnnx_unique_505.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_505.weight', (128,128), 'float32')
        self.pnnx_unique_506.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_506.weight', (128,128), 'float32')
        self.pnnx_unique_507.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_507.weight', (128,128), 'float32')
        self.pnnx_unique_512.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_512.weight', (128,128), 'float32')
        self.pnnx_unique_513.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_513.bias', (128), 'float32')
        self.pnnx_unique_513.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_513.weight', (128), 'float32')
        self.pnnx_unique_514.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_514.weight', (128,128), 'float32')
        self.pnnx_unique_515.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_515.weight', (128,128), 'float32')
        self.pnnx_unique_516.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_516.weight', (128,128), 'float32')
        self.pnnx_unique_521.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_521.weight', (128,128), 'float32')
        self.pnnx_unique_522.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_522.bias', (128), 'float32')
        self.pnnx_unique_522.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_522.weight', (128), 'float32')
        self.pnnx_unique_523.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_523.weight', (1024,256), 'float32')
        self.pnnx_unique_525.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_525.weight', (128,1024), 'float32')
        self.pnnx_unique_526.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_526.bias', (128), 'float32')
        self.pnnx_unique_526.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_526.weight', (128), 'float32')
        self.pnnx_unique_527.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_527.bias', (128), 'float32')
        self.pnnx_unique_527.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_527.weight', (128,128), 'float32')
        self.pnnx_unique_528.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_528.bias', (128), 'float32')
        self.pnnx_unique_528.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_528.weight', (128,128), 'float32')
        self.flownet_upsampler_0.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.upsampler.0.bias', (256), 'float32')
        self.flownet_upsampler_0.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.upsampler.0.weight', (256,130,3,3), 'float32')
        self.flownet_upsampler_2.bias = self.load_pnnx_bin_as_parameter(archive, 'flownet.upsampler.2.bias', (144), 'float32')
        self.flownet_upsampler_2.weight = self.load_pnnx_bin_as_parameter(archive, 'flownet.upsampler.2.weight', (144,256,1,1), 'float32')
        self.conv2d_4.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_4.weight', (128,128,3,3), 'float32')
        self.conv2d_6.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_6.weight', (128,128,3,3), 'float32')
        self.pnnx_unique_636.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_636.weight', (128,128), 'float32')
        self.pnnx_unique_637.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_637.weight', (128,128), 'float32')
        self.pnnx_unique_638.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_638.weight', (128,128), 'float32')
        self.pnnx_unique_643.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_643.weight', (128,128), 'float32')
        self.pnnx_unique_644.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_644.bias', (128), 'float32')
        self.pnnx_unique_644.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_644.weight', (128), 'float32')
        self.pnnx_unique_645.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_645.weight', (128,128), 'float32')
        self.pnnx_unique_646.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_646.weight', (128,128), 'float32')
        self.pnnx_unique_647.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_647.weight', (128,128), 'float32')
        self.pnnx_unique_652.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_652.weight', (128,128), 'float32')
        self.pnnx_unique_653.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_653.bias', (128), 'float32')
        self.pnnx_unique_653.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_653.weight', (128), 'float32')
        self.pnnx_unique_654.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_654.weight', (1024,256), 'float32')
        self.pnnx_unique_656.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_656.weight', (128,1024), 'float32')
        self.pnnx_unique_657.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_657.bias', (128), 'float32')
        self.pnnx_unique_657.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_657.weight', (128), 'float32')
        self.pnnx_unique_658.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_658.weight', (128,128), 'float32')
        self.pnnx_unique_659.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_659.weight', (128,128), 'float32')
        self.pnnx_unique_660.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_660.weight', (128,128), 'float32')
        self.pnnx_unique_665.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_665.weight', (128,128), 'float32')
        self.pnnx_unique_666.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_666.bias', (128), 'float32')
        self.pnnx_unique_666.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_666.weight', (128), 'float32')
        self.pnnx_unique_667.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_667.weight', (128,128), 'float32')
        self.pnnx_unique_668.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_668.weight', (128,128), 'float32')
        self.pnnx_unique_669.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_669.weight', (128,128), 'float32')
        self.pnnx_unique_674.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_674.weight', (128,128), 'float32')
        self.pnnx_unique_675.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_675.bias', (128), 'float32')
        self.pnnx_unique_675.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_675.weight', (128), 'float32')
        self.pnnx_unique_676.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_676.weight', (1024,256), 'float32')
        self.pnnx_unique_678.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_678.weight', (128,1024), 'float32')
        self.pnnx_unique_679.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_679.bias', (128), 'float32')
        self.pnnx_unique_679.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_679.weight', (128), 'float32')
        self.pnnx_unique_680.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_680.weight', (128,128), 'float32')
        self.pnnx_unique_681.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_681.weight', (128,128), 'float32')
        self.pnnx_unique_682.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_682.weight', (128,128), 'float32')
        self.pnnx_unique_687.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_687.weight', (128,128), 'float32')
        self.pnnx_unique_688.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_688.bias', (128), 'float32')
        self.pnnx_unique_688.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_688.weight', (128), 'float32')
        self.pnnx_unique_689.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_689.weight', (128,128), 'float32')
        self.pnnx_unique_690.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_690.weight', (128,128), 'float32')
        self.pnnx_unique_691.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_691.weight', (128,128), 'float32')
        self.pnnx_unique_696.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_696.weight', (128,128), 'float32')
        self.pnnx_unique_697.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_697.bias', (128), 'float32')
        self.pnnx_unique_697.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_697.weight', (128), 'float32')
        self.pnnx_unique_698.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_698.weight', (1024,256), 'float32')
        self.pnnx_unique_700.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_700.weight', (128,1024), 'float32')
        self.pnnx_unique_701.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_701.bias', (128), 'float32')
        self.pnnx_unique_701.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_701.weight', (128), 'float32')
        self.pnnx_unique_702.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_702.weight', (128,128), 'float32')
        self.pnnx_unique_703.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_703.weight', (128,128), 'float32')
        self.pnnx_unique_704.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_704.weight', (128,128), 'float32')
        self.pnnx_unique_709.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_709.weight', (128,128), 'float32')
        self.pnnx_unique_710.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_710.bias', (128), 'float32')
        self.pnnx_unique_710.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_710.weight', (128), 'float32')
        self.pnnx_unique_711.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_711.weight', (128,128), 'float32')
        self.pnnx_unique_712.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_712.weight', (128,128), 'float32')
        self.pnnx_unique_713.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_713.weight', (128,128), 'float32')
        self.pnnx_unique_718.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_718.weight', (128,128), 'float32')
        self.pnnx_unique_719.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_719.bias', (128), 'float32')
        self.pnnx_unique_719.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_719.weight', (128), 'float32')
        self.pnnx_unique_720.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_720.weight', (1024,256), 'float32')
        self.pnnx_unique_722.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_722.weight', (128,1024), 'float32')
        self.pnnx_unique_723.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_723.bias', (128), 'float32')
        self.pnnx_unique_723.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_723.weight', (128), 'float32')
        self.pnnx_unique_724.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_724.weight', (128,128), 'float32')
        self.pnnx_unique_725.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_725.weight', (128,128), 'float32')
        self.pnnx_unique_726.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_726.weight', (128,128), 'float32')
        self.pnnx_unique_731.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_731.weight', (128,128), 'float32')
        self.pnnx_unique_732.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_732.bias', (128), 'float32')
        self.pnnx_unique_732.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_732.weight', (128), 'float32')
        self.pnnx_unique_733.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_733.weight', (128,128), 'float32')
        self.pnnx_unique_734.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_734.weight', (128,128), 'float32')
        self.pnnx_unique_735.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_735.weight', (128,128), 'float32')
        self.pnnx_unique_740.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_740.weight', (128,128), 'float32')
        self.pnnx_unique_741.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_741.bias', (128), 'float32')
        self.pnnx_unique_741.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_741.weight', (128), 'float32')
        self.pnnx_unique_742.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_742.weight', (1024,256), 'float32')
        self.pnnx_unique_744.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_744.weight', (128,1024), 'float32')
        self.pnnx_unique_745.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_745.bias', (128), 'float32')
        self.pnnx_unique_745.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_745.weight', (128), 'float32')
        self.pnnx_unique_746.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_746.weight', (128,128), 'float32')
        self.pnnx_unique_747.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_747.weight', (128,128), 'float32')
        self.pnnx_unique_748.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_748.weight', (128,128), 'float32')
        self.pnnx_unique_753.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_753.weight', (128,128), 'float32')
        self.pnnx_unique_754.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_754.bias', (128), 'float32')
        self.pnnx_unique_754.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_754.weight', (128), 'float32')
        self.pnnx_unique_755.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_755.weight', (128,128), 'float32')
        self.pnnx_unique_756.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_756.weight', (128,128), 'float32')
        self.pnnx_unique_757.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_757.weight', (128,128), 'float32')
        self.pnnx_unique_762.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_762.weight', (128,128), 'float32')
        self.pnnx_unique_763.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_763.bias', (128), 'float32')
        self.pnnx_unique_763.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_763.weight', (128), 'float32')
        self.pnnx_unique_764.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_764.weight', (1024,256), 'float32')
        self.pnnx_unique_766.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_766.weight', (128,1024), 'float32')
        self.pnnx_unique_767.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_767.bias', (128), 'float32')
        self.pnnx_unique_767.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_767.weight', (128), 'float32')
        self.pnnx_unique_768.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_768.weight', (128,128), 'float32')
        self.pnnx_unique_769.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_769.weight', (128,128), 'float32')
        self.pnnx_unique_770.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_770.weight', (128,128), 'float32')
        self.pnnx_unique_775.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_775.weight', (128,128), 'float32')
        self.pnnx_unique_776.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_776.bias', (128), 'float32')
        self.pnnx_unique_776.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_776.weight', (128), 'float32')
        self.pnnx_unique_777.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_777.weight', (128,128), 'float32')
        self.pnnx_unique_778.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_778.weight', (128,128), 'float32')
        self.pnnx_unique_779.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_779.weight', (128,128), 'float32')
        self.pnnx_unique_784.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_784.weight', (128,128), 'float32')
        self.pnnx_unique_785.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_785.bias', (128), 'float32')
        self.pnnx_unique_785.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_785.weight', (128), 'float32')
        self.pnnx_unique_786.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_786.weight', (1024,256), 'float32')
        self.pnnx_unique_788.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_788.weight', (128,1024), 'float32')
        self.pnnx_unique_789.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_789.bias', (128), 'float32')
        self.pnnx_unique_789.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_789.weight', (128), 'float32')
        self.pnnx_unique_790.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_790.weight', (128,128), 'float32')
        self.pnnx_unique_791.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_791.weight', (128,128), 'float32')
        self.pnnx_unique_792.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_792.weight', (128,128), 'float32')
        self.pnnx_unique_797.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_797.weight', (128,128), 'float32')
        self.pnnx_unique_798.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_798.bias', (128), 'float32')
        self.pnnx_unique_798.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_798.weight', (128), 'float32')
        self.pnnx_unique_799.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_799.weight', (128,128), 'float32')
        self.pnnx_unique_800.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_800.weight', (128,128), 'float32')
        self.pnnx_unique_801.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_801.weight', (128,128), 'float32')
        self.pnnx_unique_806.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_806.weight', (128,128), 'float32')
        self.pnnx_unique_807.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_807.bias', (128), 'float32')
        self.pnnx_unique_807.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_807.weight', (128), 'float32')
        self.pnnx_unique_808.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_808.weight', (1024,256), 'float32')
        self.pnnx_unique_810.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_810.weight', (128,1024), 'float32')
        self.pnnx_unique_811.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_811.bias', (128), 'float32')
        self.pnnx_unique_811.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_811.weight', (128), 'float32')
        self.pnnx_unique_812.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_812.weight', (128,128), 'float32')
        self.pnnx_unique_813.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_813.weight', (128,128), 'float32')
        self.pnnx_unique_814.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_814.weight', (128,128), 'float32')
        self.pnnx_unique_819.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_819.weight', (128,128), 'float32')
        self.pnnx_unique_820.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_820.bias', (128), 'float32')
        self.pnnx_unique_820.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_820.weight', (128), 'float32')
        self.pnnx_unique_821.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_821.weight', (128,128), 'float32')
        self.pnnx_unique_822.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_822.weight', (128,128), 'float32')
        self.pnnx_unique_823.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_823.weight', (128,128), 'float32')
        self.pnnx_unique_828.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_828.weight', (128,128), 'float32')
        self.pnnx_unique_829.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_829.bias', (128), 'float32')
        self.pnnx_unique_829.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_829.weight', (128), 'float32')
        self.pnnx_unique_830.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_830.weight', (1024,256), 'float32')
        self.pnnx_unique_832.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_832.weight', (128,1024), 'float32')
        self.pnnx_unique_833.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_833.bias', (128), 'float32')
        self.pnnx_unique_833.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_833.weight', (128), 'float32')
        self.pnnx_unique_834.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_834.weight', (128,128), 'float32')
        self.pnnx_unique_835.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_835.weight', (128,128), 'float32')
        self.pnnx_unique_836.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_836.weight', (128,128), 'float32')
        self.pnnx_unique_841.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_841.weight', (128,128), 'float32')
        self.pnnx_unique_842.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_842.bias', (128), 'float32')
        self.pnnx_unique_842.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_842.weight', (128), 'float32')
        self.pnnx_unique_843.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_843.weight', (128,128), 'float32')
        self.pnnx_unique_844.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_844.weight', (128,128), 'float32')
        self.pnnx_unique_845.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_845.weight', (128,128), 'float32')
        self.pnnx_unique_850.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_850.weight', (128,128), 'float32')
        self.pnnx_unique_851.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_851.bias', (128), 'float32')
        self.pnnx_unique_851.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_851.weight', (128), 'float32')
        self.pnnx_unique_852.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_852.weight', (1024,256), 'float32')
        self.pnnx_unique_854.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_854.weight', (128,1024), 'float32')
        self.pnnx_unique_855.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_855.bias', (128), 'float32')
        self.pnnx_unique_855.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_855.weight', (128), 'float32')
        self.pnnx_unique_856.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_856.weight', (128,128), 'float32')
        self.pnnx_unique_857.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_857.weight', (128,128), 'float32')
        self.pnnx_unique_858.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_858.weight', (128,128), 'float32')
        self.pnnx_unique_863.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_863.weight', (128,128), 'float32')
        self.pnnx_unique_864.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_864.bias', (128), 'float32')
        self.pnnx_unique_864.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_864.weight', (128), 'float32')
        self.pnnx_unique_865.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_865.weight', (128,128), 'float32')
        self.pnnx_unique_866.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_866.weight', (128,128), 'float32')
        self.pnnx_unique_867.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_867.weight', (128,128), 'float32')
        self.pnnx_unique_872.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_872.weight', (128,128), 'float32')
        self.pnnx_unique_873.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_873.bias', (128), 'float32')
        self.pnnx_unique_873.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_873.weight', (128), 'float32')
        self.pnnx_unique_874.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_874.weight', (1024,256), 'float32')
        self.pnnx_unique_876.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_876.weight', (128,1024), 'float32')
        self.pnnx_unique_877.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_877.bias', (128), 'float32')
        self.pnnx_unique_877.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_877.weight', (128), 'float32')
        self.pnnx_unique_878.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_878.weight', (128,128), 'float32')
        self.pnnx_unique_879.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_879.weight', (128,128), 'float32')
        self.pnnx_unique_880.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_880.weight', (128,128), 'float32')
        self.pnnx_unique_885.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_885.weight', (128,128), 'float32')
        self.pnnx_unique_886.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_886.bias', (128), 'float32')
        self.pnnx_unique_886.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_886.weight', (128), 'float32')
        self.pnnx_unique_887.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_887.weight', (128,128), 'float32')
        self.pnnx_unique_888.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_888.weight', (128,128), 'float32')
        self.pnnx_unique_889.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_889.weight', (128,128), 'float32')
        self.pnnx_unique_894.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_894.weight', (128,128), 'float32')
        self.pnnx_unique_895.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_895.bias', (128), 'float32')
        self.pnnx_unique_895.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_895.weight', (128), 'float32')
        self.pnnx_unique_896.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_896.weight', (1024,256), 'float32')
        self.pnnx_unique_898.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_898.weight', (128,1024), 'float32')
        self.pnnx_unique_899.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_899.bias', (128), 'float32')
        self.pnnx_unique_899.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_899.weight', (128), 'float32')
        self.pnnx_unique_900.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_900.bias', (128), 'float32')
        self.pnnx_unique_900.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_900.weight', (128,128), 'float32')
        self.pnnx_unique_901.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_901.bias', (128), 'float32')
        self.pnnx_unique_901.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_901.weight', (128,128), 'float32')
        self.conv2d_5.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_5.weight', (128,128,3,3), 'float32')
        self.conv2d_7.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_7.weight', (128,128,3,3), 'float32')
        self.pnnx_unique_907.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_907.weight', (128,128), 'float32')
        self.pnnx_unique_908.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_908.weight', (128,128), 'float32')
        self.pnnx_unique_909.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_909.weight', (128,128), 'float32')
        self.pnnx_unique_914.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_914.weight', (128,128), 'float32')
        self.pnnx_unique_915.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_915.bias', (128), 'float32')
        self.pnnx_unique_915.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_915.weight', (128), 'float32')
        self.pnnx_unique_916.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_916.weight', (128,128), 'float32')
        self.pnnx_unique_917.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_917.weight', (128,128), 'float32')
        self.pnnx_unique_918.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_918.weight', (128,128), 'float32')
        self.pnnx_unique_923.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_923.weight', (128,128), 'float32')
        self.pnnx_unique_924.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_924.bias', (128), 'float32')
        self.pnnx_unique_924.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_924.weight', (128), 'float32')
        self.pnnx_unique_925.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_925.weight', (1024,256), 'float32')
        self.pnnx_unique_927.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_927.weight', (128,1024), 'float32')
        self.pnnx_unique_928.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_928.bias', (128), 'float32')
        self.pnnx_unique_928.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_928.weight', (128), 'float32')
        self.pnnx_unique_929.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_929.weight', (128,128), 'float32')
        self.pnnx_unique_930.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_930.weight', (128,128), 'float32')
        self.pnnx_unique_931.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_931.weight', (128,128), 'float32')
        self.pnnx_unique_936.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_936.weight', (128,128), 'float32')
        self.pnnx_unique_937.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_937.bias', (128), 'float32')
        self.pnnx_unique_937.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_937.weight', (128), 'float32')
        self.pnnx_unique_938.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_938.weight', (128,128), 'float32')
        self.pnnx_unique_939.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_939.weight', (128,128), 'float32')
        self.pnnx_unique_940.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_940.weight', (128,128), 'float32')
        self.pnnx_unique_945.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_945.weight', (128,128), 'float32')
        self.pnnx_unique_946.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_946.bias', (128), 'float32')
        self.pnnx_unique_946.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_946.weight', (128), 'float32')
        self.pnnx_unique_947.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_947.weight', (1024,256), 'float32')
        self.pnnx_unique_949.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_949.weight', (128,1024), 'float32')
        self.pnnx_unique_950.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_950.bias', (128), 'float32')
        self.pnnx_unique_950.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_950.weight', (128), 'float32')
        self.pnnx_unique_951.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_951.weight', (128,128), 'float32')
        self.pnnx_unique_952.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_952.weight', (128,128), 'float32')
        self.pnnx_unique_953.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_953.weight', (128,128), 'float32')
        self.pnnx_unique_958.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_958.weight', (128,128), 'float32')
        self.pnnx_unique_959.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_959.bias', (128), 'float32')
        self.pnnx_unique_959.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_959.weight', (128), 'float32')
        self.pnnx_unique_960.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_960.weight', (128,128), 'float32')
        self.pnnx_unique_961.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_961.weight', (128,128), 'float32')
        self.pnnx_unique_962.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_962.weight', (128,128), 'float32')
        self.pnnx_unique_967.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_967.weight', (128,128), 'float32')
        self.pnnx_unique_968.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_968.bias', (128), 'float32')
        self.pnnx_unique_968.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_968.weight', (128), 'float32')
        self.pnnx_unique_969.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_969.weight', (1024,256), 'float32')
        self.pnnx_unique_971.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_971.weight', (128,1024), 'float32')
        self.pnnx_unique_972.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_972.bias', (128), 'float32')
        self.pnnx_unique_972.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_972.weight', (128), 'float32')
        self.pnnx_unique_973.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_973.weight', (128,128), 'float32')
        self.pnnx_unique_974.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_974.weight', (128,128), 'float32')
        self.pnnx_unique_975.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_975.weight', (128,128), 'float32')
        self.pnnx_unique_980.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_980.weight', (128,128), 'float32')
        self.pnnx_unique_981.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_981.bias', (128), 'float32')
        self.pnnx_unique_981.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_981.weight', (128), 'float32')
        self.pnnx_unique_982.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_982.weight', (128,128), 'float32')
        self.pnnx_unique_983.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_983.weight', (128,128), 'float32')
        self.pnnx_unique_984.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_984.weight', (128,128), 'float32')
        self.pnnx_unique_989.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_989.weight', (128,128), 'float32')
        self.pnnx_unique_990.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_990.bias', (128), 'float32')
        self.pnnx_unique_990.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_990.weight', (128), 'float32')
        self.pnnx_unique_991.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_991.weight', (1024,256), 'float32')
        self.pnnx_unique_993.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_993.weight', (128,1024), 'float32')
        self.pnnx_unique_994.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_994.bias', (128), 'float32')
        self.pnnx_unique_994.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_994.weight', (128), 'float32')
        self.pnnx_unique_995.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_995.weight', (128,128), 'float32')
        self.pnnx_unique_996.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_996.weight', (128,128), 'float32')
        self.pnnx_unique_997.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_997.weight', (128,128), 'float32')
        self.pnnx_unique_1002.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1002.weight', (128,128), 'float32')
        self.pnnx_unique_1003.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1003.bias', (128), 'float32')
        self.pnnx_unique_1003.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1003.weight', (128), 'float32')
        self.pnnx_unique_1004.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1004.weight', (128,128), 'float32')
        self.pnnx_unique_1005.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1005.weight', (128,128), 'float32')
        self.pnnx_unique_1006.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1006.weight', (128,128), 'float32')
        self.pnnx_unique_1011.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1011.weight', (128,128), 'float32')
        self.pnnx_unique_1012.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1012.bias', (128), 'float32')
        self.pnnx_unique_1012.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1012.weight', (128), 'float32')
        self.pnnx_unique_1013.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1013.weight', (1024,256), 'float32')
        self.pnnx_unique_1015.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1015.weight', (128,1024), 'float32')
        self.pnnx_unique_1016.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1016.bias', (128), 'float32')
        self.pnnx_unique_1016.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1016.weight', (128), 'float32')
        self.pnnx_unique_1017.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1017.weight', (128,128), 'float32')
        self.pnnx_unique_1018.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1018.weight', (128,128), 'float32')
        self.pnnx_unique_1019.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1019.weight', (128,128), 'float32')
        self.pnnx_unique_1024.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1024.weight', (128,128), 'float32')
        self.pnnx_unique_1025.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1025.bias', (128), 'float32')
        self.pnnx_unique_1025.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1025.weight', (128), 'float32')
        self.pnnx_unique_1026.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1026.weight', (128,128), 'float32')
        self.pnnx_unique_1027.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1027.weight', (128,128), 'float32')
        self.pnnx_unique_1028.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1028.weight', (128,128), 'float32')
        self.pnnx_unique_1033.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1033.weight', (128,128), 'float32')
        self.pnnx_unique_1034.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1034.bias', (128), 'float32')
        self.pnnx_unique_1034.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1034.weight', (128), 'float32')
        self.pnnx_unique_1035.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1035.weight', (1024,256), 'float32')
        self.pnnx_unique_1037.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1037.weight', (128,1024), 'float32')
        self.pnnx_unique_1038.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1038.bias', (128), 'float32')
        self.pnnx_unique_1038.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1038.weight', (128), 'float32')
        self.pnnx_unique_1039.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1039.weight', (128,128), 'float32')
        self.pnnx_unique_1040.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1040.weight', (128,128), 'float32')
        self.pnnx_unique_1041.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1041.weight', (128,128), 'float32')
        self.pnnx_unique_1046.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1046.weight', (128,128), 'float32')
        self.pnnx_unique_1047.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1047.bias', (128), 'float32')
        self.pnnx_unique_1047.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1047.weight', (128), 'float32')
        self.pnnx_unique_1048.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1048.weight', (128,128), 'float32')
        self.pnnx_unique_1049.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1049.weight', (128,128), 'float32')
        self.pnnx_unique_1050.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1050.weight', (128,128), 'float32')
        self.pnnx_unique_1055.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1055.weight', (128,128), 'float32')
        self.pnnx_unique_1056.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1056.bias', (128), 'float32')
        self.pnnx_unique_1056.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1056.weight', (128), 'float32')
        self.pnnx_unique_1057.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1057.weight', (1024,256), 'float32')
        self.pnnx_unique_1059.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1059.weight', (128,1024), 'float32')
        self.pnnx_unique_1060.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1060.bias', (128), 'float32')
        self.pnnx_unique_1060.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1060.weight', (128), 'float32')
        self.pnnx_unique_1061.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1061.weight', (128,128), 'float32')
        self.pnnx_unique_1062.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1062.weight', (128,128), 'float32')
        self.pnnx_unique_1063.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1063.weight', (128,128), 'float32')
        self.pnnx_unique_1068.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1068.weight', (128,128), 'float32')
        self.pnnx_unique_1069.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1069.bias', (128), 'float32')
        self.pnnx_unique_1069.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1069.weight', (128), 'float32')
        self.pnnx_unique_1070.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1070.weight', (128,128), 'float32')
        self.pnnx_unique_1071.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1071.weight', (128,128), 'float32')
        self.pnnx_unique_1072.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1072.weight', (128,128), 'float32')
        self.pnnx_unique_1077.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1077.weight', (128,128), 'float32')
        self.pnnx_unique_1078.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1078.bias', (128), 'float32')
        self.pnnx_unique_1078.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1078.weight', (128), 'float32')
        self.pnnx_unique_1079.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1079.weight', (1024,256), 'float32')
        self.pnnx_unique_1081.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1081.weight', (128,1024), 'float32')
        self.pnnx_unique_1082.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1082.bias', (128), 'float32')
        self.pnnx_unique_1082.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1082.weight', (128), 'float32')
        self.pnnx_unique_1083.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1083.weight', (128,128), 'float32')
        self.pnnx_unique_1084.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1084.weight', (128,128), 'float32')
        self.pnnx_unique_1085.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1085.weight', (128,128), 'float32')
        self.pnnx_unique_1090.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1090.weight', (128,128), 'float32')
        self.pnnx_unique_1091.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1091.bias', (128), 'float32')
        self.pnnx_unique_1091.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1091.weight', (128), 'float32')
        self.pnnx_unique_1092.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1092.weight', (128,128), 'float32')
        self.pnnx_unique_1093.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1093.weight', (128,128), 'float32')
        self.pnnx_unique_1094.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1094.weight', (128,128), 'float32')
        self.pnnx_unique_1099.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1099.weight', (128,128), 'float32')
        self.pnnx_unique_1100.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1100.bias', (128), 'float32')
        self.pnnx_unique_1100.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1100.weight', (128), 'float32')
        self.pnnx_unique_1101.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1101.weight', (1024,256), 'float32')
        self.pnnx_unique_1103.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1103.weight', (128,1024), 'float32')
        self.pnnx_unique_1104.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1104.bias', (128), 'float32')
        self.pnnx_unique_1104.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1104.weight', (128), 'float32')
        self.pnnx_unique_1105.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1105.weight', (128,128), 'float32')
        self.pnnx_unique_1106.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1106.weight', (128,128), 'float32')
        self.pnnx_unique_1107.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1107.weight', (128,128), 'float32')
        self.pnnx_unique_1112.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1112.weight', (128,128), 'float32')
        self.pnnx_unique_1113.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1113.bias', (128), 'float32')
        self.pnnx_unique_1113.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1113.weight', (128), 'float32')
        self.pnnx_unique_1114.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1114.weight', (128,128), 'float32')
        self.pnnx_unique_1115.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1115.weight', (128,128), 'float32')
        self.pnnx_unique_1116.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1116.weight', (128,128), 'float32')
        self.pnnx_unique_1121.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1121.weight', (128,128), 'float32')
        self.pnnx_unique_1122.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1122.bias', (128), 'float32')
        self.pnnx_unique_1122.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1122.weight', (128), 'float32')
        self.pnnx_unique_1123.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1123.weight', (1024,256), 'float32')
        self.pnnx_unique_1125.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1125.weight', (128,1024), 'float32')
        self.pnnx_unique_1126.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1126.bias', (128), 'float32')
        self.pnnx_unique_1126.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1126.weight', (128), 'float32')
        self.pnnx_unique_1127.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1127.weight', (128,128), 'float32')
        self.pnnx_unique_1128.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1128.weight', (128,128), 'float32')
        self.pnnx_unique_1129.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1129.weight', (128,128), 'float32')
        self.pnnx_unique_1134.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1134.weight', (128,128), 'float32')
        self.pnnx_unique_1135.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1135.bias', (128), 'float32')
        self.pnnx_unique_1135.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1135.weight', (128), 'float32')
        self.pnnx_unique_1136.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1136.weight', (128,128), 'float32')
        self.pnnx_unique_1137.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1137.weight', (128,128), 'float32')
        self.pnnx_unique_1138.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1138.weight', (128,128), 'float32')
        self.pnnx_unique_1143.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1143.weight', (128,128), 'float32')
        self.pnnx_unique_1144.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1144.bias', (128), 'float32')
        self.pnnx_unique_1144.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1144.weight', (128), 'float32')
        self.pnnx_unique_1145.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1145.weight', (1024,256), 'float32')
        self.pnnx_unique_1147.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1147.weight', (128,1024), 'float32')
        self.pnnx_unique_1148.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1148.bias', (128), 'float32')
        self.pnnx_unique_1148.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1148.weight', (128), 'float32')
        self.pnnx_unique_1149.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1149.weight', (128,128), 'float32')
        self.pnnx_unique_1150.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1150.weight', (128,128), 'float32')
        self.pnnx_unique_1151.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1151.weight', (128,128), 'float32')
        self.pnnx_unique_1156.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1156.weight', (128,128), 'float32')
        self.pnnx_unique_1157.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1157.bias', (128), 'float32')
        self.pnnx_unique_1157.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1157.weight', (128), 'float32')
        self.pnnx_unique_1158.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1158.weight', (128,128), 'float32')
        self.pnnx_unique_1159.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1159.weight', (128,128), 'float32')
        self.pnnx_unique_1160.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1160.weight', (128,128), 'float32')
        self.pnnx_unique_1165.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1165.weight', (128,128), 'float32')
        self.pnnx_unique_1166.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1166.bias', (128), 'float32')
        self.pnnx_unique_1166.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1166.weight', (128), 'float32')
        self.pnnx_unique_1167.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1167.weight', (1024,256), 'float32')
        self.pnnx_unique_1169.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1169.weight', (128,1024), 'float32')
        self.pnnx_unique_1170.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1170.bias', (128), 'float32')
        self.pnnx_unique_1170.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1170.weight', (128), 'float32')
        self.pnnx_unique_1171.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1171.bias', (128), 'float32')
        self.pnnx_unique_1171.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1171.weight', (128,128), 'float32')
        self.pnnx_unique_1172.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1172.bias', (128), 'float32')
        self.pnnx_unique_1172.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1172.weight', (128,128), 'float32')
        self.pnnx_unique_1173.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1173.bias', (256), 'float32')
        self.pnnx_unique_1173.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1173.weight', (256,130,3,3), 'float32')
        self.pnnx_unique_1175.bias = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1175.bias', (144), 'float32')
        self.pnnx_unique_1175.weight = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_1175.weight', (144,256,1,1), 'float32')
        self.metricnet_metric_in.bias = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_in.bias', (64), 'float32')
        self.metricnet_metric_in.weight = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_in.weight', (64,14,3,3), 'float32')
        self.metricnet_metric_net1_0.weight = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_net1.0.weight', (1), 'float32')
        self.metricnet_metric_net1_1.bias = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_net1.1.bias', (64), 'float32')
        self.metricnet_metric_net1_1.weight = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_net1.1.weight', (64,64,3,3), 'float32')
        self.metricnet_metric_net2_0.weight = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_net2.0.weight', (1), 'float32')
        self.metricnet_metric_net2_1.bias = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_net2.1.bias', (64), 'float32')
        self.metricnet_metric_net2_1.weight = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_net2.1.weight', (64,64,3,3), 'float32')
        self.metricnet_metric_net3_0.weight = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_net3.0.weight', (1), 'float32')
        self.metricnet_metric_net3_1.bias = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_net3.1.bias', (64), 'float32')
        self.metricnet_metric_net3_1.weight = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_net3.1.weight', (64,64,3,3), 'float32')
        self.metricnet_metric_out_0.weight = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_out.0.weight', (1), 'float32')
        self.metricnet_metric_out_1.bias = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_out.1.bias', (2), 'float32')
        self.metricnet_metric_out_1.weight = self.load_pnnx_bin_as_parameter(archive, 'metricnet.metric_out.1.weight', (2,64,3,3), 'float32')
        self.pnnx_fold_position_2_pnnx_fold_position_2 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_position.2.pnnx_fold_position.2', (1,4,128,18,30), 'float32')
        self.pnnx_fold_position_2_1_pnnx_fold_position_2 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_position.2_1.pnnx_fold_position.2', (1,4,128,18,30), 'float32')
        self.pnnx_fold_init_grid_2_pnnx_fold_init_grid_2 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_init_grid.2.pnnx_fold_init_grid.2', (1,2,36,60), 'float32')
        self.pnnx_fold_grid_6_pnnx_fold_grid_6 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid.6.pnnx_fold_grid.6', (1,2160,2), 'float32')
        self.pnnx_fold_3444_pnnx_fold_3444 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_3444.pnnx_fold_3444', (1,2,72,120), 'float32')
        self.pnnx_fold_position0_1_pnnx_fold_position0_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_position0.1.pnnx_fold_position0.1', (1,64,128,9,15), 'float32')
        self.pnnx_fold_position0_1_1_pnnx_fold_position0_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_position0.1_1.pnnx_fold_position0.1', (1,64,128,9,15), 'float32')
        self.pnnx_fold_coords_init_2_pnnx_fold_coords_init_2 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_coords_init.2.pnnx_fold_coords_init.2', (1,2,72,120), 'float32')
        self.pnnx_fold_sample_coords_12_pnnx_fold_sample_coords_12 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_sample_coords.12.pnnx_fold_sample_coords.12', (1,8640,81,2), 'float32')
        self.pnnx_fold_grid_10_pnnx_fold_grid_10 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid.10.pnnx_fold_grid.10', (1,8640,81,2), 'float32')
        self.pnnx_fold_position_1_pnnx_fold_position_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_position.1.pnnx_fold_position.1', (1,4,128,18,30), 'float32')
        self.pnnx_fold_position_1_1_pnnx_fold_position_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_position.1_1.pnnx_fold_position.1', (1,4,128,18,30), 'float32')
        self.pnnx_fold_init_grid_1_pnnx_fold_init_grid_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_init_grid.1.pnnx_fold_init_grid.1', (1,2,36,60), 'float32')
        self.pnnx_fold_grid_5_pnnx_fold_grid_5 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid.5.pnnx_fold_grid.5', (1,2160,2), 'float32')
        self.pnnx_fold_9715_pnnx_fold_9715 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_9715.pnnx_fold_9715', (1,2,72,120), 'float32')
        self.pnnx_fold_position1_1_pnnx_fold_position1_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_position1.1.pnnx_fold_position1.1', (1,64,128,9,15), 'float32')
        self.pnnx_fold_position1_1_1_pnnx_fold_position1_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_position1.1_1.pnnx_fold_position1.1', (1,64,128,9,15), 'float32')
        self.pnnx_fold_coords_init_1_pnnx_fold_coords_init_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_coords_init.1.pnnx_fold_coords_init.1', (1,2,72,120), 'float32')
        self.pnnx_fold_sample_coords_14_pnnx_fold_sample_coords_14 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_sample_coords.14.pnnx_fold_sample_coords.14', (1,8640,81,2), 'float32')
        self.pnnx_fold_grid_12_pnnx_fold_grid_12 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid.12.pnnx_fold_grid.12', (1,8640,81,2), 'float32')
        self.pnnx_fold_grid_1_pnnx_fold_grid_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid.1.pnnx_fold_grid.1', (1,2,288,480), 'float32')
        self.pnnx_fold_grid1_1_pnnx_fold_grid1_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid1.1.pnnx_fold_grid1.1', (1,2,288,480), 'float32')
        self.pnnx_fold_12945_pnnx_fold_12945 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_12945.pnnx_fold_12945', (1,2,288,480), 'float32')
        self.pnnx_fold_12994_pnnx_fold_12994 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_12994.pnnx_fold_12994', (1,2,288,480), 'float32')
        archive.close()

    def load_pnnx_bin_as_parameter(self, archive, key, shape, dtype, requires_grad=True):
        return nn.Parameter(self.load_pnnx_bin_as_tensor(archive, key, shape, dtype), requires_grad)

    def load_pnnx_bin_as_tensor(self, archive, key, shape, dtype):
        _, tmppath = tempfile.mkstemp()
        tmpf = open(tmppath, 'wb')
        with archive.open(key) as keyfile:
            tmpf.write(keyfile.read())
        tmpf.close()
        m = np.memmap(tmppath, dtype=dtype, mode='r', shape=shape).copy()
        os.remove(tmppath)
        return torch.from_numpy(m)

    def forward(self, v_0, v_1):
        v_2 = self.featnet_block1_0(v_0)
        v_3 = self.featnet_block1_1(v_2)
        v_4 = self.featnet_block1_2(v_3)
        v_5 = self.featnet_block1_3(v_4)
        v_6 = self.featnet_block2_0(v_5)
        v_7 = self.featnet_block2_1(v_6)
        v_8 = self.featnet_block2_2(v_7)
        v_9 = self.featnet_block2_3(v_8)
        v_10 = self.featnet_block3_0(v_9)
        v_11 = self.featnet_block3_1(v_10)
        v_12 = self.featnet_block3_2(v_11)
        v_13 = self.featnet_block3_3(v_12)
        v_14 = self.pnnx_unique_0(v_1)
        v_15 = self.pnnx_unique_1(v_14)
        v_16 = self.pnnx_unique_2(v_15)
        v_17 = self.pnnx_unique_3(v_16)
        v_18 = self.pnnx_unique_4(v_17)
        v_19 = self.pnnx_unique_5(v_18)
        v_20 = self.pnnx_unique_6(v_19)
        v_21 = self.pnnx_unique_7(v_20)
        v_22 = self.pnnx_unique_8(v_21)
        v_23 = self.pnnx_unique_9(v_22)
        v_24 = self.pnnx_unique_10(v_23)
        v_25 = self.pnnx_unique_11(v_24)
        v_26 = F.upsample(input=v_0, align_corners=False, mode='bilinear', scale_factor=(0.500000,0.500000))
        v_27, v_28, v_29 = torch.unbind(v_26, dim=1)
        v_30 = ((v_27 - 4.850000e-01) / 2.290000e-01)
        v_31 = ((v_28 - 4.560000e-01) / 2.240000e-01)
        v_32 = ((v_29 - 4.060000e-01) / 2.250000e-01)
        v_33 = torch.unsqueeze(input=v_32, dim=1)
        v_34 = torch.unsqueeze(input=v_31, dim=1)
        v_35 = torch.unsqueeze(input=v_30, dim=1)
        v_36 = F.upsample(input=v_1, align_corners=False, mode='bilinear', scale_factor=(0.500000,0.500000))
        v_37, v_38, v_39 = torch.unbind(v_36, dim=1)
        v_40 = ((v_37 - 4.850000e-01) / 2.290000e-01)
        v_41 = ((v_38 - 4.560000e-01) / 2.240000e-01)
        v_42 = ((v_39 - 4.060000e-01) / 2.250000e-01)
        v_43 = torch.unsqueeze(input=v_42, dim=1)
        v_44 = torch.unsqueeze(input=v_41, dim=1)
        v_45 = torch.unsqueeze(input=v_40, dim=1)
        v_46 = torch.cat((v_35, v_34, v_33), dim=1)
        v_47 = self.flownet_backbone_conv1(v_46)
        v_48 = self.flownet_backbone_norm1(v_47)
        v_49 = self.flownet_backbone_relu1(v_48)
        v_50 = self.flownet_backbone_layer1_0_conv1(v_49)
        v_51 = self.flownet_backbone_layer1_0_norm1(v_50)
        v_52 = self.flownet_backbone_layer1_0_relu(v_51)
        v_53 = self.flownet_backbone_layer1_0_conv2(v_52)
        v_54 = self.flownet_backbone_layer1_0_norm2(v_53)
        v_55 = self.pnnx_unique_12(v_54)
        v_56 = (v_49 + v_55)
        v_57 = self.pnnx_unique_13(v_56)
        v_58 = self.flownet_backbone_layer1_1_conv1(v_57)
        v_59 = self.flownet_backbone_layer1_1_norm1(v_58)
        v_60 = self.flownet_backbone_layer1_1_relu(v_59)
        v_61 = self.flownet_backbone_layer1_1_conv2(v_60)
        v_62 = self.flownet_backbone_layer1_1_norm2(v_61)
        v_63 = self.pnnx_unique_14(v_62)
        v_64 = (v_57 + v_63)
        v_65 = self.pnnx_unique_15(v_64)
        v_66 = self.flownet_backbone_layer2_0_conv1(v_65)
        v_67 = self.flownet_backbone_layer2_0_norm1(v_66)
        v_68 = self.flownet_backbone_layer2_0_relu(v_67)
        v_69 = self.flownet_backbone_layer2_0_conv2(v_68)
        v_70 = self.flownet_backbone_layer2_0_norm2(v_69)
        v_71 = self.pnnx_unique_16(v_70)
        v_72 = self.flownet_backbone_layer2_0_downsample_0(v_65)
        v_73 = self.flownet_backbone_layer2_0_downsample_1(v_72)
        v_74 = (v_73 + v_71)
        v_75 = self.pnnx_unique_17(v_74)
        v_76 = self.flownet_backbone_layer2_1_conv1(v_75)
        v_77 = self.flownet_backbone_layer2_1_norm1(v_76)
        v_78 = self.flownet_backbone_layer2_1_relu(v_77)
        v_79 = self.flownet_backbone_layer2_1_conv2(v_78)
        v_80 = self.flownet_backbone_layer2_1_norm2(v_79)
        v_81 = self.pnnx_unique_18(v_80)
        v_82 = (v_75 + v_81)
        v_83 = self.pnnx_unique_19(v_82)
        v_84 = self.flownet_backbone_layer3_0_conv1(v_83)
        v_85 = self.flownet_backbone_layer3_0_norm1(v_84)
        v_86 = self.flownet_backbone_layer3_0_relu(v_85)
        v_87 = self.flownet_backbone_layer3_0_conv2(v_86)
        v_88 = self.flownet_backbone_layer3_0_norm2(v_87)
        v_89 = self.pnnx_unique_20(v_88)
        v_90 = self.flownet_backbone_layer3_0_downsample_0(v_83)
        v_91 = self.flownet_backbone_layer3_0_downsample_1(v_90)
        v_92 = (v_91 + v_89)
        v_93 = self.pnnx_unique_21(v_92)
        v_94 = self.flownet_backbone_layer3_1_conv1(v_93)
        v_95 = self.flownet_backbone_layer3_1_norm1(v_94)
        v_96 = self.flownet_backbone_layer3_1_relu(v_95)
        v_97 = self.flownet_backbone_layer3_1_conv2(v_96)
        v_98 = self.flownet_backbone_layer3_1_norm2(v_97)
        v_99 = self.pnnx_unique_22(v_98)
        v_100 = (v_93 + v_99)
        v_101 = self.pnnx_unique_23(v_100)
        v_102 = self.flownet_backbone_conv2(v_101)
        v_103 = torch.cat((v_45, v_44, v_43), dim=1)
        v_104 = self.pnnx_unique_24(v_103)
        v_105 = self.pnnx_unique_25(v_104)
        v_106 = self.pnnx_unique_26(v_105)
        v_107 = self.pnnx_unique_27(v_106)
        v_108 = self.pnnx_unique_28(v_107)
        v_109 = self.pnnx_unique_29(v_108)
        v_110 = self.pnnx_unique_30(v_109)
        v_111 = self.pnnx_unique_31(v_110)
        v_112 = self.pnnx_unique_32(v_111)
        v_113 = (v_106 + v_112)
        v_114 = self.pnnx_unique_33(v_113)
        v_115 = self.pnnx_unique_34(v_114)
        v_116 = self.pnnx_unique_35(v_115)
        v_117 = self.pnnx_unique_36(v_116)
        v_118 = self.pnnx_unique_37(v_117)
        v_119 = self.pnnx_unique_38(v_118)
        v_120 = self.pnnx_unique_39(v_119)
        v_121 = (v_114 + v_120)
        v_122 = self.pnnx_unique_40(v_121)
        v_123 = self.pnnx_unique_41(v_122)
        v_124 = self.pnnx_unique_42(v_123)
        v_125 = self.pnnx_unique_43(v_124)
        v_126 = self.pnnx_unique_44(v_125)
        v_127 = self.pnnx_unique_45(v_126)
        v_128 = self.pnnx_unique_46(v_127)
        v_129 = self.pnnx_unique_47(v_122)
        v_130 = self.pnnx_unique_48(v_129)
        v_131 = (v_130 + v_128)
        v_132 = self.pnnx_unique_49(v_131)
        v_133 = self.pnnx_unique_50(v_132)
        v_134 = self.pnnx_unique_51(v_133)
        v_135 = self.pnnx_unique_52(v_134)
        v_136 = self.pnnx_unique_53(v_135)
        v_137 = self.pnnx_unique_54(v_136)
        v_138 = self.pnnx_unique_55(v_137)
        v_139 = (v_132 + v_138)
        v_140 = self.pnnx_unique_56(v_139)
        v_141 = self.pnnx_unique_57(v_140)
        v_142 = self.pnnx_unique_58(v_141)
        v_143 = self.pnnx_unique_59(v_142)
        v_144 = self.pnnx_unique_60(v_143)
        v_145 = self.pnnx_unique_61(v_144)
        v_146 = self.pnnx_unique_62(v_145)
        v_147 = self.pnnx_unique_63(v_140)
        v_148 = self.pnnx_unique_64(v_147)
        v_149 = (v_148 + v_146)
        v_150 = self.pnnx_unique_65(v_149)
        v_151 = self.pnnx_unique_66(v_150)
        v_152 = self.pnnx_unique_67(v_151)
        v_153 = self.pnnx_unique_68(v_152)
        v_154 = self.pnnx_unique_69(v_153)
        v_155 = self.pnnx_unique_70(v_154)
        v_156 = self.pnnx_unique_71(v_155)
        v_157 = (v_150 + v_156)
        v_158 = self.pnnx_unique_72(v_157)
        v_159 = self.pnnx_unique_73(v_158)
        v_160 = self.conv2d_0(v_102)
        v_161 = model.gmflow.utils.split_feature(v_160)
        v_162 = self.conv2d_2(v_159)
        v_163 = model.gmflow.utils.split_feature(v_162)
        v_164 = self.pnnx_fold_position_2_pnnx_fold_position_2
        v_165 = self.pnnx_fold_position_2_1_pnnx_fold_position_2
        v_166 = (v_161 + v_164)
        v_167 = (v_163 + v_165)
        v_168 = model.gmflow.utils.merge_splits(v_166)
        v_169 = model.gmflow.utils.merge_splits(v_167)
        v_170 = torch.flatten(input=v_168, end_dim=-1, start_dim=2)
        v_171 = torch.flatten(input=v_169, end_dim=-1, start_dim=2)
        v_172 = torch.permute(input=v_170, dims=(0,2,1))
        v_173 = self.flownet_transformer_layers_0_self_attn_q_proj(v_172)
        v_174 = self.flownet_transformer_layers_0_self_attn_k_proj(v_172)
        v_175 = self.flownet_transformer_layers_0_self_attn_v_proj(v_172)
        v_176 = v_173.view(1, 36, 60, 128)
        v_177 = v_174.view(1, 36, 60, 128)
        v_178 = v_175.view(1, 36, 60, 128)
        v_179 = torch.permute(input=v_176, dims=(0,3,1,2))
        v_180 = model.gmflow.utils.split_feature(v_179)
        v_181 = torch.permute(input=v_177, dims=(0,3,1,2))
        v_182 = model.gmflow.utils.split_feature(v_181)
        v_183 = torch.permute(input=v_178, dims=(0,3,1,2))
        v_184 = model.gmflow.utils.split_feature(v_183)
        v_185 = torch.permute(input=v_182, dims=(0,1,3,4,2))
        v_186 = v_185.view(1, 4, -1, 128)
        v_187 = torch.permute(input=v_180, dims=(0,1,3,4,2))
        v_188 = v_187.view(1, 4, -1, 128)
        v_189 = torch.permute(input=v_186, dims=(0,1,3,2))
        v_190 = torch.matmul(input=v_188, other=v_189)
        v_191 = (v_190 / 11.313708)
        v_192 = F.softmax(input=v_191, dim=-1)
        v_193 = torch.permute(input=v_184, dims=(0,1,3,4,2))
        v_194 = v_193.view(1, 4, -1, 128)
        v_195 = torch.matmul(input=v_192, other=v_194)
        v_196 = v_195.view(1, 4, 18, 30, 128)
        v_197 = torch.permute(input=v_196, dims=(0,1,4,2,3))
        v_198 = model.gmflow.utils.merge_splits(v_197)
        v_199 = torch.permute(input=v_198, dims=(0,2,3,1))
        v_200 = v_199.view(1, -1, 128)
        v_201 = self.flownet_transformer_layers_0_self_attn_merge(v_200)
        v_202 = self.flownet_transformer_layers_0_self_attn_norm1(v_201)
        v_203 = (v_172 + v_202)
        v_204 = self.flownet_transformer_layers_0_cross_attn_ffn_q_proj(v_203)
        v_205 = torch.permute(input=v_171, dims=(0,2,1))
        v_206 = self.flownet_transformer_layers_0_cross_attn_ffn_k_proj(v_205)
        v_207 = self.flownet_transformer_layers_0_cross_attn_ffn_v_proj(v_205)
        v_208 = v_204.view(1, 36, 60, 128)
        v_209 = v_206.view(1, 36, 60, 128)
        v_210 = v_207.view(1, 36, 60, 128)
        v_211 = torch.permute(input=v_208, dims=(0,3,1,2))
        v_212 = model.gmflow.utils.split_feature(v_211)
        v_213 = torch.permute(input=v_209, dims=(0,3,1,2))
        v_214 = model.gmflow.utils.split_feature(v_213)
        v_215 = torch.permute(input=v_210, dims=(0,3,1,2))
        v_216 = model.gmflow.utils.split_feature(v_215)
        v_217 = torch.permute(input=v_214, dims=(0,1,3,4,2))
        v_218 = v_217.view(1, 4, -1, 128)
        v_219 = torch.permute(input=v_212, dims=(0,1,3,4,2))
        v_220 = v_219.view(1, 4, -1, 128)
        v_221 = torch.permute(input=v_218, dims=(0,1,3,2))
        v_222 = torch.matmul(input=v_220, other=v_221)
        v_223 = (v_222 / 11.313708)
        v_224 = F.softmax(input=v_223, dim=-1)
        v_225 = torch.permute(input=v_216, dims=(0,1,3,4,2))
        v_226 = v_225.view(1, 4, -1, 128)
        v_227 = torch.matmul(input=v_224, other=v_226)
        v_228 = v_227.view(1, 4, 18, 30, 128)
        v_229 = torch.permute(input=v_228, dims=(0,1,4,2,3))
        v_230 = model.gmflow.utils.merge_splits(v_229)
        v_231 = torch.permute(input=v_230, dims=(0,2,3,1))
        v_232 = v_231.view(1, -1, 128)
        v_233 = self.flownet_transformer_layers_0_cross_attn_ffn_merge(v_232)
        v_234 = self.flownet_transformer_layers_0_cross_attn_ffn_norm1(v_233)
        v_235 = torch.cat((v_203, v_234), dim=-1)
        v_236 = self.flownet_transformer_layers_0_cross_attn_ffn_mlp_0(v_235)
        v_237 = self.flownet_transformer_layers_0_cross_attn_ffn_mlp_1(v_236)
        v_238 = self.flownet_transformer_layers_0_cross_attn_ffn_mlp_2(v_237)
        v_239 = self.flownet_transformer_layers_0_cross_attn_ffn_norm2(v_238)
        v_240 = (v_203 + v_239)
        v_241 = self.pnnx_unique_86(v_205)
        v_242 = self.pnnx_unique_87(v_205)
        v_243 = self.pnnx_unique_88(v_205)
        v_244 = v_241.view(1, 36, 60, 128)
        v_245 = v_242.view(1, 36, 60, 128)
        v_246 = v_243.view(1, 36, 60, 128)
        v_247 = torch.permute(input=v_244, dims=(0,3,1,2))
        v_248 = model.gmflow.utils.split_feature(v_247)
        v_249 = torch.permute(input=v_245, dims=(0,3,1,2))
        v_250 = model.gmflow.utils.split_feature(v_249)
        v_251 = torch.permute(input=v_246, dims=(0,3,1,2))
        v_252 = model.gmflow.utils.split_feature(v_251)
        v_253 = torch.permute(input=v_250, dims=(0,1,3,4,2))
        v_254 = v_253.view(1, 4, -1, 128)
        v_255 = torch.permute(input=v_248, dims=(0,1,3,4,2))
        v_256 = v_255.view(1, 4, -1, 128)
        v_257 = torch.permute(input=v_254, dims=(0,1,3,2))
        v_258 = torch.matmul(input=v_256, other=v_257)
        v_259 = (v_258 / 11.313708)
        v_260 = F.softmax(input=v_259, dim=-1)
        v_261 = torch.permute(input=v_252, dims=(0,1,3,4,2))
        v_262 = v_261.view(1, 4, -1, 128)
        v_263 = torch.matmul(input=v_260, other=v_262)
        v_264 = v_263.view(1, 4, 18, 30, 128)
        v_265 = torch.permute(input=v_264, dims=(0,1,4,2,3))
        v_266 = model.gmflow.utils.merge_splits(v_265)
        v_267 = torch.permute(input=v_266, dims=(0,2,3,1))
        v_268 = v_267.view(1, -1, 128)
        v_269 = self.pnnx_unique_93(v_268)
        v_270 = self.pnnx_unique_94(v_269)
        v_271 = (v_205 + v_270)
        v_272 = self.pnnx_unique_95(v_271)
        v_273 = self.pnnx_unique_96(v_172)
        v_274 = self.pnnx_unique_97(v_172)
        v_275 = v_272.view(1, 36, 60, 128)
        v_276 = v_273.view(1, 36, 60, 128)
        v_277 = v_274.view(1, 36, 60, 128)
        v_278 = torch.permute(input=v_275, dims=(0,3,1,2))
        v_279 = model.gmflow.utils.split_feature(v_278)
        v_280 = torch.permute(input=v_276, dims=(0,3,1,2))
        v_281 = model.gmflow.utils.split_feature(v_280)
        v_282 = torch.permute(input=v_277, dims=(0,3,1,2))
        v_283 = model.gmflow.utils.split_feature(v_282)
        v_284 = torch.permute(input=v_281, dims=(0,1,3,4,2))
        v_285 = v_284.view(1, 4, -1, 128)
        v_286 = torch.permute(input=v_279, dims=(0,1,3,4,2))
        v_287 = v_286.view(1, 4, -1, 128)
        v_288 = torch.permute(input=v_285, dims=(0,1,3,2))
        v_289 = torch.matmul(input=v_287, other=v_288)
        v_290 = (v_289 / 11.313708)
        v_291 = F.softmax(input=v_290, dim=-1)
        v_292 = torch.permute(input=v_283, dims=(0,1,3,4,2))
        v_293 = v_292.view(1, 4, -1, 128)
        v_294 = torch.matmul(input=v_291, other=v_293)
        v_295 = v_294.view(1, 4, 18, 30, 128)
        v_296 = torch.permute(input=v_295, dims=(0,1,4,2,3))
        v_297 = model.gmflow.utils.merge_splits(v_296)
        v_298 = torch.permute(input=v_297, dims=(0,2,3,1))
        v_299 = v_298.view(1, -1, 128)
        v_300 = self.pnnx_unique_102(v_299)
        v_301 = self.pnnx_unique_103(v_300)
        v_302 = torch.cat((v_271, v_301), dim=-1)
        v_303 = self.pnnx_unique_104(v_302)
        v_304 = self.pnnx_unique_105(v_303)
        v_305 = self.pnnx_unique_106(v_304)
        v_306 = self.pnnx_unique_107(v_305)
        v_307 = (v_271 + v_306)
        v_308 = self.flownet_transformer_layers_1_self_attn_q_proj(v_240)
        v_309 = self.flownet_transformer_layers_1_self_attn_k_proj(v_240)
        v_310 = self.flownet_transformer_layers_1_self_attn_v_proj(v_240)
        v_311 = v_308.view(1, 36, 60, 128)
        v_312 = v_309.view(1, 36, 60, 128)
        v_313 = v_310.view(1, 36, 60, 128)
        v_314 = torch.permute(input=v_311, dims=(0,3,1,2))
        v_315 = model.gmflow.utils.split_feature(v_314)
        v_316 = torch.permute(input=v_312, dims=(0,3,1,2))
        v_317 = model.gmflow.utils.split_feature(v_316)
        v_318 = torch.permute(input=v_313, dims=(0,3,1,2))
        v_319 = model.gmflow.utils.split_feature(v_318)
        v_320 = torch.permute(input=v_317, dims=(0,1,3,4,2))
        v_321 = v_320.view(1, 4, -1, 128)
        v_322 = torch.permute(input=v_315, dims=(0,1,3,4,2))
        v_323 = v_322.view(1, 4, -1, 128)
        v_324 = torch.permute(input=v_321, dims=(0,1,3,2))
        v_325 = torch.matmul(input=v_323, other=v_324)
        v_326 = (v_325 / 11.313708)
        v_327 = F.softmax(input=v_326, dim=-1)
        v_328 = torch.permute(input=v_319, dims=(0,1,3,4,2))
        v_329 = v_328.view(1, 4, -1, 128)
        v_330 = torch.matmul(input=v_327, other=v_329)
        v_331 = v_330.view(1, 4, 18, 30, 128)
        v_332 = torch.permute(input=v_331, dims=(0,1,4,2,3))
        v_333 = model.gmflow.utils.merge_splits(v_332)
        v_334 = torch.permute(input=v_333, dims=(0,2,3,1))
        v_335 = v_334.view(1, -1, 128)
        v_336 = self.flownet_transformer_layers_1_self_attn_merge(v_335)
        v_337 = self.flownet_transformer_layers_1_self_attn_norm1(v_336)
        v_338 = (v_240 + v_337)
        v_339 = self.flownet_transformer_layers_1_cross_attn_ffn_q_proj(v_338)
        v_340 = self.flownet_transformer_layers_1_cross_attn_ffn_k_proj(v_307)
        v_341 = self.flownet_transformer_layers_1_cross_attn_ffn_v_proj(v_307)
        v_342 = v_339.view(1, 36, 60, 128)
        v_343 = v_340.view(1, 36, 60, 128)
        v_344 = v_341.view(1, 36, 60, 128)
        v_345 = torch.permute(input=v_342, dims=(0,3,1,2))
        v_346 = model.gmflow.utils.split_feature(v_345)
        v_347 = torch.permute(input=v_343, dims=(0,3,1,2))
        v_348 = model.gmflow.utils.split_feature(v_347)
        v_349 = torch.permute(input=v_344, dims=(0,3,1,2))
        v_350 = model.gmflow.utils.split_feature(v_349)
        v_351 = torch.permute(input=v_348, dims=(0,1,3,4,2))
        v_352 = v_351.view(1, 4, -1, 128)
        v_353 = torch.permute(input=v_346, dims=(0,1,3,4,2))
        v_354 = v_353.view(1, 4, -1, 128)
        v_355 = torch.permute(input=v_352, dims=(0,1,3,2))
        v_356 = torch.matmul(input=v_354, other=v_355)
        v_357 = (v_356 / 11.313708)
        v_358 = F.softmax(input=v_357, dim=-1)
        v_359 = torch.permute(input=v_350, dims=(0,1,3,4,2))
        v_360 = v_359.view(1, 4, -1, 128)
        v_361 = torch.matmul(input=v_358, other=v_360)
        v_362 = v_361.view(1, 4, 18, 30, 128)
        v_363 = torch.permute(input=v_362, dims=(0,1,4,2,3))
        v_364 = model.gmflow.utils.merge_splits(v_363)
        v_365 = torch.permute(input=v_364, dims=(0,2,3,1))
        v_366 = v_365.view(1, -1, 128)
        v_367 = self.flownet_transformer_layers_1_cross_attn_ffn_merge(v_366)
        v_368 = self.flownet_transformer_layers_1_cross_attn_ffn_norm1(v_367)
        v_369 = torch.cat((v_338, v_368), dim=-1)
        v_370 = self.flownet_transformer_layers_1_cross_attn_ffn_mlp_0(v_369)
        v_371 = self.flownet_transformer_layers_1_cross_attn_ffn_mlp_1(v_370)
        v_372 = self.flownet_transformer_layers_1_cross_attn_ffn_mlp_2(v_371)
        v_373 = self.flownet_transformer_layers_1_cross_attn_ffn_norm2(v_372)
        v_374 = (v_338 + v_373)
        v_375 = self.pnnx_unique_116(v_307)
        v_376 = self.pnnx_unique_117(v_307)
        v_377 = self.pnnx_unique_118(v_307)
        v_378 = v_375.view(1, 36, 60, 128)
        v_379 = v_376.view(1, 36, 60, 128)
        v_380 = v_377.view(1, 36, 60, 128)
        v_381 = torch.permute(input=v_378, dims=(0,3,1,2))
        v_382 = model.gmflow.utils.split_feature(v_381)
        v_383 = torch.permute(input=v_379, dims=(0,3,1,2))
        v_384 = model.gmflow.utils.split_feature(v_383)
        v_385 = torch.permute(input=v_380, dims=(0,3,1,2))
        v_386 = model.gmflow.utils.split_feature(v_385)
        v_387 = torch.permute(input=v_384, dims=(0,1,3,4,2))
        v_388 = v_387.view(1, 4, -1, 128)
        v_389 = torch.permute(input=v_382, dims=(0,1,3,4,2))
        v_390 = v_389.view(1, 4, -1, 128)
        v_391 = torch.permute(input=v_388, dims=(0,1,3,2))
        v_392 = torch.matmul(input=v_390, other=v_391)
        v_393 = (v_392 / 11.313708)
        v_394 = F.softmax(input=v_393, dim=-1)
        v_395 = torch.permute(input=v_386, dims=(0,1,3,4,2))
        v_396 = v_395.view(1, 4, -1, 128)
        v_397 = torch.matmul(input=v_394, other=v_396)
        v_398 = v_397.view(1, 4, 18, 30, 128)
        v_399 = torch.permute(input=v_398, dims=(0,1,4,2,3))
        v_400 = model.gmflow.utils.merge_splits(v_399)
        v_401 = torch.permute(input=v_400, dims=(0,2,3,1))
        v_402 = v_401.view(1, -1, 128)
        v_403 = self.pnnx_unique_123(v_402)
        v_404 = self.pnnx_unique_124(v_403)
        v_405 = (v_307 + v_404)
        v_406 = self.pnnx_unique_125(v_405)
        v_407 = self.pnnx_unique_126(v_240)
        v_408 = self.pnnx_unique_127(v_240)
        v_409 = v_406.view(1, 36, 60, 128)
        v_410 = v_407.view(1, 36, 60, 128)
        v_411 = v_408.view(1, 36, 60, 128)
        v_412 = torch.permute(input=v_409, dims=(0,3,1,2))
        v_413 = model.gmflow.utils.split_feature(v_412)
        v_414 = torch.permute(input=v_410, dims=(0,3,1,2))
        v_415 = model.gmflow.utils.split_feature(v_414)
        v_416 = torch.permute(input=v_411, dims=(0,3,1,2))
        v_417 = model.gmflow.utils.split_feature(v_416)
        v_418 = torch.permute(input=v_415, dims=(0,1,3,4,2))
        v_419 = v_418.view(1, 4, -1, 128)
        v_420 = torch.permute(input=v_413, dims=(0,1,3,4,2))
        v_421 = v_420.view(1, 4, -1, 128)
        v_422 = torch.permute(input=v_419, dims=(0,1,3,2))
        v_423 = torch.matmul(input=v_421, other=v_422)
        v_424 = (v_423 / 11.313708)
        v_425 = F.softmax(input=v_424, dim=-1)
        v_426 = torch.permute(input=v_417, dims=(0,1,3,4,2))
        v_427 = v_426.view(1, 4, -1, 128)
        v_428 = torch.matmul(input=v_425, other=v_427)
        v_429 = v_428.view(1, 4, 18, 30, 128)
        v_430 = torch.permute(input=v_429, dims=(0,1,4,2,3))
        v_431 = model.gmflow.utils.merge_splits(v_430)
        v_432 = torch.permute(input=v_431, dims=(0,2,3,1))
        v_433 = v_432.view(1, -1, 128)
        v_434 = self.pnnx_unique_132(v_433)
        v_435 = self.pnnx_unique_133(v_434)
        v_436 = torch.cat((v_405, v_435), dim=-1)
        v_437 = self.pnnx_unique_134(v_436)
        v_438 = self.pnnx_unique_135(v_437)
        v_439 = self.pnnx_unique_136(v_438)
        v_440 = self.pnnx_unique_137(v_439)
        v_441 = (v_405 + v_440)
        v_442 = self.flownet_transformer_layers_2_self_attn_q_proj(v_374)
        v_443 = self.flownet_transformer_layers_2_self_attn_k_proj(v_374)
        v_444 = self.flownet_transformer_layers_2_self_attn_v_proj(v_374)
        v_445 = v_442.view(1, 36, 60, 128)
        v_446 = v_443.view(1, 36, 60, 128)
        v_447 = v_444.view(1, 36, 60, 128)
        v_448 = torch.permute(input=v_445, dims=(0,3,1,2))
        v_449 = model.gmflow.utils.split_feature(v_448)
        v_450 = torch.permute(input=v_446, dims=(0,3,1,2))
        v_451 = model.gmflow.utils.split_feature(v_450)
        v_452 = torch.permute(input=v_447, dims=(0,3,1,2))
        v_453 = model.gmflow.utils.split_feature(v_452)
        v_454 = torch.permute(input=v_451, dims=(0,1,3,4,2))
        v_455 = v_454.view(1, 4, -1, 128)
        v_456 = torch.permute(input=v_449, dims=(0,1,3,4,2))
        v_457 = v_456.view(1, 4, -1, 128)
        v_458 = torch.permute(input=v_455, dims=(0,1,3,2))
        v_459 = torch.matmul(input=v_457, other=v_458)
        v_460 = (v_459 / 11.313708)
        v_461 = F.softmax(input=v_460, dim=-1)
        v_462 = torch.permute(input=v_453, dims=(0,1,3,4,2))
        v_463 = v_462.view(1, 4, -1, 128)
        v_464 = torch.matmul(input=v_461, other=v_463)
        v_465 = v_464.view(1, 4, 18, 30, 128)
        v_466 = torch.permute(input=v_465, dims=(0,1,4,2,3))
        v_467 = model.gmflow.utils.merge_splits(v_466)
        v_468 = torch.permute(input=v_467, dims=(0,2,3,1))
        v_469 = v_468.view(1, -1, 128)
        v_470 = self.flownet_transformer_layers_2_self_attn_merge(v_469)
        v_471 = self.flownet_transformer_layers_2_self_attn_norm1(v_470)
        v_472 = (v_374 + v_471)
        v_473 = self.flownet_transformer_layers_2_cross_attn_ffn_q_proj(v_472)
        v_474 = self.flownet_transformer_layers_2_cross_attn_ffn_k_proj(v_441)
        v_475 = self.flownet_transformer_layers_2_cross_attn_ffn_v_proj(v_441)
        v_476 = v_473.view(1, 36, 60, 128)
        v_477 = v_474.view(1, 36, 60, 128)
        v_478 = v_475.view(1, 36, 60, 128)
        v_479 = torch.permute(input=v_476, dims=(0,3,1,2))
        v_480 = model.gmflow.utils.split_feature(v_479)
        v_481 = torch.permute(input=v_477, dims=(0,3,1,2))
        v_482 = model.gmflow.utils.split_feature(v_481)
        v_483 = torch.permute(input=v_478, dims=(0,3,1,2))
        v_484 = model.gmflow.utils.split_feature(v_483)
        v_485 = torch.permute(input=v_482, dims=(0,1,3,4,2))
        v_486 = v_485.view(1, 4, -1, 128)
        v_487 = torch.permute(input=v_480, dims=(0,1,3,4,2))
        v_488 = v_487.view(1, 4, -1, 128)
        v_489 = torch.permute(input=v_486, dims=(0,1,3,2))
        v_490 = torch.matmul(input=v_488, other=v_489)
        v_491 = (v_490 / 11.313708)
        v_492 = F.softmax(input=v_491, dim=-1)
        v_493 = torch.permute(input=v_484, dims=(0,1,3,4,2))
        v_494 = v_493.view(1, 4, -1, 128)
        v_495 = torch.matmul(input=v_492, other=v_494)
        v_496 = v_495.view(1, 4, 18, 30, 128)
        v_497 = torch.permute(input=v_496, dims=(0,1,4,2,3))
        v_498 = model.gmflow.utils.merge_splits(v_497)
        v_499 = torch.permute(input=v_498, dims=(0,2,3,1))
        v_500 = v_499.view(1, -1, 128)
        v_501 = self.flownet_transformer_layers_2_cross_attn_ffn_merge(v_500)
        v_502 = self.flownet_transformer_layers_2_cross_attn_ffn_norm1(v_501)
        v_503 = torch.cat((v_472, v_502), dim=-1)
        v_504 = self.flownet_transformer_layers_2_cross_attn_ffn_mlp_0(v_503)
        v_505 = self.flownet_transformer_layers_2_cross_attn_ffn_mlp_1(v_504)
        v_506 = self.flownet_transformer_layers_2_cross_attn_ffn_mlp_2(v_505)
        v_507 = self.flownet_transformer_layers_2_cross_attn_ffn_norm2(v_506)
        v_508 = (v_472 + v_507)
        v_509 = self.pnnx_unique_146(v_441)
        v_510 = self.pnnx_unique_147(v_441)
        v_511 = self.pnnx_unique_148(v_441)
        v_512 = v_509.view(1, 36, 60, 128)
        v_513 = v_510.view(1, 36, 60, 128)
        v_514 = v_511.view(1, 36, 60, 128)
        v_515 = torch.permute(input=v_512, dims=(0,3,1,2))
        v_516 = model.gmflow.utils.split_feature(v_515)
        v_517 = torch.permute(input=v_513, dims=(0,3,1,2))
        v_518 = model.gmflow.utils.split_feature(v_517)
        v_519 = torch.permute(input=v_514, dims=(0,3,1,2))
        v_520 = model.gmflow.utils.split_feature(v_519)
        v_521 = torch.permute(input=v_518, dims=(0,1,3,4,2))
        v_522 = v_521.view(1, 4, -1, 128)
        v_523 = torch.permute(input=v_516, dims=(0,1,3,4,2))
        v_524 = v_523.view(1, 4, -1, 128)
        v_525 = torch.permute(input=v_522, dims=(0,1,3,2))
        v_526 = torch.matmul(input=v_524, other=v_525)
        v_527 = (v_526 / 11.313708)
        v_528 = F.softmax(input=v_527, dim=-1)
        v_529 = torch.permute(input=v_520, dims=(0,1,3,4,2))
        v_530 = v_529.view(1, 4, -1, 128)
        v_531 = torch.matmul(input=v_528, other=v_530)
        v_532 = v_531.view(1, 4, 18, 30, 128)
        v_533 = torch.permute(input=v_532, dims=(0,1,4,2,3))
        v_534 = model.gmflow.utils.merge_splits(v_533)
        v_535 = torch.permute(input=v_534, dims=(0,2,3,1))
        v_536 = v_535.view(1, -1, 128)
        v_537 = self.pnnx_unique_153(v_536)
        v_538 = self.pnnx_unique_154(v_537)
        v_539 = (v_441 + v_538)
        v_540 = self.pnnx_unique_155(v_539)
        v_541 = self.pnnx_unique_156(v_374)
        v_542 = self.pnnx_unique_157(v_374)
        v_543 = v_540.view(1, 36, 60, 128)
        v_544 = v_541.view(1, 36, 60, 128)
        v_545 = v_542.view(1, 36, 60, 128)
        v_546 = torch.permute(input=v_543, dims=(0,3,1,2))
        v_547 = model.gmflow.utils.split_feature(v_546)
        v_548 = torch.permute(input=v_544, dims=(0,3,1,2))
        v_549 = model.gmflow.utils.split_feature(v_548)
        v_550 = torch.permute(input=v_545, dims=(0,3,1,2))
        v_551 = model.gmflow.utils.split_feature(v_550)
        v_552 = torch.permute(input=v_549, dims=(0,1,3,4,2))
        v_553 = v_552.view(1, 4, -1, 128)
        v_554 = torch.permute(input=v_547, dims=(0,1,3,4,2))
        v_555 = v_554.view(1, 4, -1, 128)
        v_556 = torch.permute(input=v_553, dims=(0,1,3,2))
        v_557 = torch.matmul(input=v_555, other=v_556)
        v_558 = (v_557 / 11.313708)
        v_559 = F.softmax(input=v_558, dim=-1)
        v_560 = torch.permute(input=v_551, dims=(0,1,3,4,2))
        v_561 = v_560.view(1, 4, -1, 128)
        v_562 = torch.matmul(input=v_559, other=v_561)
        v_563 = v_562.view(1, 4, 18, 30, 128)
        v_564 = torch.permute(input=v_563, dims=(0,1,4,2,3))
        v_565 = model.gmflow.utils.merge_splits(v_564)
        v_566 = torch.permute(input=v_565, dims=(0,2,3,1))
        v_567 = v_566.view(1, -1, 128)
        v_568 = self.pnnx_unique_162(v_567)
        v_569 = self.pnnx_unique_163(v_568)
        v_570 = torch.cat((v_539, v_569), dim=-1)
        v_571 = self.pnnx_unique_164(v_570)
        v_572 = self.pnnx_unique_165(v_571)
        v_573 = self.pnnx_unique_166(v_572)
        v_574 = self.pnnx_unique_167(v_573)
        v_575 = (v_539 + v_574)
        v_576 = self.flownet_transformer_layers_3_self_attn_q_proj(v_508)
        v_577 = self.flownet_transformer_layers_3_self_attn_k_proj(v_508)
        v_578 = self.flownet_transformer_layers_3_self_attn_v_proj(v_508)
        v_579 = v_576.view(1, 36, 60, 128)
        v_580 = v_577.view(1, 36, 60, 128)
        v_581 = v_578.view(1, 36, 60, 128)
        v_582 = torch.permute(input=v_579, dims=(0,3,1,2))
        v_583 = model.gmflow.utils.split_feature(v_582)
        v_584 = torch.permute(input=v_580, dims=(0,3,1,2))
        v_585 = model.gmflow.utils.split_feature(v_584)
        v_586 = torch.permute(input=v_581, dims=(0,3,1,2))
        v_587 = model.gmflow.utils.split_feature(v_586)
        v_588 = torch.permute(input=v_585, dims=(0,1,3,4,2))
        v_589 = v_588.view(1, 4, -1, 128)
        v_590 = torch.permute(input=v_583, dims=(0,1,3,4,2))
        v_591 = v_590.view(1, 4, -1, 128)
        v_592 = torch.permute(input=v_589, dims=(0,1,3,2))
        v_593 = torch.matmul(input=v_591, other=v_592)
        v_594 = (v_593 / 11.313708)
        v_595 = F.softmax(input=v_594, dim=-1)
        v_596 = torch.permute(input=v_587, dims=(0,1,3,4,2))
        v_597 = v_596.view(1, 4, -1, 128)
        v_598 = torch.matmul(input=v_595, other=v_597)
        v_599 = v_598.view(1, 4, 18, 30, 128)
        v_600 = torch.permute(input=v_599, dims=(0,1,4,2,3))
        v_601 = model.gmflow.utils.merge_splits(v_600)
        v_602 = torch.permute(input=v_601, dims=(0,2,3,1))
        v_603 = v_602.view(1, -1, 128)
        v_604 = self.flownet_transformer_layers_3_self_attn_merge(v_603)
        v_605 = self.flownet_transformer_layers_3_self_attn_norm1(v_604)
        v_606 = (v_508 + v_605)
        v_607 = self.flownet_transformer_layers_3_cross_attn_ffn_q_proj(v_606)
        v_608 = self.flownet_transformer_layers_3_cross_attn_ffn_k_proj(v_575)
        v_609 = self.flownet_transformer_layers_3_cross_attn_ffn_v_proj(v_575)
        v_610 = v_607.view(1, 36, 60, 128)
        v_611 = v_608.view(1, 36, 60, 128)
        v_612 = v_609.view(1, 36, 60, 128)
        v_613 = torch.permute(input=v_610, dims=(0,3,1,2))
        v_614 = model.gmflow.utils.split_feature(v_613)
        v_615 = torch.permute(input=v_611, dims=(0,3,1,2))
        v_616 = model.gmflow.utils.split_feature(v_615)
        v_617 = torch.permute(input=v_612, dims=(0,3,1,2))
        v_618 = model.gmflow.utils.split_feature(v_617)
        v_619 = torch.permute(input=v_616, dims=(0,1,3,4,2))
        v_620 = v_619.view(1, 4, -1, 128)
        v_621 = torch.permute(input=v_614, dims=(0,1,3,4,2))
        v_622 = v_621.view(1, 4, -1, 128)
        v_623 = torch.permute(input=v_620, dims=(0,1,3,2))
        v_624 = torch.matmul(input=v_622, other=v_623)
        v_625 = (v_624 / 11.313708)
        v_626 = F.softmax(input=v_625, dim=-1)
        v_627 = torch.permute(input=v_618, dims=(0,1,3,4,2))
        v_628 = v_627.view(1, 4, -1, 128)
        v_629 = torch.matmul(input=v_626, other=v_628)
        v_630 = v_629.view(1, 4, 18, 30, 128)
        v_631 = torch.permute(input=v_630, dims=(0,1,4,2,3))
        v_632 = model.gmflow.utils.merge_splits(v_631)
        v_633 = torch.permute(input=v_632, dims=(0,2,3,1))
        v_634 = v_633.view(1, -1, 128)
        v_635 = self.flownet_transformer_layers_3_cross_attn_ffn_merge(v_634)
        v_636 = self.flownet_transformer_layers_3_cross_attn_ffn_norm1(v_635)
        v_637 = torch.cat((v_606, v_636), dim=-1)
        v_638 = self.flownet_transformer_layers_3_cross_attn_ffn_mlp_0(v_637)
        v_639 = self.flownet_transformer_layers_3_cross_attn_ffn_mlp_1(v_638)
        v_640 = self.flownet_transformer_layers_3_cross_attn_ffn_mlp_2(v_639)
        v_641 = self.flownet_transformer_layers_3_cross_attn_ffn_norm2(v_640)
        v_642 = (v_606 + v_641)
        v_643 = self.pnnx_unique_176(v_575)
        v_644 = self.pnnx_unique_177(v_575)
        v_645 = self.pnnx_unique_178(v_575)
        v_646 = v_643.view(1, 36, 60, 128)
        v_647 = v_644.view(1, 36, 60, 128)
        v_648 = v_645.view(1, 36, 60, 128)
        v_649 = torch.permute(input=v_646, dims=(0,3,1,2))
        v_650 = model.gmflow.utils.split_feature(v_649)
        v_651 = torch.permute(input=v_647, dims=(0,3,1,2))
        v_652 = model.gmflow.utils.split_feature(v_651)
        v_653 = torch.permute(input=v_648, dims=(0,3,1,2))
        v_654 = model.gmflow.utils.split_feature(v_653)
        v_655 = torch.permute(input=v_652, dims=(0,1,3,4,2))
        v_656 = v_655.view(1, 4, -1, 128)
        v_657 = torch.permute(input=v_650, dims=(0,1,3,4,2))
        v_658 = v_657.view(1, 4, -1, 128)
        v_659 = torch.permute(input=v_656, dims=(0,1,3,2))
        v_660 = torch.matmul(input=v_658, other=v_659)
        v_661 = (v_660 / 11.313708)
        v_662 = F.softmax(input=v_661, dim=-1)
        v_663 = torch.permute(input=v_654, dims=(0,1,3,4,2))
        v_664 = v_663.view(1, 4, -1, 128)
        v_665 = torch.matmul(input=v_662, other=v_664)
        v_666 = v_665.view(1, 4, 18, 30, 128)
        v_667 = torch.permute(input=v_666, dims=(0,1,4,2,3))
        v_668 = model.gmflow.utils.merge_splits(v_667)
        v_669 = torch.permute(input=v_668, dims=(0,2,3,1))
        v_670 = v_669.view(1, -1, 128)
        v_671 = self.pnnx_unique_183(v_670)
        v_672 = self.pnnx_unique_184(v_671)
        v_673 = (v_575 + v_672)
        v_674 = self.pnnx_unique_185(v_673)
        v_675 = self.pnnx_unique_186(v_508)
        v_676 = self.pnnx_unique_187(v_508)
        v_677 = v_674.view(1, 36, 60, 128)
        v_678 = v_675.view(1, 36, 60, 128)
        v_679 = v_676.view(1, 36, 60, 128)
        v_680 = torch.permute(input=v_677, dims=(0,3,1,2))
        v_681 = model.gmflow.utils.split_feature(v_680)
        v_682 = torch.permute(input=v_678, dims=(0,3,1,2))
        v_683 = model.gmflow.utils.split_feature(v_682)
        v_684 = torch.permute(input=v_679, dims=(0,3,1,2))
        v_685 = model.gmflow.utils.split_feature(v_684)
        v_686 = torch.permute(input=v_683, dims=(0,1,3,4,2))
        v_687 = v_686.view(1, 4, -1, 128)
        v_688 = torch.permute(input=v_681, dims=(0,1,3,4,2))
        v_689 = v_688.view(1, 4, -1, 128)
        v_690 = torch.permute(input=v_687, dims=(0,1,3,2))
        v_691 = torch.matmul(input=v_689, other=v_690)
        v_692 = (v_691 / 11.313708)
        v_693 = F.softmax(input=v_692, dim=-1)
        v_694 = torch.permute(input=v_685, dims=(0,1,3,4,2))
        v_695 = v_694.view(1, 4, -1, 128)
        v_696 = torch.matmul(input=v_693, other=v_695)
        v_697 = v_696.view(1, 4, 18, 30, 128)
        v_698 = torch.permute(input=v_697, dims=(0,1,4,2,3))
        v_699 = model.gmflow.utils.merge_splits(v_698)
        v_700 = torch.permute(input=v_699, dims=(0,2,3,1))
        v_701 = v_700.view(1, -1, 128)
        v_702 = self.pnnx_unique_192(v_701)
        v_703 = self.pnnx_unique_193(v_702)
        v_704 = torch.cat((v_673, v_703), dim=-1)
        v_705 = self.pnnx_unique_194(v_704)
        v_706 = self.pnnx_unique_195(v_705)
        v_707 = self.pnnx_unique_196(v_706)
        v_708 = self.pnnx_unique_197(v_707)
        v_709 = (v_673 + v_708)
        v_710 = self.flownet_transformer_layers_4_self_attn_q_proj(v_642)
        v_711 = self.flownet_transformer_layers_4_self_attn_k_proj(v_642)
        v_712 = self.flownet_transformer_layers_4_self_attn_v_proj(v_642)
        v_713 = v_710.view(1, 36, 60, 128)
        v_714 = v_711.view(1, 36, 60, 128)
        v_715 = v_712.view(1, 36, 60, 128)
        v_716 = torch.permute(input=v_713, dims=(0,3,1,2))
        v_717 = model.gmflow.utils.split_feature(v_716)
        v_718 = torch.permute(input=v_714, dims=(0,3,1,2))
        v_719 = model.gmflow.utils.split_feature(v_718)
        v_720 = torch.permute(input=v_715, dims=(0,3,1,2))
        v_721 = model.gmflow.utils.split_feature(v_720)
        v_722 = torch.permute(input=v_719, dims=(0,1,3,4,2))
        v_723 = v_722.view(1, 4, -1, 128)
        v_724 = torch.permute(input=v_717, dims=(0,1,3,4,2))
        v_725 = v_724.view(1, 4, -1, 128)
        v_726 = torch.permute(input=v_723, dims=(0,1,3,2))
        v_727 = torch.matmul(input=v_725, other=v_726)
        v_728 = (v_727 / 11.313708)
        v_729 = F.softmax(input=v_728, dim=-1)
        v_730 = torch.permute(input=v_721, dims=(0,1,3,4,2))
        v_731 = v_730.view(1, 4, -1, 128)
        v_732 = torch.matmul(input=v_729, other=v_731)
        v_733 = v_732.view(1, 4, 18, 30, 128)
        v_734 = torch.permute(input=v_733, dims=(0,1,4,2,3))
        v_735 = model.gmflow.utils.merge_splits(v_734)
        v_736 = torch.permute(input=v_735, dims=(0,2,3,1))
        v_737 = v_736.view(1, -1, 128)
        v_738 = self.flownet_transformer_layers_4_self_attn_merge(v_737)
        v_739 = self.flownet_transformer_layers_4_self_attn_norm1(v_738)
        v_740 = (v_642 + v_739)
        v_741 = self.flownet_transformer_layers_4_cross_attn_ffn_q_proj(v_740)
        v_742 = self.flownet_transformer_layers_4_cross_attn_ffn_k_proj(v_709)
        v_743 = self.flownet_transformer_layers_4_cross_attn_ffn_v_proj(v_709)
        v_744 = v_741.view(1, 36, 60, 128)
        v_745 = v_742.view(1, 36, 60, 128)
        v_746 = v_743.view(1, 36, 60, 128)
        v_747 = torch.permute(input=v_744, dims=(0,3,1,2))
        v_748 = model.gmflow.utils.split_feature(v_747)
        v_749 = torch.permute(input=v_745, dims=(0,3,1,2))
        v_750 = model.gmflow.utils.split_feature(v_749)
        v_751 = torch.permute(input=v_746, dims=(0,3,1,2))
        v_752 = model.gmflow.utils.split_feature(v_751)
        v_753 = torch.permute(input=v_750, dims=(0,1,3,4,2))
        v_754 = v_753.view(1, 4, -1, 128)
        v_755 = torch.permute(input=v_748, dims=(0,1,3,4,2))
        v_756 = v_755.view(1, 4, -1, 128)
        v_757 = torch.permute(input=v_754, dims=(0,1,3,2))
        v_758 = torch.matmul(input=v_756, other=v_757)
        v_759 = (v_758 / 11.313708)
        v_760 = F.softmax(input=v_759, dim=-1)
        v_761 = torch.permute(input=v_752, dims=(0,1,3,4,2))
        v_762 = v_761.view(1, 4, -1, 128)
        v_763 = torch.matmul(input=v_760, other=v_762)
        v_764 = v_763.view(1, 4, 18, 30, 128)
        v_765 = torch.permute(input=v_764, dims=(0,1,4,2,3))
        v_766 = model.gmflow.utils.merge_splits(v_765)
        v_767 = torch.permute(input=v_766, dims=(0,2,3,1))
        v_768 = v_767.view(1, -1, 128)
        v_769 = self.flownet_transformer_layers_4_cross_attn_ffn_merge(v_768)
        v_770 = self.flownet_transformer_layers_4_cross_attn_ffn_norm1(v_769)
        v_771 = torch.cat((v_740, v_770), dim=-1)
        v_772 = self.flownet_transformer_layers_4_cross_attn_ffn_mlp_0(v_771)
        v_773 = self.flownet_transformer_layers_4_cross_attn_ffn_mlp_1(v_772)
        v_774 = self.flownet_transformer_layers_4_cross_attn_ffn_mlp_2(v_773)
        v_775 = self.flownet_transformer_layers_4_cross_attn_ffn_norm2(v_774)
        v_776 = (v_740 + v_775)
        v_777 = self.pnnx_unique_206(v_709)
        v_778 = self.pnnx_unique_207(v_709)
        v_779 = self.pnnx_unique_208(v_709)
        v_780 = v_777.view(1, 36, 60, 128)
        v_781 = v_778.view(1, 36, 60, 128)
        v_782 = v_779.view(1, 36, 60, 128)
        v_783 = torch.permute(input=v_780, dims=(0,3,1,2))
        v_784 = model.gmflow.utils.split_feature(v_783)
        v_785 = torch.permute(input=v_781, dims=(0,3,1,2))
        v_786 = model.gmflow.utils.split_feature(v_785)
        v_787 = torch.permute(input=v_782, dims=(0,3,1,2))
        v_788 = model.gmflow.utils.split_feature(v_787)
        v_789 = torch.permute(input=v_786, dims=(0,1,3,4,2))
        v_790 = v_789.view(1, 4, -1, 128)
        v_791 = torch.permute(input=v_784, dims=(0,1,3,4,2))
        v_792 = v_791.view(1, 4, -1, 128)
        v_793 = torch.permute(input=v_790, dims=(0,1,3,2))
        v_794 = torch.matmul(input=v_792, other=v_793)
        v_795 = (v_794 / 11.313708)
        v_796 = F.softmax(input=v_795, dim=-1)
        v_797 = torch.permute(input=v_788, dims=(0,1,3,4,2))
        v_798 = v_797.view(1, 4, -1, 128)
        v_799 = torch.matmul(input=v_796, other=v_798)
        v_800 = v_799.view(1, 4, 18, 30, 128)
        v_801 = torch.permute(input=v_800, dims=(0,1,4,2,3))
        v_802 = model.gmflow.utils.merge_splits(v_801)
        v_803 = torch.permute(input=v_802, dims=(0,2,3,1))
        v_804 = v_803.view(1, -1, 128)
        v_805 = self.pnnx_unique_213(v_804)
        v_806 = self.pnnx_unique_214(v_805)
        v_807 = (v_709 + v_806)
        v_808 = self.pnnx_unique_215(v_807)
        v_809 = self.pnnx_unique_216(v_642)
        v_810 = self.pnnx_unique_217(v_642)
        v_811 = v_808.view(1, 36, 60, 128)
        v_812 = v_809.view(1, 36, 60, 128)
        v_813 = v_810.view(1, 36, 60, 128)
        v_814 = torch.permute(input=v_811, dims=(0,3,1,2))
        v_815 = model.gmflow.utils.split_feature(v_814)
        v_816 = torch.permute(input=v_812, dims=(0,3,1,2))
        v_817 = model.gmflow.utils.split_feature(v_816)
        v_818 = torch.permute(input=v_813, dims=(0,3,1,2))
        v_819 = model.gmflow.utils.split_feature(v_818)
        v_820 = torch.permute(input=v_817, dims=(0,1,3,4,2))
        v_821 = v_820.view(1, 4, -1, 128)
        v_822 = torch.permute(input=v_815, dims=(0,1,3,4,2))
        v_823 = v_822.view(1, 4, -1, 128)
        v_824 = torch.permute(input=v_821, dims=(0,1,3,2))
        v_825 = torch.matmul(input=v_823, other=v_824)
        v_826 = (v_825 / 11.313708)
        v_827 = F.softmax(input=v_826, dim=-1)
        v_828 = torch.permute(input=v_819, dims=(0,1,3,4,2))
        v_829 = v_828.view(1, 4, -1, 128)
        v_830 = torch.matmul(input=v_827, other=v_829)
        v_831 = v_830.view(1, 4, 18, 30, 128)
        v_832 = torch.permute(input=v_831, dims=(0,1,4,2,3))
        v_833 = model.gmflow.utils.merge_splits(v_832)
        v_834 = torch.permute(input=v_833, dims=(0,2,3,1))
        v_835 = v_834.view(1, -1, 128)
        v_836 = self.pnnx_unique_222(v_835)
        v_837 = self.pnnx_unique_223(v_836)
        v_838 = torch.cat((v_807, v_837), dim=-1)
        v_839 = self.pnnx_unique_224(v_838)
        v_840 = self.pnnx_unique_225(v_839)
        v_841 = self.pnnx_unique_226(v_840)
        v_842 = self.pnnx_unique_227(v_841)
        v_843 = (v_807 + v_842)
        v_844 = self.flownet_transformer_layers_5_self_attn_q_proj(v_776)
        v_845 = self.flownet_transformer_layers_5_self_attn_k_proj(v_776)
        v_846 = self.flownet_transformer_layers_5_self_attn_v_proj(v_776)
        v_847 = v_844.view(1, 36, 60, 128)
        v_848 = v_845.view(1, 36, 60, 128)
        v_849 = v_846.view(1, 36, 60, 128)
        v_850 = torch.permute(input=v_847, dims=(0,3,1,2))
        v_851 = model.gmflow.utils.split_feature(v_850)
        v_852 = torch.permute(input=v_848, dims=(0,3,1,2))
        v_853 = model.gmflow.utils.split_feature(v_852)
        v_854 = torch.permute(input=v_849, dims=(0,3,1,2))
        v_855 = model.gmflow.utils.split_feature(v_854)
        v_856 = torch.permute(input=v_853, dims=(0,1,3,4,2))
        v_857 = v_856.view(1, 4, -1, 128)
        v_858 = torch.permute(input=v_851, dims=(0,1,3,4,2))
        v_859 = v_858.view(1, 4, -1, 128)
        v_860 = torch.permute(input=v_857, dims=(0,1,3,2))
        v_861 = torch.matmul(input=v_859, other=v_860)
        v_862 = (v_861 / 11.313708)
        v_863 = F.softmax(input=v_862, dim=-1)
        v_864 = torch.permute(input=v_855, dims=(0,1,3,4,2))
        v_865 = v_864.view(1, 4, -1, 128)
        v_866 = torch.matmul(input=v_863, other=v_865)
        v_867 = v_866.view(1, 4, 18, 30, 128)
        v_868 = torch.permute(input=v_867, dims=(0,1,4,2,3))
        v_869 = model.gmflow.utils.merge_splits(v_868)
        v_870 = torch.permute(input=v_869, dims=(0,2,3,1))
        v_871 = v_870.view(1, -1, 128)
        v_872 = self.flownet_transformer_layers_5_self_attn_merge(v_871)
        v_873 = self.flownet_transformer_layers_5_self_attn_norm1(v_872)
        v_874 = (v_776 + v_873)
        v_875 = self.flownet_transformer_layers_5_cross_attn_ffn_q_proj(v_874)
        v_876 = self.flownet_transformer_layers_5_cross_attn_ffn_k_proj(v_843)
        v_877 = self.flownet_transformer_layers_5_cross_attn_ffn_v_proj(v_843)
        v_878 = v_875.view(1, 36, 60, 128)
        v_879 = v_876.view(1, 36, 60, 128)
        v_880 = v_877.view(1, 36, 60, 128)
        v_881 = torch.permute(input=v_878, dims=(0,3,1,2))
        v_882 = model.gmflow.utils.split_feature(v_881)
        v_883 = torch.permute(input=v_879, dims=(0,3,1,2))
        v_884 = model.gmflow.utils.split_feature(v_883)
        v_885 = torch.permute(input=v_880, dims=(0,3,1,2))
        v_886 = model.gmflow.utils.split_feature(v_885)
        v_887 = torch.permute(input=v_884, dims=(0,1,3,4,2))
        v_888 = v_887.view(1, 4, -1, 128)
        v_889 = torch.permute(input=v_882, dims=(0,1,3,4,2))
        v_890 = v_889.view(1, 4, -1, 128)
        v_891 = torch.permute(input=v_888, dims=(0,1,3,2))
        v_892 = torch.matmul(input=v_890, other=v_891)
        v_893 = (v_892 / 11.313708)
        v_894 = F.softmax(input=v_893, dim=-1)
        v_895 = torch.permute(input=v_886, dims=(0,1,3,4,2))
        v_896 = v_895.view(1, 4, -1, 128)
        v_897 = torch.matmul(input=v_894, other=v_896)
        v_898 = v_897.view(1, 4, 18, 30, 128)
        v_899 = torch.permute(input=v_898, dims=(0,1,4,2,3))
        v_900 = model.gmflow.utils.merge_splits(v_899)
        v_901 = torch.permute(input=v_900, dims=(0,2,3,1))
        v_902 = v_901.view(1, -1, 128)
        v_903 = self.flownet_transformer_layers_5_cross_attn_ffn_merge(v_902)
        v_904 = self.flownet_transformer_layers_5_cross_attn_ffn_norm1(v_903)
        v_905 = torch.cat((v_874, v_904), dim=-1)
        v_906 = self.flownet_transformer_layers_5_cross_attn_ffn_mlp_0(v_905)
        v_907 = self.flownet_transformer_layers_5_cross_attn_ffn_mlp_1(v_906)
        v_908 = self.flownet_transformer_layers_5_cross_attn_ffn_mlp_2(v_907)
        v_909 = self.flownet_transformer_layers_5_cross_attn_ffn_norm2(v_908)
        v_910 = (v_874 + v_909)
        v_911 = self.pnnx_unique_236(v_843)
        v_912 = self.pnnx_unique_237(v_843)
        v_913 = self.pnnx_unique_238(v_843)
        v_914 = v_911.view(1, 36, 60, 128)
        v_915 = v_912.view(1, 36, 60, 128)
        v_916 = v_913.view(1, 36, 60, 128)
        v_917 = torch.permute(input=v_914, dims=(0,3,1,2))
        v_918 = model.gmflow.utils.split_feature(v_917)
        v_919 = torch.permute(input=v_915, dims=(0,3,1,2))
        v_920 = model.gmflow.utils.split_feature(v_919)
        v_921 = torch.permute(input=v_916, dims=(0,3,1,2))
        v_922 = model.gmflow.utils.split_feature(v_921)
        v_923 = torch.permute(input=v_920, dims=(0,1,3,4,2))
        v_924 = v_923.view(1, 4, -1, 128)
        v_925 = torch.permute(input=v_918, dims=(0,1,3,4,2))
        v_926 = v_925.view(1, 4, -1, 128)
        v_927 = torch.permute(input=v_924, dims=(0,1,3,2))
        v_928 = torch.matmul(input=v_926, other=v_927)
        v_929 = (v_928 / 11.313708)
        v_930 = F.softmax(input=v_929, dim=-1)
        v_931 = torch.permute(input=v_922, dims=(0,1,3,4,2))
        v_932 = v_931.view(1, 4, -1, 128)
        v_933 = torch.matmul(input=v_930, other=v_932)
        v_934 = v_933.view(1, 4, 18, 30, 128)
        v_935 = torch.permute(input=v_934, dims=(0,1,4,2,3))
        v_936 = model.gmflow.utils.merge_splits(v_935)
        v_937 = torch.permute(input=v_936, dims=(0,2,3,1))
        v_938 = v_937.view(1, -1, 128)
        v_939 = self.pnnx_unique_243(v_938)
        v_940 = self.pnnx_unique_244(v_939)
        v_941 = (v_843 + v_940)
        v_942 = self.pnnx_unique_245(v_941)
        v_943 = self.pnnx_unique_246(v_776)
        v_944 = self.pnnx_unique_247(v_776)
        v_945 = v_942.view(1, 36, 60, 128)
        v_946 = v_943.view(1, 36, 60, 128)
        v_947 = v_944.view(1, 36, 60, 128)
        v_948 = torch.permute(input=v_945, dims=(0,3,1,2))
        v_949 = model.gmflow.utils.split_feature(v_948)
        v_950 = torch.permute(input=v_946, dims=(0,3,1,2))
        v_951 = model.gmflow.utils.split_feature(v_950)
        v_952 = torch.permute(input=v_947, dims=(0,3,1,2))
        v_953 = model.gmflow.utils.split_feature(v_952)
        v_954 = torch.permute(input=v_951, dims=(0,1,3,4,2))
        v_955 = v_954.view(1, 4, -1, 128)
        v_956 = torch.permute(input=v_949, dims=(0,1,3,4,2))
        v_957 = v_956.view(1, 4, -1, 128)
        v_958 = torch.permute(input=v_955, dims=(0,1,3,2))
        v_959 = torch.matmul(input=v_957, other=v_958)
        v_960 = (v_959 / 11.313708)
        v_961 = F.softmax(input=v_960, dim=-1)
        v_962 = torch.permute(input=v_953, dims=(0,1,3,4,2))
        v_963 = v_962.view(1, 4, -1, 128)
        v_964 = torch.matmul(input=v_961, other=v_963)
        v_965 = v_964.view(1, 4, 18, 30, 128)
        v_966 = torch.permute(input=v_965, dims=(0,1,4,2,3))
        v_967 = model.gmflow.utils.merge_splits(v_966)
        v_968 = torch.permute(input=v_967, dims=(0,2,3,1))
        v_969 = v_968.view(1, -1, 128)
        v_970 = self.pnnx_unique_252(v_969)
        v_971 = self.pnnx_unique_253(v_970)
        v_972 = torch.cat((v_941, v_971), dim=-1)
        v_973 = self.pnnx_unique_254(v_972)
        v_974 = self.pnnx_unique_255(v_973)
        v_975 = self.pnnx_unique_256(v_974)
        v_976 = self.pnnx_unique_257(v_975)
        v_977 = (v_941 + v_976)
        v_978 = v_910.view(1, 36, 60, 128)
        v_979 = v_977.view(1, 36, 60, 128)
        v_980 = torch.permute(input=v_979, dims=(0,3,1,2))
        v_981 = torch.permute(input=v_978, dims=(0,3,1,2))
        v_982 = v_981.contiguous(memory_format=torch.contiguous_format)
        v_983 = v_982.view(1, 128, -1)
        v_984 = torch.permute(input=v_983, dims=(0,2,1))
        v_985 = v_980.reshape(1, 128, -1)
        v_986 = torch.matmul(input=v_984, other=v_985)
        v_987 = v_986.view(1, 36, 60, 36, 60)
        v_988 = (v_987 / 11.313708)
        v_989 = self.pnnx_fold_init_grid_2_pnnx_fold_init_grid_2
        v_990 = v_988.view(1, 2160, 2160)
        v_991 = F.softmax(input=v_990, dim=-1)
        v_992 = self.pnnx_fold_grid_6_pnnx_fold_grid_6
        v_993 = torch.matmul(input=v_991, other=v_992)
        v_994 = v_993.view(1, 36, 60, 2)
        v_995 = torch.permute(input=v_994, dims=(0,3,1,2))
        v_996 = (v_995 - v_989)
        v_997 = v_982.view(1, 128, 2160)
        v_998 = torch.permute(input=v_997, dims=(0,2,1))
        v_999 = self.flownet_feature_flow_attn_q_proj(v_998)
        v_1000 = self.flownet_feature_flow_attn_k_proj(v_999)
        v_1001 = v_996.view(1, 2, 2160)
        v_1002 = torch.permute(input=v_1000, dims=(0,2,1))
        v_1003 = torch.matmul(input=v_999, other=v_1002)
        v_1004 = (v_1003 / 11.313708)
        v_1005 = F.softmax(input=v_1004, dim=-1)
        v_1006 = torch.permute(input=v_1001, dims=(0,2,1))
        v_1007 = torch.matmul(input=v_1005, other=v_1006)
        v_1008 = v_1007.view(1, 36, 60, 2)
        v_1009 = torch.permute(input=v_1008, dims=(0,3,1,2))
        v_1010 = F.upsample(input=v_1009, align_corners=True, mode='bilinear', scale_factor=(2.000000,2.000000))
        v_1011 = (v_1010 * 2)
        v_1012 = self.pnnx_fold_3444_pnnx_fold_3444
        v_1013 = (v_1012 + v_1011)
        v_1014, v_1015 = torch.unbind(v_1013, dim=1)
        v_1016 = (((v_1014 * 2) / 119.000000) - 1)
        v_1017 = (((v_1015 * 2) / 71.000000) - 1)
        v_1018 = torch.unsqueeze(input=v_1017, dim=3)
        v_1019 = torch.unsqueeze(input=v_1016, dim=3)
        v_1020 = self.conv2d_1(v_102)
        v_1021 = model.gmflow.utils.split_feature(v_1020)
        v_1022 = torch.cat((v_1019, v_1018), dim=3)
        v_1023 = self.conv2d_3(v_159)
        v_1024 = F.grid_sample(input=v_1023, grid=v_1022, align_corners=True, mode='bilinear', padding_mode='zeros')
        v_1025 = model.gmflow.utils.split_feature(v_1024)
        v_1026 = self.pnnx_fold_position0_1_pnnx_fold_position0_1
        v_1027 = self.pnnx_fold_position0_1_1_pnnx_fold_position0_1
        v_1028 = (v_1021 + v_1026)
        v_1029 = (v_1025 + v_1027)
        v_1030 = model.gmflow.utils.merge_splits(v_1028)
        v_1031 = model.gmflow.utils.merge_splits(v_1029)
        v_1032 = torch.flatten(input=v_1030, end_dim=-1, start_dim=2)
        v_1033 = torch.flatten(input=v_1031, end_dim=-1, start_dim=2)
        v_1034 = torch.permute(input=v_1032, dims=(0,2,1))
        v_1035 = self.pnnx_unique_263(v_1034)
        v_1036 = self.pnnx_unique_264(v_1034)
        v_1037 = self.pnnx_unique_265(v_1034)
        v_1038 = v_1035.view(1, 72, 120, 128)
        v_1039 = v_1036.view(1, 72, 120, 128)
        v_1040 = v_1037.view(1, 72, 120, 128)
        v_1041 = torch.permute(input=v_1038, dims=(0,3,1,2))
        v_1042 = model.gmflow.utils.split_feature(v_1041)
        v_1043 = torch.permute(input=v_1039, dims=(0,3,1,2))
        v_1044 = model.gmflow.utils.split_feature(v_1043)
        v_1045 = torch.permute(input=v_1040, dims=(0,3,1,2))
        v_1046 = model.gmflow.utils.split_feature(v_1045)
        v_1047 = torch.permute(input=v_1044, dims=(0,1,3,4,2))
        v_1048 = v_1047.view(1, 64, -1, 128)
        v_1049 = torch.permute(input=v_1042, dims=(0,1,3,4,2))
        v_1050 = v_1049.view(1, 64, -1, 128)
        v_1051 = torch.permute(input=v_1048, dims=(0,1,3,2))
        v_1052 = torch.matmul(input=v_1050, other=v_1051)
        v_1053 = (v_1052 / 11.313708)
        v_1054 = F.softmax(input=v_1053, dim=-1)
        v_1055 = torch.permute(input=v_1046, dims=(0,1,3,4,2))
        v_1056 = v_1055.view(1, 64, -1, 128)
        v_1057 = torch.matmul(input=v_1054, other=v_1056)
        v_1058 = v_1057.view(1, 64, 9, 15, 128)
        v_1059 = torch.permute(input=v_1058, dims=(0,1,4,2,3))
        v_1060 = model.gmflow.utils.merge_splits(v_1059)
        v_1061 = torch.permute(input=v_1060, dims=(0,2,3,1))
        v_1062 = v_1061.view(1, -1, 128)
        v_1063 = self.pnnx_unique_270(v_1062)
        v_1064 = self.pnnx_unique_271(v_1063)
        v_1065 = (v_1034 + v_1064)
        v_1066 = self.pnnx_unique_272(v_1065)
        v_1067 = torch.permute(input=v_1033, dims=(0,2,1))
        v_1068 = self.pnnx_unique_273(v_1067)
        v_1069 = self.pnnx_unique_274(v_1067)
        v_1070 = v_1066.view(1, 72, 120, 128)
        v_1071 = v_1068.view(1, 72, 120, 128)
        v_1072 = v_1069.view(1, 72, 120, 128)
        v_1073 = torch.permute(input=v_1070, dims=(0,3,1,2))
        v_1074 = model.gmflow.utils.split_feature(v_1073)
        v_1075 = torch.permute(input=v_1071, dims=(0,3,1,2))
        v_1076 = model.gmflow.utils.split_feature(v_1075)
        v_1077 = torch.permute(input=v_1072, dims=(0,3,1,2))
        v_1078 = model.gmflow.utils.split_feature(v_1077)
        v_1079 = torch.permute(input=v_1076, dims=(0,1,3,4,2))
        v_1080 = v_1079.view(1, 64, -1, 128)
        v_1081 = torch.permute(input=v_1074, dims=(0,1,3,4,2))
        v_1082 = v_1081.view(1, 64, -1, 128)
        v_1083 = torch.permute(input=v_1080, dims=(0,1,3,2))
        v_1084 = torch.matmul(input=v_1082, other=v_1083)
        v_1085 = (v_1084 / 11.313708)
        v_1086 = F.softmax(input=v_1085, dim=-1)
        v_1087 = torch.permute(input=v_1078, dims=(0,1,3,4,2))
        v_1088 = v_1087.view(1, 64, -1, 128)
        v_1089 = torch.matmul(input=v_1086, other=v_1088)
        v_1090 = v_1089.view(1, 64, 9, 15, 128)
        v_1091 = torch.permute(input=v_1090, dims=(0,1,4,2,3))
        v_1092 = model.gmflow.utils.merge_splits(v_1091)
        v_1093 = torch.permute(input=v_1092, dims=(0,2,3,1))
        v_1094 = v_1093.view(1, -1, 128)
        v_1095 = self.pnnx_unique_279(v_1094)
        v_1096 = self.pnnx_unique_280(v_1095)
        v_1097 = torch.cat((v_1065, v_1096), dim=-1)
        v_1098 = self.pnnx_unique_281(v_1097)
        v_1099 = self.pnnx_unique_282(v_1098)
        v_1100 = self.pnnx_unique_283(v_1099)
        v_1101 = self.pnnx_unique_284(v_1100)
        v_1102 = (v_1065 + v_1101)
        v_1103 = self.pnnx_unique_285(v_1067)
        v_1104 = self.pnnx_unique_286(v_1067)
        v_1105 = self.pnnx_unique_287(v_1067)
        v_1106 = v_1103.view(1, 72, 120, 128)
        v_1107 = v_1104.view(1, 72, 120, 128)
        v_1108 = v_1105.view(1, 72, 120, 128)
        v_1109 = torch.permute(input=v_1106, dims=(0,3,1,2))
        v_1110 = model.gmflow.utils.split_feature(v_1109)
        v_1111 = torch.permute(input=v_1107, dims=(0,3,1,2))
        v_1112 = model.gmflow.utils.split_feature(v_1111)
        v_1113 = torch.permute(input=v_1108, dims=(0,3,1,2))
        v_1114 = model.gmflow.utils.split_feature(v_1113)
        v_1115 = torch.permute(input=v_1112, dims=(0,1,3,4,2))
        v_1116 = v_1115.view(1, 64, -1, 128)
        v_1117 = torch.permute(input=v_1110, dims=(0,1,3,4,2))
        v_1118 = v_1117.view(1, 64, -1, 128)
        v_1119 = torch.permute(input=v_1116, dims=(0,1,3,2))
        v_1120 = torch.matmul(input=v_1118, other=v_1119)
        v_1121 = (v_1120 / 11.313708)
        v_1122 = F.softmax(input=v_1121, dim=-1)
        v_1123 = torch.permute(input=v_1114, dims=(0,1,3,4,2))
        v_1124 = v_1123.view(1, 64, -1, 128)
        v_1125 = torch.matmul(input=v_1122, other=v_1124)
        v_1126 = v_1125.view(1, 64, 9, 15, 128)
        v_1127 = torch.permute(input=v_1126, dims=(0,1,4,2,3))
        v_1128 = model.gmflow.utils.merge_splits(v_1127)
        v_1129 = torch.permute(input=v_1128, dims=(0,2,3,1))
        v_1130 = v_1129.view(1, -1, 128)
        v_1131 = self.pnnx_unique_292(v_1130)
        v_1132 = self.pnnx_unique_293(v_1131)
        v_1133 = (v_1067 + v_1132)
        v_1134 = self.pnnx_unique_294(v_1133)
        v_1135 = self.pnnx_unique_295(v_1034)
        v_1136 = self.pnnx_unique_296(v_1034)
        v_1137 = v_1134.view(1, 72, 120, 128)
        v_1138 = v_1135.view(1, 72, 120, 128)
        v_1139 = v_1136.view(1, 72, 120, 128)
        v_1140 = torch.permute(input=v_1137, dims=(0,3,1,2))
        v_1141 = model.gmflow.utils.split_feature(v_1140)
        v_1142 = torch.permute(input=v_1138, dims=(0,3,1,2))
        v_1143 = model.gmflow.utils.split_feature(v_1142)
        v_1144 = torch.permute(input=v_1139, dims=(0,3,1,2))
        v_1145 = model.gmflow.utils.split_feature(v_1144)
        v_1146 = torch.permute(input=v_1143, dims=(0,1,3,4,2))
        v_1147 = v_1146.view(1, 64, -1, 128)
        v_1148 = torch.permute(input=v_1141, dims=(0,1,3,4,2))
        v_1149 = v_1148.view(1, 64, -1, 128)
        v_1150 = torch.permute(input=v_1147, dims=(0,1,3,2))
        v_1151 = torch.matmul(input=v_1149, other=v_1150)
        v_1152 = (v_1151 / 11.313708)
        v_1153 = F.softmax(input=v_1152, dim=-1)
        v_1154 = torch.permute(input=v_1145, dims=(0,1,3,4,2))
        v_1155 = v_1154.view(1, 64, -1, 128)
        v_1156 = torch.matmul(input=v_1153, other=v_1155)
        v_1157 = v_1156.view(1, 64, 9, 15, 128)
        v_1158 = torch.permute(input=v_1157, dims=(0,1,4,2,3))
        v_1159 = model.gmflow.utils.merge_splits(v_1158)
        v_1160 = torch.permute(input=v_1159, dims=(0,2,3,1))
        v_1161 = v_1160.view(1, -1, 128)
        v_1162 = self.pnnx_unique_301(v_1161)
        v_1163 = self.pnnx_unique_302(v_1162)
        v_1164 = torch.cat((v_1133, v_1163), dim=-1)
        v_1165 = self.pnnx_unique_303(v_1164)
        v_1166 = self.pnnx_unique_304(v_1165)
        v_1167 = self.pnnx_unique_305(v_1166)
        v_1168 = self.pnnx_unique_306(v_1167)
        v_1169 = (v_1133 + v_1168)
        v_1170 = self.pnnx_unique_307(v_1102)
        v_1171 = self.pnnx_unique_308(v_1102)
        v_1172 = self.pnnx_unique_309(v_1102)
        v_1173 = v_1170.view(1, 72, 120, 128)
        v_1174 = v_1171.view(1, 72, 120, 128)
        v_1175 = v_1172.view(1, 72, 120, 128)
        v_1176 = torch.permute(input=v_1173, dims=(0,3,1,2))
        v_1177 = model.gmflow.utils.split_feature(v_1176)
        v_1178 = torch.permute(input=v_1174, dims=(0,3,1,2))
        v_1179 = model.gmflow.utils.split_feature(v_1178)
        v_1180 = torch.permute(input=v_1175, dims=(0,3,1,2))
        v_1181 = model.gmflow.utils.split_feature(v_1180)
        v_1182 = torch.permute(input=v_1179, dims=(0,1,3,4,2))
        v_1183 = v_1182.view(1, 64, -1, 128)
        v_1184 = torch.permute(input=v_1177, dims=(0,1,3,4,2))
        v_1185 = v_1184.view(1, 64, -1, 128)
        v_1186 = torch.permute(input=v_1183, dims=(0,1,3,2))
        v_1187 = torch.matmul(input=v_1185, other=v_1186)
        v_1188 = (v_1187 / 11.313708)
        v_1189 = F.softmax(input=v_1188, dim=-1)
        v_1190 = torch.permute(input=v_1181, dims=(0,1,3,4,2))
        v_1191 = v_1190.view(1, 64, -1, 128)
        v_1192 = torch.matmul(input=v_1189, other=v_1191)
        v_1193 = v_1192.view(1, 64, 9, 15, 128)
        v_1194 = torch.permute(input=v_1193, dims=(0,1,4,2,3))
        v_1195 = model.gmflow.utils.merge_splits(v_1194)
        v_1196 = torch.permute(input=v_1195, dims=(0,2,3,1))
        v_1197 = v_1196.view(1, -1, 128)
        v_1198 = self.pnnx_unique_314(v_1197)
        v_1199 = self.pnnx_unique_315(v_1198)
        v_1200 = (v_1102 + v_1199)
        v_1201 = self.pnnx_unique_316(v_1200)
        v_1202 = self.pnnx_unique_317(v_1169)
        v_1203 = self.pnnx_unique_318(v_1169)
        v_1204 = v_1201.view(1, 72, 120, 128)
        v_1205 = v_1202.view(1, 72, 120, 128)
        v_1206 = v_1203.view(1, 72, 120, 128)
        v_1207 = torch.permute(input=v_1204, dims=(0,3,1,2))
        v_1208 = model.gmflow.utils.split_feature(v_1207)
        v_1209 = torch.permute(input=v_1205, dims=(0,3,1,2))
        v_1210 = model.gmflow.utils.split_feature(v_1209)
        v_1211 = torch.permute(input=v_1206, dims=(0,3,1,2))
        v_1212 = model.gmflow.utils.split_feature(v_1211)
        v_1213 = torch.permute(input=v_1210, dims=(0,1,3,4,2))
        v_1214 = v_1213.view(1, 64, -1, 128)
        v_1215 = torch.permute(input=v_1208, dims=(0,1,3,4,2))
        v_1216 = v_1215.view(1, 64, -1, 128)
        v_1217 = torch.permute(input=v_1214, dims=(0,1,3,2))
        v_1218 = torch.matmul(input=v_1216, other=v_1217)
        v_1219 = (v_1218 / 11.313708)
        v_1220 = F.softmax(input=v_1219, dim=-1)
        v_1221 = torch.permute(input=v_1212, dims=(0,1,3,4,2))
        v_1222 = v_1221.view(1, 64, -1, 128)
        v_1223 = torch.matmul(input=v_1220, other=v_1222)
        v_1224 = v_1223.view(1, 64, 9, 15, 128)
        v_1225 = torch.permute(input=v_1224, dims=(0,1,4,2,3))
        v_1226 = model.gmflow.utils.merge_splits(v_1225)
        v_1227 = torch.permute(input=v_1226, dims=(0,2,3,1))
        v_1228 = v_1227.view(1, -1, 128)
        v_1229 = self.pnnx_unique_323(v_1228)
        v_1230 = self.pnnx_unique_324(v_1229)
        v_1231 = torch.cat((v_1200, v_1230), dim=-1)
        v_1232 = self.pnnx_unique_325(v_1231)
        v_1233 = self.pnnx_unique_326(v_1232)
        v_1234 = self.pnnx_unique_327(v_1233)
        v_1235 = self.pnnx_unique_328(v_1234)
        v_1236 = (v_1200 + v_1235)
        v_1237 = self.pnnx_unique_329(v_1169)
        v_1238 = self.pnnx_unique_330(v_1169)
        v_1239 = self.pnnx_unique_331(v_1169)
        v_1240 = v_1237.view(1, 72, 120, 128)
        v_1241 = v_1238.view(1, 72, 120, 128)
        v_1242 = v_1239.view(1, 72, 120, 128)
        v_1243 = torch.permute(input=v_1240, dims=(0,3,1,2))
        v_1244 = model.gmflow.utils.split_feature(v_1243)
        v_1245 = torch.permute(input=v_1241, dims=(0,3,1,2))
        v_1246 = model.gmflow.utils.split_feature(v_1245)
        v_1247 = torch.permute(input=v_1242, dims=(0,3,1,2))
        v_1248 = model.gmflow.utils.split_feature(v_1247)
        v_1249 = torch.permute(input=v_1246, dims=(0,1,3,4,2))
        v_1250 = v_1249.view(1, 64, -1, 128)
        v_1251 = torch.permute(input=v_1244, dims=(0,1,3,4,2))
        v_1252 = v_1251.view(1, 64, -1, 128)
        v_1253 = torch.permute(input=v_1250, dims=(0,1,3,2))
        v_1254 = torch.matmul(input=v_1252, other=v_1253)
        v_1255 = (v_1254 / 11.313708)
        v_1256 = F.softmax(input=v_1255, dim=-1)
        v_1257 = torch.permute(input=v_1248, dims=(0,1,3,4,2))
        v_1258 = v_1257.view(1, 64, -1, 128)
        v_1259 = torch.matmul(input=v_1256, other=v_1258)
        v_1260 = v_1259.view(1, 64, 9, 15, 128)
        v_1261 = torch.permute(input=v_1260, dims=(0,1,4,2,3))
        v_1262 = model.gmflow.utils.merge_splits(v_1261)
        v_1263 = torch.permute(input=v_1262, dims=(0,2,3,1))
        v_1264 = v_1263.view(1, -1, 128)
        v_1265 = self.pnnx_unique_336(v_1264)
        v_1266 = self.pnnx_unique_337(v_1265)
        v_1267 = (v_1169 + v_1266)
        v_1268 = self.pnnx_unique_338(v_1267)
        v_1269 = self.pnnx_unique_339(v_1102)
        v_1270 = self.pnnx_unique_340(v_1102)
        v_1271 = v_1268.view(1, 72, 120, 128)
        v_1272 = v_1269.view(1, 72, 120, 128)
        v_1273 = v_1270.view(1, 72, 120, 128)
        v_1274 = torch.permute(input=v_1271, dims=(0,3,1,2))
        v_1275 = model.gmflow.utils.split_feature(v_1274)
        v_1276 = torch.permute(input=v_1272, dims=(0,3,1,2))
        v_1277 = model.gmflow.utils.split_feature(v_1276)
        v_1278 = torch.permute(input=v_1273, dims=(0,3,1,2))
        v_1279 = model.gmflow.utils.split_feature(v_1278)
        v_1280 = torch.permute(input=v_1277, dims=(0,1,3,4,2))
        v_1281 = v_1280.view(1, 64, -1, 128)
        v_1282 = torch.permute(input=v_1275, dims=(0,1,3,4,2))
        v_1283 = v_1282.view(1, 64, -1, 128)
        v_1284 = torch.permute(input=v_1281, dims=(0,1,3,2))
        v_1285 = torch.matmul(input=v_1283, other=v_1284)
        v_1286 = (v_1285 / 11.313708)
        v_1287 = F.softmax(input=v_1286, dim=-1)
        v_1288 = torch.permute(input=v_1279, dims=(0,1,3,4,2))
        v_1289 = v_1288.view(1, 64, -1, 128)
        v_1290 = torch.matmul(input=v_1287, other=v_1289)
        v_1291 = v_1290.view(1, 64, 9, 15, 128)
        v_1292 = torch.permute(input=v_1291, dims=(0,1,4,2,3))
        v_1293 = model.gmflow.utils.merge_splits(v_1292)
        v_1294 = torch.permute(input=v_1293, dims=(0,2,3,1))
        v_1295 = v_1294.view(1, -1, 128)
        v_1296 = self.pnnx_unique_345(v_1295)
        v_1297 = self.pnnx_unique_346(v_1296)
        v_1298 = torch.cat((v_1267, v_1297), dim=-1)
        v_1299 = self.pnnx_unique_347(v_1298)
        v_1300 = self.pnnx_unique_348(v_1299)
        v_1301 = self.pnnx_unique_349(v_1300)
        v_1302 = self.pnnx_unique_350(v_1301)
        v_1303 = (v_1267 + v_1302)
        v_1304 = self.pnnx_unique_351(v_1236)
        v_1305 = self.pnnx_unique_352(v_1236)
        v_1306 = self.pnnx_unique_353(v_1236)
        v_1307 = v_1304.view(1, 72, 120, 128)
        v_1308 = v_1305.view(1, 72, 120, 128)
        v_1309 = v_1306.view(1, 72, 120, 128)
        v_1310 = torch.permute(input=v_1307, dims=(0,3,1,2))
        v_1311 = model.gmflow.utils.split_feature(v_1310)
        v_1312 = torch.permute(input=v_1308, dims=(0,3,1,2))
        v_1313 = model.gmflow.utils.split_feature(v_1312)
        v_1314 = torch.permute(input=v_1309, dims=(0,3,1,2))
        v_1315 = model.gmflow.utils.split_feature(v_1314)
        v_1316 = torch.permute(input=v_1313, dims=(0,1,3,4,2))
        v_1317 = v_1316.view(1, 64, -1, 128)
        v_1318 = torch.permute(input=v_1311, dims=(0,1,3,4,2))
        v_1319 = v_1318.view(1, 64, -1, 128)
        v_1320 = torch.permute(input=v_1317, dims=(0,1,3,2))
        v_1321 = torch.matmul(input=v_1319, other=v_1320)
        v_1322 = (v_1321 / 11.313708)
        v_1323 = F.softmax(input=v_1322, dim=-1)
        v_1324 = torch.permute(input=v_1315, dims=(0,1,3,4,2))
        v_1325 = v_1324.view(1, 64, -1, 128)
        v_1326 = torch.matmul(input=v_1323, other=v_1325)
        v_1327 = v_1326.view(1, 64, 9, 15, 128)
        v_1328 = torch.permute(input=v_1327, dims=(0,1,4,2,3))
        v_1329 = model.gmflow.utils.merge_splits(v_1328)
        v_1330 = torch.permute(input=v_1329, dims=(0,2,3,1))
        v_1331 = v_1330.view(1, -1, 128)
        v_1332 = self.pnnx_unique_358(v_1331)
        v_1333 = self.pnnx_unique_359(v_1332)
        v_1334 = (v_1236 + v_1333)
        v_1335 = self.pnnx_unique_360(v_1334)
        v_1336 = self.pnnx_unique_361(v_1303)
        v_1337 = self.pnnx_unique_362(v_1303)
        v_1338 = v_1335.view(1, 72, 120, 128)
        v_1339 = v_1336.view(1, 72, 120, 128)
        v_1340 = v_1337.view(1, 72, 120, 128)
        v_1341 = torch.permute(input=v_1338, dims=(0,3,1,2))
        v_1342 = model.gmflow.utils.split_feature(v_1341)
        v_1343 = torch.permute(input=v_1339, dims=(0,3,1,2))
        v_1344 = model.gmflow.utils.split_feature(v_1343)
        v_1345 = torch.permute(input=v_1340, dims=(0,3,1,2))
        v_1346 = model.gmflow.utils.split_feature(v_1345)
        v_1347 = torch.permute(input=v_1344, dims=(0,1,3,4,2))
        v_1348 = v_1347.view(1, 64, -1, 128)
        v_1349 = torch.permute(input=v_1342, dims=(0,1,3,4,2))
        v_1350 = v_1349.view(1, 64, -1, 128)
        v_1351 = torch.permute(input=v_1348, dims=(0,1,3,2))
        v_1352 = torch.matmul(input=v_1350, other=v_1351)
        v_1353 = (v_1352 / 11.313708)
        v_1354 = F.softmax(input=v_1353, dim=-1)
        v_1355 = torch.permute(input=v_1346, dims=(0,1,3,4,2))
        v_1356 = v_1355.view(1, 64, -1, 128)
        v_1357 = torch.matmul(input=v_1354, other=v_1356)
        v_1358 = v_1357.view(1, 64, 9, 15, 128)
        v_1359 = torch.permute(input=v_1358, dims=(0,1,4,2,3))
        v_1360 = model.gmflow.utils.merge_splits(v_1359)
        v_1361 = torch.permute(input=v_1360, dims=(0,2,3,1))
        v_1362 = v_1361.view(1, -1, 128)
        v_1363 = self.pnnx_unique_367(v_1362)
        v_1364 = self.pnnx_unique_368(v_1363)
        v_1365 = torch.cat((v_1334, v_1364), dim=-1)
        v_1366 = self.pnnx_unique_369(v_1365)
        v_1367 = self.pnnx_unique_370(v_1366)
        v_1368 = self.pnnx_unique_371(v_1367)
        v_1369 = self.pnnx_unique_372(v_1368)
        v_1370 = (v_1334 + v_1369)
        v_1371 = self.pnnx_unique_373(v_1303)
        v_1372 = self.pnnx_unique_374(v_1303)
        v_1373 = self.pnnx_unique_375(v_1303)
        v_1374 = v_1371.view(1, 72, 120, 128)
        v_1375 = v_1372.view(1, 72, 120, 128)
        v_1376 = v_1373.view(1, 72, 120, 128)
        v_1377 = torch.permute(input=v_1374, dims=(0,3,1,2))
        v_1378 = model.gmflow.utils.split_feature(v_1377)
        v_1379 = torch.permute(input=v_1375, dims=(0,3,1,2))
        v_1380 = model.gmflow.utils.split_feature(v_1379)
        v_1381 = torch.permute(input=v_1376, dims=(0,3,1,2))
        v_1382 = model.gmflow.utils.split_feature(v_1381)
        v_1383 = torch.permute(input=v_1380, dims=(0,1,3,4,2))
        v_1384 = v_1383.view(1, 64, -1, 128)
        v_1385 = torch.permute(input=v_1378, dims=(0,1,3,4,2))
        v_1386 = v_1385.view(1, 64, -1, 128)
        v_1387 = torch.permute(input=v_1384, dims=(0,1,3,2))
        v_1388 = torch.matmul(input=v_1386, other=v_1387)
        v_1389 = (v_1388 / 11.313708)
        v_1390 = F.softmax(input=v_1389, dim=-1)
        v_1391 = torch.permute(input=v_1382, dims=(0,1,3,4,2))
        v_1392 = v_1391.view(1, 64, -1, 128)
        v_1393 = torch.matmul(input=v_1390, other=v_1392)
        v_1394 = v_1393.view(1, 64, 9, 15, 128)
        v_1395 = torch.permute(input=v_1394, dims=(0,1,4,2,3))
        v_1396 = model.gmflow.utils.merge_splits(v_1395)
        v_1397 = torch.permute(input=v_1396, dims=(0,2,3,1))
        v_1398 = v_1397.view(1, -1, 128)
        v_1399 = self.pnnx_unique_380(v_1398)
        v_1400 = self.pnnx_unique_381(v_1399)
        v_1401 = (v_1303 + v_1400)
        v_1402 = self.pnnx_unique_382(v_1401)
        v_1403 = self.pnnx_unique_383(v_1236)
        v_1404 = self.pnnx_unique_384(v_1236)
        v_1405 = v_1402.view(1, 72, 120, 128)
        v_1406 = v_1403.view(1, 72, 120, 128)
        v_1407 = v_1404.view(1, 72, 120, 128)
        v_1408 = torch.permute(input=v_1405, dims=(0,3,1,2))
        v_1409 = model.gmflow.utils.split_feature(v_1408)
        v_1410 = torch.permute(input=v_1406, dims=(0,3,1,2))
        v_1411 = model.gmflow.utils.split_feature(v_1410)
        v_1412 = torch.permute(input=v_1407, dims=(0,3,1,2))
        v_1413 = model.gmflow.utils.split_feature(v_1412)
        v_1414 = torch.permute(input=v_1411, dims=(0,1,3,4,2))
        v_1415 = v_1414.view(1, 64, -1, 128)
        v_1416 = torch.permute(input=v_1409, dims=(0,1,3,4,2))
        v_1417 = v_1416.view(1, 64, -1, 128)
        v_1418 = torch.permute(input=v_1415, dims=(0,1,3,2))
        v_1419 = torch.matmul(input=v_1417, other=v_1418)
        v_1420 = (v_1419 / 11.313708)
        v_1421 = F.softmax(input=v_1420, dim=-1)
        v_1422 = torch.permute(input=v_1413, dims=(0,1,3,4,2))
        v_1423 = v_1422.view(1, 64, -1, 128)
        v_1424 = torch.matmul(input=v_1421, other=v_1423)
        v_1425 = v_1424.view(1, 64, 9, 15, 128)
        v_1426 = torch.permute(input=v_1425, dims=(0,1,4,2,3))
        v_1427 = model.gmflow.utils.merge_splits(v_1426)
        v_1428 = torch.permute(input=v_1427, dims=(0,2,3,1))
        v_1429 = v_1428.view(1, -1, 128)
        v_1430 = self.pnnx_unique_389(v_1429)
        v_1431 = self.pnnx_unique_390(v_1430)
        v_1432 = torch.cat((v_1401, v_1431), dim=-1)
        v_1433 = self.pnnx_unique_391(v_1432)
        v_1434 = self.pnnx_unique_392(v_1433)
        v_1435 = self.pnnx_unique_393(v_1434)
        v_1436 = self.pnnx_unique_394(v_1435)
        v_1437 = (v_1401 + v_1436)
        v_1438 = self.pnnx_unique_395(v_1370)
        v_1439 = self.pnnx_unique_396(v_1370)
        v_1440 = self.pnnx_unique_397(v_1370)
        v_1441 = v_1438.view(1, 72, 120, 128)
        v_1442 = v_1439.view(1, 72, 120, 128)
        v_1443 = v_1440.view(1, 72, 120, 128)
        v_1444 = torch.permute(input=v_1441, dims=(0,3,1,2))
        v_1445 = model.gmflow.utils.split_feature(v_1444)
        v_1446 = torch.permute(input=v_1442, dims=(0,3,1,2))
        v_1447 = model.gmflow.utils.split_feature(v_1446)
        v_1448 = torch.permute(input=v_1443, dims=(0,3,1,2))
        v_1449 = model.gmflow.utils.split_feature(v_1448)
        v_1450 = torch.permute(input=v_1447, dims=(0,1,3,4,2))
        v_1451 = v_1450.view(1, 64, -1, 128)
        v_1452 = torch.permute(input=v_1445, dims=(0,1,3,4,2))
        v_1453 = v_1452.view(1, 64, -1, 128)
        v_1454 = torch.permute(input=v_1451, dims=(0,1,3,2))
        v_1455 = torch.matmul(input=v_1453, other=v_1454)
        v_1456 = (v_1455 / 11.313708)
        v_1457 = F.softmax(input=v_1456, dim=-1)
        v_1458 = torch.permute(input=v_1449, dims=(0,1,3,4,2))
        v_1459 = v_1458.view(1, 64, -1, 128)
        v_1460 = torch.matmul(input=v_1457, other=v_1459)
        v_1461 = v_1460.view(1, 64, 9, 15, 128)
        v_1462 = torch.permute(input=v_1461, dims=(0,1,4,2,3))
        v_1463 = model.gmflow.utils.merge_splits(v_1462)
        v_1464 = torch.permute(input=v_1463, dims=(0,2,3,1))
        v_1465 = v_1464.view(1, -1, 128)
        v_1466 = self.pnnx_unique_402(v_1465)
        v_1467 = self.pnnx_unique_403(v_1466)
        v_1468 = (v_1370 + v_1467)
        v_1469 = self.pnnx_unique_404(v_1468)
        v_1470 = self.pnnx_unique_405(v_1437)
        v_1471 = self.pnnx_unique_406(v_1437)
        v_1472 = v_1469.view(1, 72, 120, 128)
        v_1473 = v_1470.view(1, 72, 120, 128)
        v_1474 = v_1471.view(1, 72, 120, 128)
        v_1475 = torch.permute(input=v_1472, dims=(0,3,1,2))
        v_1476 = model.gmflow.utils.split_feature(v_1475)
        v_1477 = torch.permute(input=v_1473, dims=(0,3,1,2))
        v_1478 = model.gmflow.utils.split_feature(v_1477)
        v_1479 = torch.permute(input=v_1474, dims=(0,3,1,2))
        v_1480 = model.gmflow.utils.split_feature(v_1479)
        v_1481 = torch.permute(input=v_1478, dims=(0,1,3,4,2))
        v_1482 = v_1481.view(1, 64, -1, 128)
        v_1483 = torch.permute(input=v_1476, dims=(0,1,3,4,2))
        v_1484 = v_1483.view(1, 64, -1, 128)
        v_1485 = torch.permute(input=v_1482, dims=(0,1,3,2))
        v_1486 = torch.matmul(input=v_1484, other=v_1485)
        v_1487 = (v_1486 / 11.313708)
        v_1488 = F.softmax(input=v_1487, dim=-1)
        v_1489 = torch.permute(input=v_1480, dims=(0,1,3,4,2))
        v_1490 = v_1489.view(1, 64, -1, 128)
        v_1491 = torch.matmul(input=v_1488, other=v_1490)
        v_1492 = v_1491.view(1, 64, 9, 15, 128)
        v_1493 = torch.permute(input=v_1492, dims=(0,1,4,2,3))
        v_1494 = model.gmflow.utils.merge_splits(v_1493)
        v_1495 = torch.permute(input=v_1494, dims=(0,2,3,1))
        v_1496 = v_1495.view(1, -1, 128)
        v_1497 = self.pnnx_unique_411(v_1496)
        v_1498 = self.pnnx_unique_412(v_1497)
        v_1499 = torch.cat((v_1468, v_1498), dim=-1)
        v_1500 = self.pnnx_unique_413(v_1499)
        v_1501 = self.pnnx_unique_414(v_1500)
        v_1502 = self.pnnx_unique_415(v_1501)
        v_1503 = self.pnnx_unique_416(v_1502)
        v_1504 = (v_1468 + v_1503)
        v_1505 = self.pnnx_unique_417(v_1437)
        v_1506 = self.pnnx_unique_418(v_1437)
        v_1507 = self.pnnx_unique_419(v_1437)
        v_1508 = v_1505.view(1, 72, 120, 128)
        v_1509 = v_1506.view(1, 72, 120, 128)
        v_1510 = v_1507.view(1, 72, 120, 128)
        v_1511 = torch.permute(input=v_1508, dims=(0,3,1,2))
        v_1512 = model.gmflow.utils.split_feature(v_1511)
        v_1513 = torch.permute(input=v_1509, dims=(0,3,1,2))
        v_1514 = model.gmflow.utils.split_feature(v_1513)
        v_1515 = torch.permute(input=v_1510, dims=(0,3,1,2))
        v_1516 = model.gmflow.utils.split_feature(v_1515)
        v_1517 = torch.permute(input=v_1514, dims=(0,1,3,4,2))
        v_1518 = v_1517.view(1, 64, -1, 128)
        v_1519 = torch.permute(input=v_1512, dims=(0,1,3,4,2))
        v_1520 = v_1519.view(1, 64, -1, 128)
        v_1521 = torch.permute(input=v_1518, dims=(0,1,3,2))
        v_1522 = torch.matmul(input=v_1520, other=v_1521)
        v_1523 = (v_1522 / 11.313708)
        v_1524 = F.softmax(input=v_1523, dim=-1)
        v_1525 = torch.permute(input=v_1516, dims=(0,1,3,4,2))
        v_1526 = v_1525.view(1, 64, -1, 128)
        v_1527 = torch.matmul(input=v_1524, other=v_1526)
        v_1528 = v_1527.view(1, 64, 9, 15, 128)
        v_1529 = torch.permute(input=v_1528, dims=(0,1,4,2,3))
        v_1530 = model.gmflow.utils.merge_splits(v_1529)
        v_1531 = torch.permute(input=v_1530, dims=(0,2,3,1))
        v_1532 = v_1531.view(1, -1, 128)
        v_1533 = self.pnnx_unique_424(v_1532)
        v_1534 = self.pnnx_unique_425(v_1533)
        v_1535 = (v_1437 + v_1534)
        v_1536 = self.pnnx_unique_426(v_1535)
        v_1537 = self.pnnx_unique_427(v_1370)
        v_1538 = self.pnnx_unique_428(v_1370)
        v_1539 = v_1536.view(1, 72, 120, 128)
        v_1540 = v_1537.view(1, 72, 120, 128)
        v_1541 = v_1538.view(1, 72, 120, 128)
        v_1542 = torch.permute(input=v_1539, dims=(0,3,1,2))
        v_1543 = model.gmflow.utils.split_feature(v_1542)
        v_1544 = torch.permute(input=v_1540, dims=(0,3,1,2))
        v_1545 = model.gmflow.utils.split_feature(v_1544)
        v_1546 = torch.permute(input=v_1541, dims=(0,3,1,2))
        v_1547 = model.gmflow.utils.split_feature(v_1546)
        v_1548 = torch.permute(input=v_1545, dims=(0,1,3,4,2))
        v_1549 = v_1548.view(1, 64, -1, 128)
        v_1550 = torch.permute(input=v_1543, dims=(0,1,3,4,2))
        v_1551 = v_1550.view(1, 64, -1, 128)
        v_1552 = torch.permute(input=v_1549, dims=(0,1,3,2))
        v_1553 = torch.matmul(input=v_1551, other=v_1552)
        v_1554 = (v_1553 / 11.313708)
        v_1555 = F.softmax(input=v_1554, dim=-1)
        v_1556 = torch.permute(input=v_1547, dims=(0,1,3,4,2))
        v_1557 = v_1556.view(1, 64, -1, 128)
        v_1558 = torch.matmul(input=v_1555, other=v_1557)
        v_1559 = v_1558.view(1, 64, 9, 15, 128)
        v_1560 = torch.permute(input=v_1559, dims=(0,1,4,2,3))
        v_1561 = model.gmflow.utils.merge_splits(v_1560)
        v_1562 = torch.permute(input=v_1561, dims=(0,2,3,1))
        v_1563 = v_1562.view(1, -1, 128)
        v_1564 = self.pnnx_unique_433(v_1563)
        v_1565 = self.pnnx_unique_434(v_1564)
        v_1566 = torch.cat((v_1535, v_1565), dim=-1)
        v_1567 = self.pnnx_unique_435(v_1566)
        v_1568 = self.pnnx_unique_436(v_1567)
        v_1569 = self.pnnx_unique_437(v_1568)
        v_1570 = self.pnnx_unique_438(v_1569)
        v_1571 = (v_1535 + v_1570)
        v_1572 = self.pnnx_unique_439(v_1504)
        v_1573 = self.pnnx_unique_440(v_1504)
        v_1574 = self.pnnx_unique_441(v_1504)
        v_1575 = v_1572.view(1, 72, 120, 128)
        v_1576 = v_1573.view(1, 72, 120, 128)
        v_1577 = v_1574.view(1, 72, 120, 128)
        v_1578 = torch.permute(input=v_1575, dims=(0,3,1,2))
        v_1579 = model.gmflow.utils.split_feature(v_1578)
        v_1580 = torch.permute(input=v_1576, dims=(0,3,1,2))
        v_1581 = model.gmflow.utils.split_feature(v_1580)
        v_1582 = torch.permute(input=v_1577, dims=(0,3,1,2))
        v_1583 = model.gmflow.utils.split_feature(v_1582)
        v_1584 = torch.permute(input=v_1581, dims=(0,1,3,4,2))
        v_1585 = v_1584.view(1, 64, -1, 128)
        v_1586 = torch.permute(input=v_1579, dims=(0,1,3,4,2))
        v_1587 = v_1586.view(1, 64, -1, 128)
        v_1588 = torch.permute(input=v_1585, dims=(0,1,3,2))
        v_1589 = torch.matmul(input=v_1587, other=v_1588)
        v_1590 = (v_1589 / 11.313708)
        v_1591 = F.softmax(input=v_1590, dim=-1)
        v_1592 = torch.permute(input=v_1583, dims=(0,1,3,4,2))
        v_1593 = v_1592.view(1, 64, -1, 128)
        v_1594 = torch.matmul(input=v_1591, other=v_1593)
        v_1595 = v_1594.view(1, 64, 9, 15, 128)
        v_1596 = torch.permute(input=v_1595, dims=(0,1,4,2,3))
        v_1597 = model.gmflow.utils.merge_splits(v_1596)
        v_1598 = torch.permute(input=v_1597, dims=(0,2,3,1))
        v_1599 = v_1598.view(1, -1, 128)
        v_1600 = self.pnnx_unique_446(v_1599)
        v_1601 = self.pnnx_unique_447(v_1600)
        v_1602 = (v_1504 + v_1601)
        v_1603 = self.pnnx_unique_448(v_1602)
        v_1604 = self.pnnx_unique_449(v_1571)
        v_1605 = self.pnnx_unique_450(v_1571)
        v_1606 = v_1603.view(1, 72, 120, 128)
        v_1607 = v_1604.view(1, 72, 120, 128)
        v_1608 = v_1605.view(1, 72, 120, 128)
        v_1609 = torch.permute(input=v_1606, dims=(0,3,1,2))
        v_1610 = model.gmflow.utils.split_feature(v_1609)
        v_1611 = torch.permute(input=v_1607, dims=(0,3,1,2))
        v_1612 = model.gmflow.utils.split_feature(v_1611)
        v_1613 = torch.permute(input=v_1608, dims=(0,3,1,2))
        v_1614 = model.gmflow.utils.split_feature(v_1613)
        v_1615 = torch.permute(input=v_1612, dims=(0,1,3,4,2))
        v_1616 = v_1615.view(1, 64, -1, 128)
        v_1617 = torch.permute(input=v_1610, dims=(0,1,3,4,2))
        v_1618 = v_1617.view(1, 64, -1, 128)
        v_1619 = torch.permute(input=v_1616, dims=(0,1,3,2))
        v_1620 = torch.matmul(input=v_1618, other=v_1619)
        v_1621 = (v_1620 / 11.313708)
        v_1622 = F.softmax(input=v_1621, dim=-1)
        v_1623 = torch.permute(input=v_1614, dims=(0,1,3,4,2))
        v_1624 = v_1623.view(1, 64, -1, 128)
        v_1625 = torch.matmul(input=v_1622, other=v_1624)
        v_1626 = v_1625.view(1, 64, 9, 15, 128)
        v_1627 = torch.permute(input=v_1626, dims=(0,1,4,2,3))
        v_1628 = model.gmflow.utils.merge_splits(v_1627)
        v_1629 = torch.permute(input=v_1628, dims=(0,2,3,1))
        v_1630 = v_1629.view(1, -1, 128)
        v_1631 = self.pnnx_unique_455(v_1630)
        v_1632 = self.pnnx_unique_456(v_1631)
        v_1633 = torch.cat((v_1602, v_1632), dim=-1)
        v_1634 = self.pnnx_unique_457(v_1633)
        v_1635 = self.pnnx_unique_458(v_1634)
        v_1636 = self.pnnx_unique_459(v_1635)
        v_1637 = self.pnnx_unique_460(v_1636)
        v_1638 = (v_1602 + v_1637)
        v_1639 = self.pnnx_unique_461(v_1571)
        v_1640 = self.pnnx_unique_462(v_1571)
        v_1641 = self.pnnx_unique_463(v_1571)
        v_1642 = v_1639.view(1, 72, 120, 128)
        v_1643 = v_1640.view(1, 72, 120, 128)
        v_1644 = v_1641.view(1, 72, 120, 128)
        v_1645 = torch.permute(input=v_1642, dims=(0,3,1,2))
        v_1646 = model.gmflow.utils.split_feature(v_1645)
        v_1647 = torch.permute(input=v_1643, dims=(0,3,1,2))
        v_1648 = model.gmflow.utils.split_feature(v_1647)
        v_1649 = torch.permute(input=v_1644, dims=(0,3,1,2))
        v_1650 = model.gmflow.utils.split_feature(v_1649)
        v_1651 = torch.permute(input=v_1648, dims=(0,1,3,4,2))
        v_1652 = v_1651.view(1, 64, -1, 128)
        v_1653 = torch.permute(input=v_1646, dims=(0,1,3,4,2))
        v_1654 = v_1653.view(1, 64, -1, 128)
        v_1655 = torch.permute(input=v_1652, dims=(0,1,3,2))
        v_1656 = torch.matmul(input=v_1654, other=v_1655)
        v_1657 = (v_1656 / 11.313708)
        v_1658 = F.softmax(input=v_1657, dim=-1)
        v_1659 = torch.permute(input=v_1650, dims=(0,1,3,4,2))
        v_1660 = v_1659.view(1, 64, -1, 128)
        v_1661 = torch.matmul(input=v_1658, other=v_1660)
        v_1662 = v_1661.view(1, 64, 9, 15, 128)
        v_1663 = torch.permute(input=v_1662, dims=(0,1,4,2,3))
        v_1664 = model.gmflow.utils.merge_splits(v_1663)
        v_1665 = torch.permute(input=v_1664, dims=(0,2,3,1))
        v_1666 = v_1665.view(1, -1, 128)
        v_1667 = self.pnnx_unique_468(v_1666)
        v_1668 = self.pnnx_unique_469(v_1667)
        v_1669 = (v_1571 + v_1668)
        v_1670 = self.pnnx_unique_470(v_1669)
        v_1671 = self.pnnx_unique_471(v_1504)
        v_1672 = self.pnnx_unique_472(v_1504)
        v_1673 = v_1670.view(1, 72, 120, 128)
        v_1674 = v_1671.view(1, 72, 120, 128)
        v_1675 = v_1672.view(1, 72, 120, 128)
        v_1676 = torch.permute(input=v_1673, dims=(0,3,1,2))
        v_1677 = model.gmflow.utils.split_feature(v_1676)
        v_1678 = torch.permute(input=v_1674, dims=(0,3,1,2))
        v_1679 = model.gmflow.utils.split_feature(v_1678)
        v_1680 = torch.permute(input=v_1675, dims=(0,3,1,2))
        v_1681 = model.gmflow.utils.split_feature(v_1680)
        v_1682 = torch.permute(input=v_1679, dims=(0,1,3,4,2))
        v_1683 = v_1682.view(1, 64, -1, 128)
        v_1684 = torch.permute(input=v_1677, dims=(0,1,3,4,2))
        v_1685 = v_1684.view(1, 64, -1, 128)
        v_1686 = torch.permute(input=v_1683, dims=(0,1,3,2))
        v_1687 = torch.matmul(input=v_1685, other=v_1686)
        v_1688 = (v_1687 / 11.313708)
        v_1689 = F.softmax(input=v_1688, dim=-1)
        v_1690 = torch.permute(input=v_1681, dims=(0,1,3,4,2))
        v_1691 = v_1690.view(1, 64, -1, 128)
        v_1692 = torch.matmul(input=v_1689, other=v_1691)
        v_1693 = v_1692.view(1, 64, 9, 15, 128)
        v_1694 = torch.permute(input=v_1693, dims=(0,1,4,2,3))
        v_1695 = model.gmflow.utils.merge_splits(v_1694)
        v_1696 = torch.permute(input=v_1695, dims=(0,2,3,1))
        v_1697 = v_1696.view(1, -1, 128)
        v_1698 = self.pnnx_unique_477(v_1697)
        v_1699 = self.pnnx_unique_478(v_1698)
        v_1700 = torch.cat((v_1669, v_1699), dim=-1)
        v_1701 = self.pnnx_unique_479(v_1700)
        v_1702 = self.pnnx_unique_480(v_1701)
        v_1703 = self.pnnx_unique_481(v_1702)
        v_1704 = self.pnnx_unique_482(v_1703)
        v_1705 = (v_1669 + v_1704)
        v_1706 = self.pnnx_unique_483(v_1638)
        v_1707 = self.pnnx_unique_484(v_1638)
        v_1708 = self.pnnx_unique_485(v_1638)
        v_1709 = v_1706.view(1, 72, 120, 128)
        v_1710 = v_1707.view(1, 72, 120, 128)
        v_1711 = v_1708.view(1, 72, 120, 128)
        v_1712 = torch.permute(input=v_1709, dims=(0,3,1,2))
        v_1713 = model.gmflow.utils.split_feature(v_1712)
        v_1714 = torch.permute(input=v_1710, dims=(0,3,1,2))
        v_1715 = model.gmflow.utils.split_feature(v_1714)
        v_1716 = torch.permute(input=v_1711, dims=(0,3,1,2))
        v_1717 = model.gmflow.utils.split_feature(v_1716)
        v_1718 = torch.permute(input=v_1715, dims=(0,1,3,4,2))
        v_1719 = v_1718.view(1, 64, -1, 128)
        v_1720 = torch.permute(input=v_1713, dims=(0,1,3,4,2))
        v_1721 = v_1720.view(1, 64, -1, 128)
        v_1722 = torch.permute(input=v_1719, dims=(0,1,3,2))
        v_1723 = torch.matmul(input=v_1721, other=v_1722)
        v_1724 = (v_1723 / 11.313708)
        v_1725 = F.softmax(input=v_1724, dim=-1)
        v_1726 = torch.permute(input=v_1717, dims=(0,1,3,4,2))
        v_1727 = v_1726.view(1, 64, -1, 128)
        v_1728 = torch.matmul(input=v_1725, other=v_1727)
        v_1729 = v_1728.view(1, 64, 9, 15, 128)
        v_1730 = torch.permute(input=v_1729, dims=(0,1,4,2,3))
        v_1731 = model.gmflow.utils.merge_splits(v_1730)
        v_1732 = torch.permute(input=v_1731, dims=(0,2,3,1))
        v_1733 = v_1732.view(1, -1, 128)
        v_1734 = self.pnnx_unique_490(v_1733)
        v_1735 = self.pnnx_unique_491(v_1734)
        v_1736 = (v_1638 + v_1735)
        v_1737 = self.pnnx_unique_492(v_1736)
        v_1738 = self.pnnx_unique_493(v_1705)
        v_1739 = self.pnnx_unique_494(v_1705)
        v_1740 = v_1737.view(1, 72, 120, 128)
        v_1741 = v_1738.view(1, 72, 120, 128)
        v_1742 = v_1739.view(1, 72, 120, 128)
        v_1743 = torch.permute(input=v_1740, dims=(0,3,1,2))
        v_1744 = model.gmflow.utils.split_feature(v_1743)
        v_1745 = torch.permute(input=v_1741, dims=(0,3,1,2))
        v_1746 = model.gmflow.utils.split_feature(v_1745)
        v_1747 = torch.permute(input=v_1742, dims=(0,3,1,2))
        v_1748 = model.gmflow.utils.split_feature(v_1747)
        v_1749 = torch.permute(input=v_1746, dims=(0,1,3,4,2))
        v_1750 = v_1749.view(1, 64, -1, 128)
        v_1751 = torch.permute(input=v_1744, dims=(0,1,3,4,2))
        v_1752 = v_1751.view(1, 64, -1, 128)
        v_1753 = torch.permute(input=v_1750, dims=(0,1,3,2))
        v_1754 = torch.matmul(input=v_1752, other=v_1753)
        v_1755 = (v_1754 / 11.313708)
        v_1756 = F.softmax(input=v_1755, dim=-1)
        v_1757 = torch.permute(input=v_1748, dims=(0,1,3,4,2))
        v_1758 = v_1757.view(1, 64, -1, 128)
        v_1759 = torch.matmul(input=v_1756, other=v_1758)
        v_1760 = v_1759.view(1, 64, 9, 15, 128)
        v_1761 = torch.permute(input=v_1760, dims=(0,1,4,2,3))
        v_1762 = model.gmflow.utils.merge_splits(v_1761)
        v_1763 = torch.permute(input=v_1762, dims=(0,2,3,1))
        v_1764 = v_1763.view(1, -1, 128)
        v_1765 = self.pnnx_unique_499(v_1764)
        v_1766 = self.pnnx_unique_500(v_1765)
        v_1767 = torch.cat((v_1736, v_1766), dim=-1)
        v_1768 = self.pnnx_unique_501(v_1767)
        v_1769 = self.pnnx_unique_502(v_1768)
        v_1770 = self.pnnx_unique_503(v_1769)
        v_1771 = self.pnnx_unique_504(v_1770)
        v_1772 = (v_1736 + v_1771)
        v_1773 = self.pnnx_unique_505(v_1705)
        v_1774 = self.pnnx_unique_506(v_1705)
        v_1775 = self.pnnx_unique_507(v_1705)
        v_1776 = v_1773.view(1, 72, 120, 128)
        v_1777 = v_1774.view(1, 72, 120, 128)
        v_1778 = v_1775.view(1, 72, 120, 128)
        v_1779 = torch.permute(input=v_1776, dims=(0,3,1,2))
        v_1780 = model.gmflow.utils.split_feature(v_1779)
        v_1781 = torch.permute(input=v_1777, dims=(0,3,1,2))
        v_1782 = model.gmflow.utils.split_feature(v_1781)
        v_1783 = torch.permute(input=v_1778, dims=(0,3,1,2))
        v_1784 = model.gmflow.utils.split_feature(v_1783)
        v_1785 = torch.permute(input=v_1782, dims=(0,1,3,4,2))
        v_1786 = v_1785.view(1, 64, -1, 128)
        v_1787 = torch.permute(input=v_1780, dims=(0,1,3,4,2))
        v_1788 = v_1787.view(1, 64, -1, 128)
        v_1789 = torch.permute(input=v_1786, dims=(0,1,3,2))
        v_1790 = torch.matmul(input=v_1788, other=v_1789)
        v_1791 = (v_1790 / 11.313708)
        v_1792 = F.softmax(input=v_1791, dim=-1)
        v_1793 = torch.permute(input=v_1784, dims=(0,1,3,4,2))
        v_1794 = v_1793.view(1, 64, -1, 128)
        v_1795 = torch.matmul(input=v_1792, other=v_1794)
        v_1796 = v_1795.view(1, 64, 9, 15, 128)
        v_1797 = torch.permute(input=v_1796, dims=(0,1,4,2,3))
        v_1798 = model.gmflow.utils.merge_splits(v_1797)
        v_1799 = torch.permute(input=v_1798, dims=(0,2,3,1))
        v_1800 = v_1799.view(1, -1, 128)
        v_1801 = self.pnnx_unique_512(v_1800)
        v_1802 = self.pnnx_unique_513(v_1801)
        v_1803 = (v_1705 + v_1802)
        v_1804 = self.pnnx_unique_514(v_1803)
        v_1805 = self.pnnx_unique_515(v_1638)
        v_1806 = self.pnnx_unique_516(v_1638)
        v_1807 = v_1804.view(1, 72, 120, 128)
        v_1808 = v_1805.view(1, 72, 120, 128)
        v_1809 = v_1806.view(1, 72, 120, 128)
        v_1810 = torch.permute(input=v_1807, dims=(0,3,1,2))
        v_1811 = model.gmflow.utils.split_feature(v_1810)
        v_1812 = torch.permute(input=v_1808, dims=(0,3,1,2))
        v_1813 = model.gmflow.utils.split_feature(v_1812)
        v_1814 = torch.permute(input=v_1809, dims=(0,3,1,2))
        v_1815 = model.gmflow.utils.split_feature(v_1814)
        v_1816 = torch.permute(input=v_1813, dims=(0,1,3,4,2))
        v_1817 = v_1816.view(1, 64, -1, 128)
        v_1818 = torch.permute(input=v_1811, dims=(0,1,3,4,2))
        v_1819 = v_1818.view(1, 64, -1, 128)
        v_1820 = torch.permute(input=v_1817, dims=(0,1,3,2))
        v_1821 = torch.matmul(input=v_1819, other=v_1820)
        v_1822 = (v_1821 / 11.313708)
        v_1823 = F.softmax(input=v_1822, dim=-1)
        v_1824 = torch.permute(input=v_1815, dims=(0,1,3,4,2))
        v_1825 = v_1824.view(1, 64, -1, 128)
        v_1826 = torch.matmul(input=v_1823, other=v_1825)
        v_1827 = v_1826.view(1, 64, 9, 15, 128)
        v_1828 = torch.permute(input=v_1827, dims=(0,1,4,2,3))
        v_1829 = model.gmflow.utils.merge_splits(v_1828)
        v_1830 = torch.permute(input=v_1829, dims=(0,2,3,1))
        v_1831 = v_1830.view(1, -1, 128)
        v_1832 = self.pnnx_unique_521(v_1831)
        v_1833 = self.pnnx_unique_522(v_1832)
        v_1834 = torch.cat((v_1803, v_1833), dim=-1)
        v_1835 = self.pnnx_unique_523(v_1834)
        v_1836 = self.pnnx_unique_524(v_1835)
        v_1837 = self.pnnx_unique_525(v_1836)
        v_1838 = self.pnnx_unique_526(v_1837)
        v_1839 = (v_1803 + v_1838)
        v_1840 = v_1772.view(1, 72, 120, 128)
        v_1841 = v_1839.view(1, 72, 120, 128)
        v_1842 = torch.permute(input=v_1841, dims=(0,3,1,2))
        v_1843 = v_1842.contiguous(memory_format=torch.contiguous_format)
        v_1844 = torch.permute(input=v_1840, dims=(0,3,1,2))
        v_1845 = v_1844.contiguous(memory_format=torch.contiguous_format)
        v_1846 = self.pnnx_fold_coords_init_2_pnnx_fold_coords_init_2
        v_1847 = self.pnnx_fold_sample_coords_12_pnnx_fold_sample_coords_12
        v_1848 = self.pnnx_fold_grid_10_pnnx_fold_grid_10
        v_1849 = F.grid_sample(input=v_1843, grid=v_1848, align_corners=True, mode='bilinear', padding_mode='zeros')
        v_1850 = torch.permute(input=v_1845, dims=(0,2,3,1))
        v_1851 = v_1850.view(1, 8640, 1, 128)
        v_1852 = torch.permute(input=v_1849, dims=(0,2,1,3))
        v_1853 = torch.matmul(input=v_1851, other=v_1852)
        v_1854 = v_1853.view(1, 8640, -1)
        v_1855 = (v_1854 / 11.313708)
        v_1856 = F.softmax(input=v_1855, dim=-1)
        v_1857 = torch.unsqueeze(input=v_1856, dim=-2)
        v_1858 = torch.matmul(input=v_1857, other=v_1847)
        v_1859 = v_1858.reshape(1, 72, 120, 2)
        v_1860 = torch.permute(input=v_1859, dims=(0,3,1,2))
        v_1861 = (v_1011 + (v_1860 - v_1846))
        v_1862 = v_1845.view(1, 128, -1)
        v_1863 = torch.permute(input=v_1862, dims=(0,2,1))
        v_1864 = self.pnnx_unique_527(v_1863)
        v_1865 = self.pnnx_unique_528(v_1863)
        v_1866 = torch.permute(input=v_1865, dims=(0,2,1))
        v_1867 = v_1866.reshape(1, 128, 72, 120)
        v_1868 = F.unfold(input=v_1867, dilation=(1,1), kernel_size=(3,3), padding=(1,1), stride=(1,1))
        v_1869 = v_1868.view(1, 128, 9, 72, 120)
        v_1870 = F.unfold(input=v_1861, dilation=(1,1), kernel_size=(3,3), padding=(1,1), stride=(1,1))
        v_1871 = v_1870.view(1, 2, 9, 72, 120)
        v_1872 = torch.permute(input=v_1869, dims=(0,3,4,1,2))
        v_1873 = v_1872.reshape(1, 8640, 128, 9)
        v_1874 = v_1864.reshape(1, 8640, 1, 128)
        v_1875 = torch.matmul(input=v_1874, other=v_1873)
        v_1876 = (v_1875 / 11.313708)
        v_1877 = F.softmax(input=v_1876, dim=-1)
        v_1878 = torch.permute(input=v_1871, dims=(0,3,4,2,1))
        v_1879 = v_1878.reshape(1, 8640, 9, 2)
        v_1880 = torch.matmul(input=v_1877, other=v_1879)
        v_1881 = v_1880.view(1, 72, 120, 2)
        v_1882 = torch.permute(input=v_1881, dims=(0,3,1,2))
        v_1883 = v_1882.contiguous(memory_format=torch.contiguous_format)
        v_1884 = torch.cat((v_1883, v_1845), dim=1)
        v_1885 = self.flownet_upsampler_0(v_1884)
        v_1886 = self.flownet_upsampler_1(v_1885)
        v_1887 = self.flownet_upsampler_2(v_1886)
        v_1888 = v_1887.view(1, 1, 9, -1)
        v_1889 = F.softmax(input=v_1888, dim=2)
        v_1890 = v_1889.repeat(1, 2, 1, 1)
        v_1891 = (v_1883 * 4)
        v_1892 = F.unfold(input=v_1891, dilation=(1,1), kernel_size=(3,3), padding=(1,1), stride=(1,1))
        v_1893 = v_1892.view(1, 18, 1, 8640)
        v_1894 = v_1893.repeat(1, 1, 16, 1)
        v_1895 = v_1894.view(1, 18, 16, 72, 120)
        v_1896 = v_1890.view(1, 18, 16, 72, 120)
        v_1897 = (v_1896 * v_1895)
        v_1898 = v_1897.view(1, 2, 9, -1)
        v_1899 = torch.sum(input=v_1898, dim=(2,), keepdim=False)
        v_1900 = v_1899.view(1, 2, 16, 8640)
        v_1901 = model.gmflow.utils.convex_upsampling(v_1883, v_1900)
        v_1902 = self.conv2d_4(v_159)
        v_1903 = model.gmflow.utils.split_feature(v_1902)
        v_1904 = self.conv2d_6(v_102)
        v_1905 = model.gmflow.utils.split_feature(v_1904)
        v_1906 = self.pnnx_fold_position_1_pnnx_fold_position_1
        v_1907 = self.pnnx_fold_position_1_1_pnnx_fold_position_1
        v_1908 = (v_1903 + v_1906)
        v_1909 = (v_1905 + v_1907)
        v_1910 = model.gmflow.utils.merge_splits(v_1908)
        v_1911 = model.gmflow.utils.merge_splits(v_1909)
        v_1912 = torch.flatten(input=v_1910, end_dim=-1, start_dim=2)
        v_1913 = torch.flatten(input=v_1911, end_dim=-1, start_dim=2)
        v_1914 = torch.permute(input=v_1912, dims=(0,2,1))
        v_1915 = self.pnnx_unique_636(v_1914)
        v_1916 = self.pnnx_unique_637(v_1914)
        v_1917 = self.pnnx_unique_638(v_1914)
        v_1918 = v_1915.view(1, 36, 60, 128)
        v_1919 = v_1916.view(1, 36, 60, 128)
        v_1920 = v_1917.view(1, 36, 60, 128)
        v_1921 = torch.permute(input=v_1918, dims=(0,3,1,2))
        v_1922 = model.gmflow.utils.split_feature(v_1921)
        v_1923 = torch.permute(input=v_1919, dims=(0,3,1,2))
        v_1924 = model.gmflow.utils.split_feature(v_1923)
        v_1925 = torch.permute(input=v_1920, dims=(0,3,1,2))
        v_1926 = model.gmflow.utils.split_feature(v_1925)
        v_1927 = torch.permute(input=v_1924, dims=(0,1,3,4,2))
        v_1928 = v_1927.view(1, 4, -1, 128)
        v_1929 = torch.permute(input=v_1922, dims=(0,1,3,4,2))
        v_1930 = v_1929.view(1, 4, -1, 128)
        v_1931 = torch.permute(input=v_1928, dims=(0,1,3,2))
        v_1932 = torch.matmul(input=v_1930, other=v_1931)
        v_1933 = (v_1932 / 11.313708)
        v_1934 = F.softmax(input=v_1933, dim=-1)
        v_1935 = torch.permute(input=v_1926, dims=(0,1,3,4,2))
        v_1936 = v_1935.view(1, 4, -1, 128)
        v_1937 = torch.matmul(input=v_1934, other=v_1936)
        v_1938 = v_1937.view(1, 4, 18, 30, 128)
        v_1939 = torch.permute(input=v_1938, dims=(0,1,4,2,3))
        v_1940 = model.gmflow.utils.merge_splits(v_1939)
        v_1941 = torch.permute(input=v_1940, dims=(0,2,3,1))
        v_1942 = v_1941.view(1, -1, 128)
        v_1943 = self.pnnx_unique_643(v_1942)
        v_1944 = self.pnnx_unique_644(v_1943)
        v_1945 = (v_1914 + v_1944)
        v_1946 = self.pnnx_unique_645(v_1945)
        v_1947 = torch.permute(input=v_1913, dims=(0,2,1))
        v_1948 = self.pnnx_unique_646(v_1947)
        v_1949 = self.pnnx_unique_647(v_1947)
        v_1950 = v_1946.view(1, 36, 60, 128)
        v_1951 = v_1948.view(1, 36, 60, 128)
        v_1952 = v_1949.view(1, 36, 60, 128)
        v_1953 = torch.permute(input=v_1950, dims=(0,3,1,2))
        v_1954 = model.gmflow.utils.split_feature(v_1953)
        v_1955 = torch.permute(input=v_1951, dims=(0,3,1,2))
        v_1956 = model.gmflow.utils.split_feature(v_1955)
        v_1957 = torch.permute(input=v_1952, dims=(0,3,1,2))
        v_1958 = model.gmflow.utils.split_feature(v_1957)
        v_1959 = torch.permute(input=v_1956, dims=(0,1,3,4,2))
        v_1960 = v_1959.view(1, 4, -1, 128)
        v_1961 = torch.permute(input=v_1954, dims=(0,1,3,4,2))
        v_1962 = v_1961.view(1, 4, -1, 128)
        v_1963 = torch.permute(input=v_1960, dims=(0,1,3,2))
        v_1964 = torch.matmul(input=v_1962, other=v_1963)
        v_1965 = (v_1964 / 11.313708)
        v_1966 = F.softmax(input=v_1965, dim=-1)
        v_1967 = torch.permute(input=v_1958, dims=(0,1,3,4,2))
        v_1968 = v_1967.view(1, 4, -1, 128)
        v_1969 = torch.matmul(input=v_1966, other=v_1968)
        v_1970 = v_1969.view(1, 4, 18, 30, 128)
        v_1971 = torch.permute(input=v_1970, dims=(0,1,4,2,3))
        v_1972 = model.gmflow.utils.merge_splits(v_1971)
        v_1973 = torch.permute(input=v_1972, dims=(0,2,3,1))
        v_1974 = v_1973.view(1, -1, 128)
        v_1975 = self.pnnx_unique_652(v_1974)
        v_1976 = self.pnnx_unique_653(v_1975)
        v_1977 = torch.cat((v_1945, v_1976), dim=-1)
        v_1978 = self.pnnx_unique_654(v_1977)
        v_1979 = self.pnnx_unique_655(v_1978)
        v_1980 = self.pnnx_unique_656(v_1979)
        v_1981 = self.pnnx_unique_657(v_1980)
        v_1982 = (v_1945 + v_1981)
        v_1983 = self.pnnx_unique_658(v_1947)
        v_1984 = self.pnnx_unique_659(v_1947)
        v_1985 = self.pnnx_unique_660(v_1947)
        v_1986 = v_1983.view(1, 36, 60, 128)
        v_1987 = v_1984.view(1, 36, 60, 128)
        v_1988 = v_1985.view(1, 36, 60, 128)
        v_1989 = torch.permute(input=v_1986, dims=(0,3,1,2))
        v_1990 = model.gmflow.utils.split_feature(v_1989)
        v_1991 = torch.permute(input=v_1987, dims=(0,3,1,2))
        v_1992 = model.gmflow.utils.split_feature(v_1991)
        v_1993 = torch.permute(input=v_1988, dims=(0,3,1,2))
        v_1994 = model.gmflow.utils.split_feature(v_1993)
        v_1995 = torch.permute(input=v_1992, dims=(0,1,3,4,2))
        v_1996 = v_1995.view(1, 4, -1, 128)
        v_1997 = torch.permute(input=v_1990, dims=(0,1,3,4,2))
        v_1998 = v_1997.view(1, 4, -1, 128)
        v_1999 = torch.permute(input=v_1996, dims=(0,1,3,2))
        v_2000 = torch.matmul(input=v_1998, other=v_1999)
        v_2001 = (v_2000 / 11.313708)
        v_2002 = F.softmax(input=v_2001, dim=-1)
        v_2003 = torch.permute(input=v_1994, dims=(0,1,3,4,2))
        v_2004 = v_2003.view(1, 4, -1, 128)
        v_2005 = torch.matmul(input=v_2002, other=v_2004)
        v_2006 = v_2005.view(1, 4, 18, 30, 128)
        v_2007 = torch.permute(input=v_2006, dims=(0,1,4,2,3))
        v_2008 = model.gmflow.utils.merge_splits(v_2007)
        v_2009 = torch.permute(input=v_2008, dims=(0,2,3,1))
        v_2010 = v_2009.view(1, -1, 128)
        v_2011 = self.pnnx_unique_665(v_2010)
        v_2012 = self.pnnx_unique_666(v_2011)
        v_2013 = (v_1947 + v_2012)
        v_2014 = self.pnnx_unique_667(v_2013)
        v_2015 = self.pnnx_unique_668(v_1914)
        v_2016 = self.pnnx_unique_669(v_1914)
        v_2017 = v_2014.view(1, 36, 60, 128)
        v_2018 = v_2015.view(1, 36, 60, 128)
        v_2019 = v_2016.view(1, 36, 60, 128)
        v_2020 = torch.permute(input=v_2017, dims=(0,3,1,2))
        v_2021 = model.gmflow.utils.split_feature(v_2020)
        v_2022 = torch.permute(input=v_2018, dims=(0,3,1,2))
        v_2023 = model.gmflow.utils.split_feature(v_2022)
        v_2024 = torch.permute(input=v_2019, dims=(0,3,1,2))
        v_2025 = model.gmflow.utils.split_feature(v_2024)
        v_2026 = torch.permute(input=v_2023, dims=(0,1,3,4,2))
        v_2027 = v_2026.view(1, 4, -1, 128)
        v_2028 = torch.permute(input=v_2021, dims=(0,1,3,4,2))
        v_2029 = v_2028.view(1, 4, -1, 128)
        v_2030 = torch.permute(input=v_2027, dims=(0,1,3,2))
        v_2031 = torch.matmul(input=v_2029, other=v_2030)
        v_2032 = (v_2031 / 11.313708)
        v_2033 = F.softmax(input=v_2032, dim=-1)
        v_2034 = torch.permute(input=v_2025, dims=(0,1,3,4,2))
        v_2035 = v_2034.view(1, 4, -1, 128)
        v_2036 = torch.matmul(input=v_2033, other=v_2035)
        v_2037 = v_2036.view(1, 4, 18, 30, 128)
        v_2038 = torch.permute(input=v_2037, dims=(0,1,4,2,3))
        v_2039 = model.gmflow.utils.merge_splits(v_2038)
        v_2040 = torch.permute(input=v_2039, dims=(0,2,3,1))
        v_2041 = v_2040.view(1, -1, 128)
        v_2042 = self.pnnx_unique_674(v_2041)
        v_2043 = self.pnnx_unique_675(v_2042)
        v_2044 = torch.cat((v_2013, v_2043), dim=-1)
        v_2045 = self.pnnx_unique_676(v_2044)
        v_2046 = self.pnnx_unique_677(v_2045)
        v_2047 = self.pnnx_unique_678(v_2046)
        v_2048 = self.pnnx_unique_679(v_2047)
        v_2049 = (v_2013 + v_2048)
        v_2050 = self.pnnx_unique_680(v_1982)
        v_2051 = self.pnnx_unique_681(v_1982)
        v_2052 = self.pnnx_unique_682(v_1982)
        v_2053 = v_2050.view(1, 36, 60, 128)
        v_2054 = v_2051.view(1, 36, 60, 128)
        v_2055 = v_2052.view(1, 36, 60, 128)
        v_2056 = torch.permute(input=v_2053, dims=(0,3,1,2))
        v_2057 = model.gmflow.utils.split_feature(v_2056)
        v_2058 = torch.permute(input=v_2054, dims=(0,3,1,2))
        v_2059 = model.gmflow.utils.split_feature(v_2058)
        v_2060 = torch.permute(input=v_2055, dims=(0,3,1,2))
        v_2061 = model.gmflow.utils.split_feature(v_2060)
        v_2062 = torch.permute(input=v_2059, dims=(0,1,3,4,2))
        v_2063 = v_2062.view(1, 4, -1, 128)
        v_2064 = torch.permute(input=v_2057, dims=(0,1,3,4,2))
        v_2065 = v_2064.view(1, 4, -1, 128)
        v_2066 = torch.permute(input=v_2063, dims=(0,1,3,2))
        v_2067 = torch.matmul(input=v_2065, other=v_2066)
        v_2068 = (v_2067 / 11.313708)
        v_2069 = F.softmax(input=v_2068, dim=-1)
        v_2070 = torch.permute(input=v_2061, dims=(0,1,3,4,2))
        v_2071 = v_2070.view(1, 4, -1, 128)
        v_2072 = torch.matmul(input=v_2069, other=v_2071)
        v_2073 = v_2072.view(1, 4, 18, 30, 128)
        v_2074 = torch.permute(input=v_2073, dims=(0,1,4,2,3))
        v_2075 = model.gmflow.utils.merge_splits(v_2074)
        v_2076 = torch.permute(input=v_2075, dims=(0,2,3,1))
        v_2077 = v_2076.view(1, -1, 128)
        v_2078 = self.pnnx_unique_687(v_2077)
        v_2079 = self.pnnx_unique_688(v_2078)
        v_2080 = (v_1982 + v_2079)
        v_2081 = self.pnnx_unique_689(v_2080)
        v_2082 = self.pnnx_unique_690(v_2049)
        v_2083 = self.pnnx_unique_691(v_2049)
        v_2084 = v_2081.view(1, 36, 60, 128)
        v_2085 = v_2082.view(1, 36, 60, 128)
        v_2086 = v_2083.view(1, 36, 60, 128)
        v_2087 = torch.permute(input=v_2084, dims=(0,3,1,2))
        v_2088 = model.gmflow.utils.split_feature(v_2087)
        v_2089 = torch.permute(input=v_2085, dims=(0,3,1,2))
        v_2090 = model.gmflow.utils.split_feature(v_2089)
        v_2091 = torch.permute(input=v_2086, dims=(0,3,1,2))
        v_2092 = model.gmflow.utils.split_feature(v_2091)
        v_2093 = torch.permute(input=v_2090, dims=(0,1,3,4,2))
        v_2094 = v_2093.view(1, 4, -1, 128)
        v_2095 = torch.permute(input=v_2088, dims=(0,1,3,4,2))
        v_2096 = v_2095.view(1, 4, -1, 128)
        v_2097 = torch.permute(input=v_2094, dims=(0,1,3,2))
        v_2098 = torch.matmul(input=v_2096, other=v_2097)
        v_2099 = (v_2098 / 11.313708)
        v_2100 = F.softmax(input=v_2099, dim=-1)
        v_2101 = torch.permute(input=v_2092, dims=(0,1,3,4,2))
        v_2102 = v_2101.view(1, 4, -1, 128)
        v_2103 = torch.matmul(input=v_2100, other=v_2102)
        v_2104 = v_2103.view(1, 4, 18, 30, 128)
        v_2105 = torch.permute(input=v_2104, dims=(0,1,4,2,3))
        v_2106 = model.gmflow.utils.merge_splits(v_2105)
        v_2107 = torch.permute(input=v_2106, dims=(0,2,3,1))
        v_2108 = v_2107.view(1, -1, 128)
        v_2109 = self.pnnx_unique_696(v_2108)
        v_2110 = self.pnnx_unique_697(v_2109)
        v_2111 = torch.cat((v_2080, v_2110), dim=-1)
        v_2112 = self.pnnx_unique_698(v_2111)
        v_2113 = self.pnnx_unique_699(v_2112)
        v_2114 = self.pnnx_unique_700(v_2113)
        v_2115 = self.pnnx_unique_701(v_2114)
        v_2116 = (v_2080 + v_2115)
        v_2117 = self.pnnx_unique_702(v_2049)
        v_2118 = self.pnnx_unique_703(v_2049)
        v_2119 = self.pnnx_unique_704(v_2049)
        v_2120 = v_2117.view(1, 36, 60, 128)
        v_2121 = v_2118.view(1, 36, 60, 128)
        v_2122 = v_2119.view(1, 36, 60, 128)
        v_2123 = torch.permute(input=v_2120, dims=(0,3,1,2))
        v_2124 = model.gmflow.utils.split_feature(v_2123)
        v_2125 = torch.permute(input=v_2121, dims=(0,3,1,2))
        v_2126 = model.gmflow.utils.split_feature(v_2125)
        v_2127 = torch.permute(input=v_2122, dims=(0,3,1,2))
        v_2128 = model.gmflow.utils.split_feature(v_2127)
        v_2129 = torch.permute(input=v_2126, dims=(0,1,3,4,2))
        v_2130 = v_2129.view(1, 4, -1, 128)
        v_2131 = torch.permute(input=v_2124, dims=(0,1,3,4,2))
        v_2132 = v_2131.view(1, 4, -1, 128)
        v_2133 = torch.permute(input=v_2130, dims=(0,1,3,2))
        v_2134 = torch.matmul(input=v_2132, other=v_2133)
        v_2135 = (v_2134 / 11.313708)
        v_2136 = F.softmax(input=v_2135, dim=-1)
        v_2137 = torch.permute(input=v_2128, dims=(0,1,3,4,2))
        v_2138 = v_2137.view(1, 4, -1, 128)
        v_2139 = torch.matmul(input=v_2136, other=v_2138)
        v_2140 = v_2139.view(1, 4, 18, 30, 128)
        v_2141 = torch.permute(input=v_2140, dims=(0,1,4,2,3))
        v_2142 = model.gmflow.utils.merge_splits(v_2141)
        v_2143 = torch.permute(input=v_2142, dims=(0,2,3,1))
        v_2144 = v_2143.view(1, -1, 128)
        v_2145 = self.pnnx_unique_709(v_2144)
        v_2146 = self.pnnx_unique_710(v_2145)
        v_2147 = (v_2049 + v_2146)
        v_2148 = self.pnnx_unique_711(v_2147)
        v_2149 = self.pnnx_unique_712(v_1982)
        v_2150 = self.pnnx_unique_713(v_1982)
        v_2151 = v_2148.view(1, 36, 60, 128)
        v_2152 = v_2149.view(1, 36, 60, 128)
        v_2153 = v_2150.view(1, 36, 60, 128)
        v_2154 = torch.permute(input=v_2151, dims=(0,3,1,2))
        v_2155 = model.gmflow.utils.split_feature(v_2154)
        v_2156 = torch.permute(input=v_2152, dims=(0,3,1,2))
        v_2157 = model.gmflow.utils.split_feature(v_2156)
        v_2158 = torch.permute(input=v_2153, dims=(0,3,1,2))
        v_2159 = model.gmflow.utils.split_feature(v_2158)
        v_2160 = torch.permute(input=v_2157, dims=(0,1,3,4,2))
        v_2161 = v_2160.view(1, 4, -1, 128)
        v_2162 = torch.permute(input=v_2155, dims=(0,1,3,4,2))
        v_2163 = v_2162.view(1, 4, -1, 128)
        v_2164 = torch.permute(input=v_2161, dims=(0,1,3,2))
        v_2165 = torch.matmul(input=v_2163, other=v_2164)
        v_2166 = (v_2165 / 11.313708)
        v_2167 = F.softmax(input=v_2166, dim=-1)
        v_2168 = torch.permute(input=v_2159, dims=(0,1,3,4,2))
        v_2169 = v_2168.view(1, 4, -1, 128)
        v_2170 = torch.matmul(input=v_2167, other=v_2169)
        v_2171 = v_2170.view(1, 4, 18, 30, 128)
        v_2172 = torch.permute(input=v_2171, dims=(0,1,4,2,3))
        v_2173 = model.gmflow.utils.merge_splits(v_2172)
        v_2174 = torch.permute(input=v_2173, dims=(0,2,3,1))
        v_2175 = v_2174.view(1, -1, 128)
        v_2176 = self.pnnx_unique_718(v_2175)
        v_2177 = self.pnnx_unique_719(v_2176)
        v_2178 = torch.cat((v_2147, v_2177), dim=-1)
        v_2179 = self.pnnx_unique_720(v_2178)
        v_2180 = self.pnnx_unique_721(v_2179)
        v_2181 = self.pnnx_unique_722(v_2180)
        v_2182 = self.pnnx_unique_723(v_2181)
        v_2183 = (v_2147 + v_2182)
        v_2184 = self.pnnx_unique_724(v_2116)
        v_2185 = self.pnnx_unique_725(v_2116)
        v_2186 = self.pnnx_unique_726(v_2116)
        v_2187 = v_2184.view(1, 36, 60, 128)
        v_2188 = v_2185.view(1, 36, 60, 128)
        v_2189 = v_2186.view(1, 36, 60, 128)
        v_2190 = torch.permute(input=v_2187, dims=(0,3,1,2))
        v_2191 = model.gmflow.utils.split_feature(v_2190)
        v_2192 = torch.permute(input=v_2188, dims=(0,3,1,2))
        v_2193 = model.gmflow.utils.split_feature(v_2192)
        v_2194 = torch.permute(input=v_2189, dims=(0,3,1,2))
        v_2195 = model.gmflow.utils.split_feature(v_2194)
        v_2196 = torch.permute(input=v_2193, dims=(0,1,3,4,2))
        v_2197 = v_2196.view(1, 4, -1, 128)
        v_2198 = torch.permute(input=v_2191, dims=(0,1,3,4,2))
        v_2199 = v_2198.view(1, 4, -1, 128)
        v_2200 = torch.permute(input=v_2197, dims=(0,1,3,2))
        v_2201 = torch.matmul(input=v_2199, other=v_2200)
        v_2202 = (v_2201 / 11.313708)
        v_2203 = F.softmax(input=v_2202, dim=-1)
        v_2204 = torch.permute(input=v_2195, dims=(0,1,3,4,2))
        v_2205 = v_2204.view(1, 4, -1, 128)
        v_2206 = torch.matmul(input=v_2203, other=v_2205)
        v_2207 = v_2206.view(1, 4, 18, 30, 128)
        v_2208 = torch.permute(input=v_2207, dims=(0,1,4,2,3))
        v_2209 = model.gmflow.utils.merge_splits(v_2208)
        v_2210 = torch.permute(input=v_2209, dims=(0,2,3,1))
        v_2211 = v_2210.view(1, -1, 128)
        v_2212 = self.pnnx_unique_731(v_2211)
        v_2213 = self.pnnx_unique_732(v_2212)
        v_2214 = (v_2116 + v_2213)
        v_2215 = self.pnnx_unique_733(v_2214)
        v_2216 = self.pnnx_unique_734(v_2183)
        v_2217 = self.pnnx_unique_735(v_2183)
        v_2218 = v_2215.view(1, 36, 60, 128)
        v_2219 = v_2216.view(1, 36, 60, 128)
        v_2220 = v_2217.view(1, 36, 60, 128)
        v_2221 = torch.permute(input=v_2218, dims=(0,3,1,2))
        v_2222 = model.gmflow.utils.split_feature(v_2221)
        v_2223 = torch.permute(input=v_2219, dims=(0,3,1,2))
        v_2224 = model.gmflow.utils.split_feature(v_2223)
        v_2225 = torch.permute(input=v_2220, dims=(0,3,1,2))
        v_2226 = model.gmflow.utils.split_feature(v_2225)
        v_2227 = torch.permute(input=v_2224, dims=(0,1,3,4,2))
        v_2228 = v_2227.view(1, 4, -1, 128)
        v_2229 = torch.permute(input=v_2222, dims=(0,1,3,4,2))
        v_2230 = v_2229.view(1, 4, -1, 128)
        v_2231 = torch.permute(input=v_2228, dims=(0,1,3,2))
        v_2232 = torch.matmul(input=v_2230, other=v_2231)
        v_2233 = (v_2232 / 11.313708)
        v_2234 = F.softmax(input=v_2233, dim=-1)
        v_2235 = torch.permute(input=v_2226, dims=(0,1,3,4,2))
        v_2236 = v_2235.view(1, 4, -1, 128)
        v_2237 = torch.matmul(input=v_2234, other=v_2236)
        v_2238 = v_2237.view(1, 4, 18, 30, 128)
        v_2239 = torch.permute(input=v_2238, dims=(0,1,4,2,3))
        v_2240 = model.gmflow.utils.merge_splits(v_2239)
        v_2241 = torch.permute(input=v_2240, dims=(0,2,3,1))
        v_2242 = v_2241.view(1, -1, 128)
        v_2243 = self.pnnx_unique_740(v_2242)
        v_2244 = self.pnnx_unique_741(v_2243)
        v_2245 = torch.cat((v_2214, v_2244), dim=-1)
        v_2246 = self.pnnx_unique_742(v_2245)
        v_2247 = self.pnnx_unique_743(v_2246)
        v_2248 = self.pnnx_unique_744(v_2247)
        v_2249 = self.pnnx_unique_745(v_2248)
        v_2250 = (v_2214 + v_2249)
        v_2251 = self.pnnx_unique_746(v_2183)
        v_2252 = self.pnnx_unique_747(v_2183)
        v_2253 = self.pnnx_unique_748(v_2183)
        v_2254 = v_2251.view(1, 36, 60, 128)
        v_2255 = v_2252.view(1, 36, 60, 128)
        v_2256 = v_2253.view(1, 36, 60, 128)
        v_2257 = torch.permute(input=v_2254, dims=(0,3,1,2))
        v_2258 = model.gmflow.utils.split_feature(v_2257)
        v_2259 = torch.permute(input=v_2255, dims=(0,3,1,2))
        v_2260 = model.gmflow.utils.split_feature(v_2259)
        v_2261 = torch.permute(input=v_2256, dims=(0,3,1,2))
        v_2262 = model.gmflow.utils.split_feature(v_2261)
        v_2263 = torch.permute(input=v_2260, dims=(0,1,3,4,2))
        v_2264 = v_2263.view(1, 4, -1, 128)
        v_2265 = torch.permute(input=v_2258, dims=(0,1,3,4,2))
        v_2266 = v_2265.view(1, 4, -1, 128)
        v_2267 = torch.permute(input=v_2264, dims=(0,1,3,2))
        v_2268 = torch.matmul(input=v_2266, other=v_2267)
        v_2269 = (v_2268 / 11.313708)
        v_2270 = F.softmax(input=v_2269, dim=-1)
        v_2271 = torch.permute(input=v_2262, dims=(0,1,3,4,2))
        v_2272 = v_2271.view(1, 4, -1, 128)
        v_2273 = torch.matmul(input=v_2270, other=v_2272)
        v_2274 = v_2273.view(1, 4, 18, 30, 128)
        v_2275 = torch.permute(input=v_2274, dims=(0,1,4,2,3))
        v_2276 = model.gmflow.utils.merge_splits(v_2275)
        v_2277 = torch.permute(input=v_2276, dims=(0,2,3,1))
        v_2278 = v_2277.view(1, -1, 128)
        v_2279 = self.pnnx_unique_753(v_2278)
        v_2280 = self.pnnx_unique_754(v_2279)
        v_2281 = (v_2183 + v_2280)
        v_2282 = self.pnnx_unique_755(v_2281)
        v_2283 = self.pnnx_unique_756(v_2116)
        v_2284 = self.pnnx_unique_757(v_2116)
        v_2285 = v_2282.view(1, 36, 60, 128)
        v_2286 = v_2283.view(1, 36, 60, 128)
        v_2287 = v_2284.view(1, 36, 60, 128)
        v_2288 = torch.permute(input=v_2285, dims=(0,3,1,2))
        v_2289 = model.gmflow.utils.split_feature(v_2288)
        v_2290 = torch.permute(input=v_2286, dims=(0,3,1,2))
        v_2291 = model.gmflow.utils.split_feature(v_2290)
        v_2292 = torch.permute(input=v_2287, dims=(0,3,1,2))
        v_2293 = model.gmflow.utils.split_feature(v_2292)
        v_2294 = torch.permute(input=v_2291, dims=(0,1,3,4,2))
        v_2295 = v_2294.view(1, 4, -1, 128)
        v_2296 = torch.permute(input=v_2289, dims=(0,1,3,4,2))
        v_2297 = v_2296.view(1, 4, -1, 128)
        v_2298 = torch.permute(input=v_2295, dims=(0,1,3,2))
        v_2299 = torch.matmul(input=v_2297, other=v_2298)
        v_2300 = (v_2299 / 11.313708)
        v_2301 = F.softmax(input=v_2300, dim=-1)
        v_2302 = torch.permute(input=v_2293, dims=(0,1,3,4,2))
        v_2303 = v_2302.view(1, 4, -1, 128)
        v_2304 = torch.matmul(input=v_2301, other=v_2303)
        v_2305 = v_2304.view(1, 4, 18, 30, 128)
        v_2306 = torch.permute(input=v_2305, dims=(0,1,4,2,3))
        v_2307 = model.gmflow.utils.merge_splits(v_2306)
        v_2308 = torch.permute(input=v_2307, dims=(0,2,3,1))
        v_2309 = v_2308.view(1, -1, 128)
        v_2310 = self.pnnx_unique_762(v_2309)
        v_2311 = self.pnnx_unique_763(v_2310)
        v_2312 = torch.cat((v_2281, v_2311), dim=-1)
        v_2313 = self.pnnx_unique_764(v_2312)
        v_2314 = self.pnnx_unique_765(v_2313)
        v_2315 = self.pnnx_unique_766(v_2314)
        v_2316 = self.pnnx_unique_767(v_2315)
        v_2317 = (v_2281 + v_2316)
        v_2318 = self.pnnx_unique_768(v_2250)
        v_2319 = self.pnnx_unique_769(v_2250)
        v_2320 = self.pnnx_unique_770(v_2250)
        v_2321 = v_2318.view(1, 36, 60, 128)
        v_2322 = v_2319.view(1, 36, 60, 128)
        v_2323 = v_2320.view(1, 36, 60, 128)
        v_2324 = torch.permute(input=v_2321, dims=(0,3,1,2))
        v_2325 = model.gmflow.utils.split_feature(v_2324)
        v_2326 = torch.permute(input=v_2322, dims=(0,3,1,2))
        v_2327 = model.gmflow.utils.split_feature(v_2326)
        v_2328 = torch.permute(input=v_2323, dims=(0,3,1,2))
        v_2329 = model.gmflow.utils.split_feature(v_2328)
        v_2330 = torch.permute(input=v_2327, dims=(0,1,3,4,2))
        v_2331 = v_2330.view(1, 4, -1, 128)
        v_2332 = torch.permute(input=v_2325, dims=(0,1,3,4,2))
        v_2333 = v_2332.view(1, 4, -1, 128)
        v_2334 = torch.permute(input=v_2331, dims=(0,1,3,2))
        v_2335 = torch.matmul(input=v_2333, other=v_2334)
        v_2336 = (v_2335 / 11.313708)
        v_2337 = F.softmax(input=v_2336, dim=-1)
        v_2338 = torch.permute(input=v_2329, dims=(0,1,3,4,2))
        v_2339 = v_2338.view(1, 4, -1, 128)
        v_2340 = torch.matmul(input=v_2337, other=v_2339)
        v_2341 = v_2340.view(1, 4, 18, 30, 128)
        v_2342 = torch.permute(input=v_2341, dims=(0,1,4,2,3))
        v_2343 = model.gmflow.utils.merge_splits(v_2342)
        v_2344 = torch.permute(input=v_2343, dims=(0,2,3,1))
        v_2345 = v_2344.view(1, -1, 128)
        v_2346 = self.pnnx_unique_775(v_2345)
        v_2347 = self.pnnx_unique_776(v_2346)
        v_2348 = (v_2250 + v_2347)
        v_2349 = self.pnnx_unique_777(v_2348)
        v_2350 = self.pnnx_unique_778(v_2317)
        v_2351 = self.pnnx_unique_779(v_2317)
        v_2352 = v_2349.view(1, 36, 60, 128)
        v_2353 = v_2350.view(1, 36, 60, 128)
        v_2354 = v_2351.view(1, 36, 60, 128)
        v_2355 = torch.permute(input=v_2352, dims=(0,3,1,2))
        v_2356 = model.gmflow.utils.split_feature(v_2355)
        v_2357 = torch.permute(input=v_2353, dims=(0,3,1,2))
        v_2358 = model.gmflow.utils.split_feature(v_2357)
        v_2359 = torch.permute(input=v_2354, dims=(0,3,1,2))
        v_2360 = model.gmflow.utils.split_feature(v_2359)
        v_2361 = torch.permute(input=v_2358, dims=(0,1,3,4,2))
        v_2362 = v_2361.view(1, 4, -1, 128)
        v_2363 = torch.permute(input=v_2356, dims=(0,1,3,4,2))
        v_2364 = v_2363.view(1, 4, -1, 128)
        v_2365 = torch.permute(input=v_2362, dims=(0,1,3,2))
        v_2366 = torch.matmul(input=v_2364, other=v_2365)
        v_2367 = (v_2366 / 11.313708)
        v_2368 = F.softmax(input=v_2367, dim=-1)
        v_2369 = torch.permute(input=v_2360, dims=(0,1,3,4,2))
        v_2370 = v_2369.view(1, 4, -1, 128)
        v_2371 = torch.matmul(input=v_2368, other=v_2370)
        v_2372 = v_2371.view(1, 4, 18, 30, 128)
        v_2373 = torch.permute(input=v_2372, dims=(0,1,4,2,3))
        v_2374 = model.gmflow.utils.merge_splits(v_2373)
        v_2375 = torch.permute(input=v_2374, dims=(0,2,3,1))
        v_2376 = v_2375.view(1, -1, 128)
        v_2377 = self.pnnx_unique_784(v_2376)
        v_2378 = self.pnnx_unique_785(v_2377)
        v_2379 = torch.cat((v_2348, v_2378), dim=-1)
        v_2380 = self.pnnx_unique_786(v_2379)
        v_2381 = self.pnnx_unique_787(v_2380)
        v_2382 = self.pnnx_unique_788(v_2381)
        v_2383 = self.pnnx_unique_789(v_2382)
        v_2384 = (v_2348 + v_2383)
        v_2385 = self.pnnx_unique_790(v_2317)
        v_2386 = self.pnnx_unique_791(v_2317)
        v_2387 = self.pnnx_unique_792(v_2317)
        v_2388 = v_2385.view(1, 36, 60, 128)
        v_2389 = v_2386.view(1, 36, 60, 128)
        v_2390 = v_2387.view(1, 36, 60, 128)
        v_2391 = torch.permute(input=v_2388, dims=(0,3,1,2))
        v_2392 = model.gmflow.utils.split_feature(v_2391)
        v_2393 = torch.permute(input=v_2389, dims=(0,3,1,2))
        v_2394 = model.gmflow.utils.split_feature(v_2393)
        v_2395 = torch.permute(input=v_2390, dims=(0,3,1,2))
        v_2396 = model.gmflow.utils.split_feature(v_2395)
        v_2397 = torch.permute(input=v_2394, dims=(0,1,3,4,2))
        v_2398 = v_2397.view(1, 4, -1, 128)
        v_2399 = torch.permute(input=v_2392, dims=(0,1,3,4,2))
        v_2400 = v_2399.view(1, 4, -1, 128)
        v_2401 = torch.permute(input=v_2398, dims=(0,1,3,2))
        v_2402 = torch.matmul(input=v_2400, other=v_2401)
        v_2403 = (v_2402 / 11.313708)
        v_2404 = F.softmax(input=v_2403, dim=-1)
        v_2405 = torch.permute(input=v_2396, dims=(0,1,3,4,2))
        v_2406 = v_2405.view(1, 4, -1, 128)
        v_2407 = torch.matmul(input=v_2404, other=v_2406)
        v_2408 = v_2407.view(1, 4, 18, 30, 128)
        v_2409 = torch.permute(input=v_2408, dims=(0,1,4,2,3))
        v_2410 = model.gmflow.utils.merge_splits(v_2409)
        v_2411 = torch.permute(input=v_2410, dims=(0,2,3,1))
        v_2412 = v_2411.view(1, -1, 128)
        v_2413 = self.pnnx_unique_797(v_2412)
        v_2414 = self.pnnx_unique_798(v_2413)
        v_2415 = (v_2317 + v_2414)
        v_2416 = self.pnnx_unique_799(v_2415)
        v_2417 = self.pnnx_unique_800(v_2250)
        v_2418 = self.pnnx_unique_801(v_2250)
        v_2419 = v_2416.view(1, 36, 60, 128)
        v_2420 = v_2417.view(1, 36, 60, 128)
        v_2421 = v_2418.view(1, 36, 60, 128)
        v_2422 = torch.permute(input=v_2419, dims=(0,3,1,2))
        v_2423 = model.gmflow.utils.split_feature(v_2422)
        v_2424 = torch.permute(input=v_2420, dims=(0,3,1,2))
        v_2425 = model.gmflow.utils.split_feature(v_2424)
        v_2426 = torch.permute(input=v_2421, dims=(0,3,1,2))
        v_2427 = model.gmflow.utils.split_feature(v_2426)
        v_2428 = torch.permute(input=v_2425, dims=(0,1,3,4,2))
        v_2429 = v_2428.view(1, 4, -1, 128)
        v_2430 = torch.permute(input=v_2423, dims=(0,1,3,4,2))
        v_2431 = v_2430.view(1, 4, -1, 128)
        v_2432 = torch.permute(input=v_2429, dims=(0,1,3,2))
        v_2433 = torch.matmul(input=v_2431, other=v_2432)
        v_2434 = (v_2433 / 11.313708)
        v_2435 = F.softmax(input=v_2434, dim=-1)
        v_2436 = torch.permute(input=v_2427, dims=(0,1,3,4,2))
        v_2437 = v_2436.view(1, 4, -1, 128)
        v_2438 = torch.matmul(input=v_2435, other=v_2437)
        v_2439 = v_2438.view(1, 4, 18, 30, 128)
        v_2440 = torch.permute(input=v_2439, dims=(0,1,4,2,3))
        v_2441 = model.gmflow.utils.merge_splits(v_2440)
        v_2442 = torch.permute(input=v_2441, dims=(0,2,3,1))
        v_2443 = v_2442.view(1, -1, 128)
        v_2444 = self.pnnx_unique_806(v_2443)
        v_2445 = self.pnnx_unique_807(v_2444)
        v_2446 = torch.cat((v_2415, v_2445), dim=-1)
        v_2447 = self.pnnx_unique_808(v_2446)
        v_2448 = self.pnnx_unique_809(v_2447)
        v_2449 = self.pnnx_unique_810(v_2448)
        v_2450 = self.pnnx_unique_811(v_2449)
        v_2451 = (v_2415 + v_2450)
        v_2452 = self.pnnx_unique_812(v_2384)
        v_2453 = self.pnnx_unique_813(v_2384)
        v_2454 = self.pnnx_unique_814(v_2384)
        v_2455 = v_2452.view(1, 36, 60, 128)
        v_2456 = v_2453.view(1, 36, 60, 128)
        v_2457 = v_2454.view(1, 36, 60, 128)
        v_2458 = torch.permute(input=v_2455, dims=(0,3,1,2))
        v_2459 = model.gmflow.utils.split_feature(v_2458)
        v_2460 = torch.permute(input=v_2456, dims=(0,3,1,2))
        v_2461 = model.gmflow.utils.split_feature(v_2460)
        v_2462 = torch.permute(input=v_2457, dims=(0,3,1,2))
        v_2463 = model.gmflow.utils.split_feature(v_2462)
        v_2464 = torch.permute(input=v_2461, dims=(0,1,3,4,2))
        v_2465 = v_2464.view(1, 4, -1, 128)
        v_2466 = torch.permute(input=v_2459, dims=(0,1,3,4,2))
        v_2467 = v_2466.view(1, 4, -1, 128)
        v_2468 = torch.permute(input=v_2465, dims=(0,1,3,2))
        v_2469 = torch.matmul(input=v_2467, other=v_2468)
        v_2470 = (v_2469 / 11.313708)
        v_2471 = F.softmax(input=v_2470, dim=-1)
        v_2472 = torch.permute(input=v_2463, dims=(0,1,3,4,2))
        v_2473 = v_2472.view(1, 4, -1, 128)
        v_2474 = torch.matmul(input=v_2471, other=v_2473)
        v_2475 = v_2474.view(1, 4, 18, 30, 128)
        v_2476 = torch.permute(input=v_2475, dims=(0,1,4,2,3))
        v_2477 = model.gmflow.utils.merge_splits(v_2476)
        v_2478 = torch.permute(input=v_2477, dims=(0,2,3,1))
        v_2479 = v_2478.view(1, -1, 128)
        v_2480 = self.pnnx_unique_819(v_2479)
        v_2481 = self.pnnx_unique_820(v_2480)
        v_2482 = (v_2384 + v_2481)
        v_2483 = self.pnnx_unique_821(v_2482)
        v_2484 = self.pnnx_unique_822(v_2451)
        v_2485 = self.pnnx_unique_823(v_2451)
        v_2486 = v_2483.view(1, 36, 60, 128)
        v_2487 = v_2484.view(1, 36, 60, 128)
        v_2488 = v_2485.view(1, 36, 60, 128)
        v_2489 = torch.permute(input=v_2486, dims=(0,3,1,2))
        v_2490 = model.gmflow.utils.split_feature(v_2489)
        v_2491 = torch.permute(input=v_2487, dims=(0,3,1,2))
        v_2492 = model.gmflow.utils.split_feature(v_2491)
        v_2493 = torch.permute(input=v_2488, dims=(0,3,1,2))
        v_2494 = model.gmflow.utils.split_feature(v_2493)
        v_2495 = torch.permute(input=v_2492, dims=(0,1,3,4,2))
        v_2496 = v_2495.view(1, 4, -1, 128)
        v_2497 = torch.permute(input=v_2490, dims=(0,1,3,4,2))
        v_2498 = v_2497.view(1, 4, -1, 128)
        v_2499 = torch.permute(input=v_2496, dims=(0,1,3,2))
        v_2500 = torch.matmul(input=v_2498, other=v_2499)
        v_2501 = (v_2500 / 11.313708)
        v_2502 = F.softmax(input=v_2501, dim=-1)
        v_2503 = torch.permute(input=v_2494, dims=(0,1,3,4,2))
        v_2504 = v_2503.view(1, 4, -1, 128)
        v_2505 = torch.matmul(input=v_2502, other=v_2504)
        v_2506 = v_2505.view(1, 4, 18, 30, 128)
        v_2507 = torch.permute(input=v_2506, dims=(0,1,4,2,3))
        v_2508 = model.gmflow.utils.merge_splits(v_2507)
        v_2509 = torch.permute(input=v_2508, dims=(0,2,3,1))
        v_2510 = v_2509.view(1, -1, 128)
        v_2511 = self.pnnx_unique_828(v_2510)
        v_2512 = self.pnnx_unique_829(v_2511)
        v_2513 = torch.cat((v_2482, v_2512), dim=-1)
        v_2514 = self.pnnx_unique_830(v_2513)
        v_2515 = self.pnnx_unique_831(v_2514)
        v_2516 = self.pnnx_unique_832(v_2515)
        v_2517 = self.pnnx_unique_833(v_2516)
        v_2518 = (v_2482 + v_2517)
        v_2519 = self.pnnx_unique_834(v_2451)
        v_2520 = self.pnnx_unique_835(v_2451)
        v_2521 = self.pnnx_unique_836(v_2451)
        v_2522 = v_2519.view(1, 36, 60, 128)
        v_2523 = v_2520.view(1, 36, 60, 128)
        v_2524 = v_2521.view(1, 36, 60, 128)
        v_2525 = torch.permute(input=v_2522, dims=(0,3,1,2))
        v_2526 = model.gmflow.utils.split_feature(v_2525)
        v_2527 = torch.permute(input=v_2523, dims=(0,3,1,2))
        v_2528 = model.gmflow.utils.split_feature(v_2527)
        v_2529 = torch.permute(input=v_2524, dims=(0,3,1,2))
        v_2530 = model.gmflow.utils.split_feature(v_2529)
        v_2531 = torch.permute(input=v_2528, dims=(0,1,3,4,2))
        v_2532 = v_2531.view(1, 4, -1, 128)
        v_2533 = torch.permute(input=v_2526, dims=(0,1,3,4,2))
        v_2534 = v_2533.view(1, 4, -1, 128)
        v_2535 = torch.permute(input=v_2532, dims=(0,1,3,2))
        v_2536 = torch.matmul(input=v_2534, other=v_2535)
        v_2537 = (v_2536 / 11.313708)
        v_2538 = F.softmax(input=v_2537, dim=-1)
        v_2539 = torch.permute(input=v_2530, dims=(0,1,3,4,2))
        v_2540 = v_2539.view(1, 4, -1, 128)
        v_2541 = torch.matmul(input=v_2538, other=v_2540)
        v_2542 = v_2541.view(1, 4, 18, 30, 128)
        v_2543 = torch.permute(input=v_2542, dims=(0,1,4,2,3))
        v_2544 = model.gmflow.utils.merge_splits(v_2543)
        v_2545 = torch.permute(input=v_2544, dims=(0,2,3,1))
        v_2546 = v_2545.view(1, -1, 128)
        v_2547 = self.pnnx_unique_841(v_2546)
        v_2548 = self.pnnx_unique_842(v_2547)
        v_2549 = (v_2451 + v_2548)
        v_2550 = self.pnnx_unique_843(v_2549)
        v_2551 = self.pnnx_unique_844(v_2384)
        v_2552 = self.pnnx_unique_845(v_2384)
        v_2553 = v_2550.view(1, 36, 60, 128)
        v_2554 = v_2551.view(1, 36, 60, 128)
        v_2555 = v_2552.view(1, 36, 60, 128)
        v_2556 = torch.permute(input=v_2553, dims=(0,3,1,2))
        v_2557 = model.gmflow.utils.split_feature(v_2556)
        v_2558 = torch.permute(input=v_2554, dims=(0,3,1,2))
        v_2559 = model.gmflow.utils.split_feature(v_2558)
        v_2560 = torch.permute(input=v_2555, dims=(0,3,1,2))
        v_2561 = model.gmflow.utils.split_feature(v_2560)
        v_2562 = torch.permute(input=v_2559, dims=(0,1,3,4,2))
        v_2563 = v_2562.view(1, 4, -1, 128)
        v_2564 = torch.permute(input=v_2557, dims=(0,1,3,4,2))
        v_2565 = v_2564.view(1, 4, -1, 128)
        v_2566 = torch.permute(input=v_2563, dims=(0,1,3,2))
        v_2567 = torch.matmul(input=v_2565, other=v_2566)
        v_2568 = (v_2567 / 11.313708)
        v_2569 = F.softmax(input=v_2568, dim=-1)
        v_2570 = torch.permute(input=v_2561, dims=(0,1,3,4,2))
        v_2571 = v_2570.view(1, 4, -1, 128)
        v_2572 = torch.matmul(input=v_2569, other=v_2571)
        v_2573 = v_2572.view(1, 4, 18, 30, 128)
        v_2574 = torch.permute(input=v_2573, dims=(0,1,4,2,3))
        v_2575 = model.gmflow.utils.merge_splits(v_2574)
        v_2576 = torch.permute(input=v_2575, dims=(0,2,3,1))
        v_2577 = v_2576.view(1, -1, 128)
        v_2578 = self.pnnx_unique_850(v_2577)
        v_2579 = self.pnnx_unique_851(v_2578)
        v_2580 = torch.cat((v_2549, v_2579), dim=-1)
        v_2581 = self.pnnx_unique_852(v_2580)
        v_2582 = self.pnnx_unique_853(v_2581)
        v_2583 = self.pnnx_unique_854(v_2582)
        v_2584 = self.pnnx_unique_855(v_2583)
        v_2585 = (v_2549 + v_2584)
        v_2586 = self.pnnx_unique_856(v_2518)
        v_2587 = self.pnnx_unique_857(v_2518)
        v_2588 = self.pnnx_unique_858(v_2518)
        v_2589 = v_2586.view(1, 36, 60, 128)
        v_2590 = v_2587.view(1, 36, 60, 128)
        v_2591 = v_2588.view(1, 36, 60, 128)
        v_2592 = torch.permute(input=v_2589, dims=(0,3,1,2))
        v_2593 = model.gmflow.utils.split_feature(v_2592)
        v_2594 = torch.permute(input=v_2590, dims=(0,3,1,2))
        v_2595 = model.gmflow.utils.split_feature(v_2594)
        v_2596 = torch.permute(input=v_2591, dims=(0,3,1,2))
        v_2597 = model.gmflow.utils.split_feature(v_2596)
        v_2598 = torch.permute(input=v_2595, dims=(0,1,3,4,2))
        v_2599 = v_2598.view(1, 4, -1, 128)
        v_2600 = torch.permute(input=v_2593, dims=(0,1,3,4,2))
        v_2601 = v_2600.view(1, 4, -1, 128)
        v_2602 = torch.permute(input=v_2599, dims=(0,1,3,2))
        v_2603 = torch.matmul(input=v_2601, other=v_2602)
        v_2604 = (v_2603 / 11.313708)
        v_2605 = F.softmax(input=v_2604, dim=-1)
        v_2606 = torch.permute(input=v_2597, dims=(0,1,3,4,2))
        v_2607 = v_2606.view(1, 4, -1, 128)
        v_2608 = torch.matmul(input=v_2605, other=v_2607)
        v_2609 = v_2608.view(1, 4, 18, 30, 128)
        v_2610 = torch.permute(input=v_2609, dims=(0,1,4,2,3))
        v_2611 = model.gmflow.utils.merge_splits(v_2610)
        v_2612 = torch.permute(input=v_2611, dims=(0,2,3,1))
        v_2613 = v_2612.view(1, -1, 128)
        v_2614 = self.pnnx_unique_863(v_2613)
        v_2615 = self.pnnx_unique_864(v_2614)
        v_2616 = (v_2518 + v_2615)
        v_2617 = self.pnnx_unique_865(v_2616)
        v_2618 = self.pnnx_unique_866(v_2585)
        v_2619 = self.pnnx_unique_867(v_2585)
        v_2620 = v_2617.view(1, 36, 60, 128)
        v_2621 = v_2618.view(1, 36, 60, 128)
        v_2622 = v_2619.view(1, 36, 60, 128)
        v_2623 = torch.permute(input=v_2620, dims=(0,3,1,2))
        v_2624 = model.gmflow.utils.split_feature(v_2623)
        v_2625 = torch.permute(input=v_2621, dims=(0,3,1,2))
        v_2626 = model.gmflow.utils.split_feature(v_2625)
        v_2627 = torch.permute(input=v_2622, dims=(0,3,1,2))
        v_2628 = model.gmflow.utils.split_feature(v_2627)
        v_2629 = torch.permute(input=v_2626, dims=(0,1,3,4,2))
        v_2630 = v_2629.view(1, 4, -1, 128)
        v_2631 = torch.permute(input=v_2624, dims=(0,1,3,4,2))
        v_2632 = v_2631.view(1, 4, -1, 128)
        v_2633 = torch.permute(input=v_2630, dims=(0,1,3,2))
        v_2634 = torch.matmul(input=v_2632, other=v_2633)
        v_2635 = (v_2634 / 11.313708)
        v_2636 = F.softmax(input=v_2635, dim=-1)
        v_2637 = torch.permute(input=v_2628, dims=(0,1,3,4,2))
        v_2638 = v_2637.view(1, 4, -1, 128)
        v_2639 = torch.matmul(input=v_2636, other=v_2638)
        v_2640 = v_2639.view(1, 4, 18, 30, 128)
        v_2641 = torch.permute(input=v_2640, dims=(0,1,4,2,3))
        v_2642 = model.gmflow.utils.merge_splits(v_2641)
        v_2643 = torch.permute(input=v_2642, dims=(0,2,3,1))
        v_2644 = v_2643.view(1, -1, 128)
        v_2645 = self.pnnx_unique_872(v_2644)
        v_2646 = self.pnnx_unique_873(v_2645)
        v_2647 = torch.cat((v_2616, v_2646), dim=-1)
        v_2648 = self.pnnx_unique_874(v_2647)
        v_2649 = self.pnnx_unique_875(v_2648)
        v_2650 = self.pnnx_unique_876(v_2649)
        v_2651 = self.pnnx_unique_877(v_2650)
        v_2652 = (v_2616 + v_2651)
        v_2653 = self.pnnx_unique_878(v_2585)
        v_2654 = self.pnnx_unique_879(v_2585)
        v_2655 = self.pnnx_unique_880(v_2585)
        v_2656 = v_2653.view(1, 36, 60, 128)
        v_2657 = v_2654.view(1, 36, 60, 128)
        v_2658 = v_2655.view(1, 36, 60, 128)
        v_2659 = torch.permute(input=v_2656, dims=(0,3,1,2))
        v_2660 = model.gmflow.utils.split_feature(v_2659)
        v_2661 = torch.permute(input=v_2657, dims=(0,3,1,2))
        v_2662 = model.gmflow.utils.split_feature(v_2661)
        v_2663 = torch.permute(input=v_2658, dims=(0,3,1,2))
        v_2664 = model.gmflow.utils.split_feature(v_2663)
        v_2665 = torch.permute(input=v_2662, dims=(0,1,3,4,2))
        v_2666 = v_2665.view(1, 4, -1, 128)
        v_2667 = torch.permute(input=v_2660, dims=(0,1,3,4,2))
        v_2668 = v_2667.view(1, 4, -1, 128)
        v_2669 = torch.permute(input=v_2666, dims=(0,1,3,2))
        v_2670 = torch.matmul(input=v_2668, other=v_2669)
        v_2671 = (v_2670 / 11.313708)
        v_2672 = F.softmax(input=v_2671, dim=-1)
        v_2673 = torch.permute(input=v_2664, dims=(0,1,3,4,2))
        v_2674 = v_2673.view(1, 4, -1, 128)
        v_2675 = torch.matmul(input=v_2672, other=v_2674)
        v_2676 = v_2675.view(1, 4, 18, 30, 128)
        v_2677 = torch.permute(input=v_2676, dims=(0,1,4,2,3))
        v_2678 = model.gmflow.utils.merge_splits(v_2677)
        v_2679 = torch.permute(input=v_2678, dims=(0,2,3,1))
        v_2680 = v_2679.view(1, -1, 128)
        v_2681 = self.pnnx_unique_885(v_2680)
        v_2682 = self.pnnx_unique_886(v_2681)
        v_2683 = (v_2585 + v_2682)
        v_2684 = self.pnnx_unique_887(v_2683)
        v_2685 = self.pnnx_unique_888(v_2518)
        v_2686 = self.pnnx_unique_889(v_2518)
        v_2687 = v_2684.view(1, 36, 60, 128)
        v_2688 = v_2685.view(1, 36, 60, 128)
        v_2689 = v_2686.view(1, 36, 60, 128)
        v_2690 = torch.permute(input=v_2687, dims=(0,3,1,2))
        v_2691 = model.gmflow.utils.split_feature(v_2690)
        v_2692 = torch.permute(input=v_2688, dims=(0,3,1,2))
        v_2693 = model.gmflow.utils.split_feature(v_2692)
        v_2694 = torch.permute(input=v_2689, dims=(0,3,1,2))
        v_2695 = model.gmflow.utils.split_feature(v_2694)
        v_2696 = torch.permute(input=v_2693, dims=(0,1,3,4,2))
        v_2697 = v_2696.view(1, 4, -1, 128)
        v_2698 = torch.permute(input=v_2691, dims=(0,1,3,4,2))
        v_2699 = v_2698.view(1, 4, -1, 128)
        v_2700 = torch.permute(input=v_2697, dims=(0,1,3,2))
        v_2701 = torch.matmul(input=v_2699, other=v_2700)
        v_2702 = (v_2701 / 11.313708)
        v_2703 = F.softmax(input=v_2702, dim=-1)
        v_2704 = torch.permute(input=v_2695, dims=(0,1,3,4,2))
        v_2705 = v_2704.view(1, 4, -1, 128)
        v_2706 = torch.matmul(input=v_2703, other=v_2705)
        v_2707 = v_2706.view(1, 4, 18, 30, 128)
        v_2708 = torch.permute(input=v_2707, dims=(0,1,4,2,3))
        v_2709 = model.gmflow.utils.merge_splits(v_2708)
        v_2710 = torch.permute(input=v_2709, dims=(0,2,3,1))
        v_2711 = v_2710.view(1, -1, 128)
        v_2712 = self.pnnx_unique_894(v_2711)
        v_2713 = self.pnnx_unique_895(v_2712)
        v_2714 = torch.cat((v_2683, v_2713), dim=-1)
        v_2715 = self.pnnx_unique_896(v_2714)
        v_2716 = self.pnnx_unique_897(v_2715)
        v_2717 = self.pnnx_unique_898(v_2716)
        v_2718 = self.pnnx_unique_899(v_2717)
        v_2719 = (v_2683 + v_2718)
        v_2720 = v_2652.view(1, 36, 60, 128)
        v_2721 = v_2719.view(1, 36, 60, 128)
        v_2722 = torch.permute(input=v_2721, dims=(0,3,1,2))
        v_2723 = torch.permute(input=v_2720, dims=(0,3,1,2))
        v_2724 = v_2723.contiguous(memory_format=torch.contiguous_format)
        v_2725 = v_2724.view(1, 128, -1)
        v_2726 = torch.permute(input=v_2725, dims=(0,2,1))
        v_2727 = v_2722.reshape(1, 128, -1)
        v_2728 = torch.matmul(input=v_2726, other=v_2727)
        v_2729 = v_2728.view(1, 36, 60, 36, 60)
        v_2730 = (v_2729 / 11.313708)
        v_2731 = self.pnnx_fold_init_grid_1_pnnx_fold_init_grid_1
        v_2732 = v_2730.view(1, 2160, 2160)
        v_2733 = F.softmax(input=v_2732, dim=-1)
        v_2734 = self.pnnx_fold_grid_5_pnnx_fold_grid_5
        v_2735 = torch.matmul(input=v_2733, other=v_2734)
        v_2736 = v_2735.view(1, 36, 60, 2)
        v_2737 = torch.permute(input=v_2736, dims=(0,3,1,2))
        v_2738 = (v_2737 - v_2731)
        v_2739 = v_2724.view(1, 128, 2160)
        v_2740 = torch.permute(input=v_2739, dims=(0,2,1))
        v_2741 = self.pnnx_unique_900(v_2740)
        v_2742 = self.pnnx_unique_901(v_2741)
        v_2743 = v_2738.view(1, 2, 2160)
        v_2744 = torch.permute(input=v_2742, dims=(0,2,1))
        v_2745 = torch.matmul(input=v_2741, other=v_2744)
        v_2746 = (v_2745 / 11.313708)
        v_2747 = F.softmax(input=v_2746, dim=-1)
        v_2748 = torch.permute(input=v_2743, dims=(0,2,1))
        v_2749 = torch.matmul(input=v_2747, other=v_2748)
        v_2750 = v_2749.view(1, 36, 60, 2)
        v_2751 = torch.permute(input=v_2750, dims=(0,3,1,2))
        v_2752 = F.upsample(input=v_2751, align_corners=True, mode='bilinear', scale_factor=(2.000000,2.000000))
        v_2753 = (v_2752 * 2)
        v_2754 = self.pnnx_fold_9715_pnnx_fold_9715
        v_2755 = (v_2754 + v_2753)
        v_2756, v_2757 = torch.unbind(v_2755, dim=1)
        v_2758 = (((v_2756 * 2) / 119.000000) - 1)
        v_2759 = (((v_2757 * 2) / 71.000000) - 1)
        v_2760 = torch.unsqueeze(input=v_2759, dim=3)
        v_2761 = torch.unsqueeze(input=v_2758, dim=3)
        v_2762 = self.conv2d_5(v_159)
        v_2763 = model.gmflow.utils.split_feature(v_2762)
        v_2764 = torch.cat((v_2761, v_2760), dim=3)
        v_2765 = self.conv2d_7(v_102)
        v_2766 = F.grid_sample(input=v_2765, grid=v_2764, align_corners=True, mode='bilinear', padding_mode='zeros')
        v_2767 = model.gmflow.utils.split_feature(v_2766)
        v_2768 = self.pnnx_fold_position1_1_pnnx_fold_position1_1
        v_2769 = self.pnnx_fold_position1_1_1_pnnx_fold_position1_1
        v_2770 = (v_2763 + v_2768)
        v_2771 = (v_2767 + v_2769)
        v_2772 = model.gmflow.utils.merge_splits(v_2770)
        v_2773 = model.gmflow.utils.merge_splits(v_2771)
        v_2774 = torch.flatten(input=v_2772, end_dim=-1, start_dim=2)
        v_2775 = torch.flatten(input=v_2773, end_dim=-1, start_dim=2)
        v_2776 = torch.permute(input=v_2774, dims=(0,2,1))
        v_2777 = self.pnnx_unique_907(v_2776)
        v_2778 = self.pnnx_unique_908(v_2776)
        v_2779 = self.pnnx_unique_909(v_2776)
        v_2780 = v_2777.view(1, 72, 120, 128)
        v_2781 = v_2778.view(1, 72, 120, 128)
        v_2782 = v_2779.view(1, 72, 120, 128)
        v_2783 = torch.permute(input=v_2780, dims=(0,3,1,2))
        v_2784 = model.gmflow.utils.split_feature(v_2783)
        v_2785 = torch.permute(input=v_2781, dims=(0,3,1,2))
        v_2786 = model.gmflow.utils.split_feature(v_2785)
        v_2787 = torch.permute(input=v_2782, dims=(0,3,1,2))
        v_2788 = model.gmflow.utils.split_feature(v_2787)
        v_2789 = torch.permute(input=v_2786, dims=(0,1,3,4,2))
        v_2790 = v_2789.view(1, 64, -1, 128)
        v_2791 = torch.permute(input=v_2784, dims=(0,1,3,4,2))
        v_2792 = v_2791.view(1, 64, -1, 128)
        v_2793 = torch.permute(input=v_2790, dims=(0,1,3,2))
        v_2794 = torch.matmul(input=v_2792, other=v_2793)
        v_2795 = (v_2794 / 11.313708)
        v_2796 = F.softmax(input=v_2795, dim=-1)
        v_2797 = torch.permute(input=v_2788, dims=(0,1,3,4,2))
        v_2798 = v_2797.view(1, 64, -1, 128)
        v_2799 = torch.matmul(input=v_2796, other=v_2798)
        v_2800 = v_2799.view(1, 64, 9, 15, 128)
        v_2801 = torch.permute(input=v_2800, dims=(0,1,4,2,3))
        v_2802 = model.gmflow.utils.merge_splits(v_2801)
        v_2803 = torch.permute(input=v_2802, dims=(0,2,3,1))
        v_2804 = v_2803.view(1, -1, 128)
        v_2805 = self.pnnx_unique_914(v_2804)
        v_2806 = self.pnnx_unique_915(v_2805)
        v_2807 = (v_2776 + v_2806)
        v_2808 = self.pnnx_unique_916(v_2807)
        v_2809 = torch.permute(input=v_2775, dims=(0,2,1))
        v_2810 = self.pnnx_unique_917(v_2809)
        v_2811 = self.pnnx_unique_918(v_2809)
        v_2812 = v_2808.view(1, 72, 120, 128)
        v_2813 = v_2810.view(1, 72, 120, 128)
        v_2814 = v_2811.view(1, 72, 120, 128)
        v_2815 = torch.permute(input=v_2812, dims=(0,3,1,2))
        v_2816 = model.gmflow.utils.split_feature(v_2815)
        v_2817 = torch.permute(input=v_2813, dims=(0,3,1,2))
        v_2818 = model.gmflow.utils.split_feature(v_2817)
        v_2819 = torch.permute(input=v_2814, dims=(0,3,1,2))
        v_2820 = model.gmflow.utils.split_feature(v_2819)
        v_2821 = torch.permute(input=v_2818, dims=(0,1,3,4,2))
        v_2822 = v_2821.view(1, 64, -1, 128)
        v_2823 = torch.permute(input=v_2816, dims=(0,1,3,4,2))
        v_2824 = v_2823.view(1, 64, -1, 128)
        v_2825 = torch.permute(input=v_2822, dims=(0,1,3,2))
        v_2826 = torch.matmul(input=v_2824, other=v_2825)
        v_2827 = (v_2826 / 11.313708)
        v_2828 = F.softmax(input=v_2827, dim=-1)
        v_2829 = torch.permute(input=v_2820, dims=(0,1,3,4,2))
        v_2830 = v_2829.view(1, 64, -1, 128)
        v_2831 = torch.matmul(input=v_2828, other=v_2830)
        v_2832 = v_2831.view(1, 64, 9, 15, 128)
        v_2833 = torch.permute(input=v_2832, dims=(0,1,4,2,3))
        v_2834 = model.gmflow.utils.merge_splits(v_2833)
        v_2835 = torch.permute(input=v_2834, dims=(0,2,3,1))
        v_2836 = v_2835.view(1, -1, 128)
        v_2837 = self.pnnx_unique_923(v_2836)
        v_2838 = self.pnnx_unique_924(v_2837)
        v_2839 = torch.cat((v_2807, v_2838), dim=-1)
        v_2840 = self.pnnx_unique_925(v_2839)
        v_2841 = self.pnnx_unique_926(v_2840)
        v_2842 = self.pnnx_unique_927(v_2841)
        v_2843 = self.pnnx_unique_928(v_2842)
        v_2844 = (v_2807 + v_2843)
        v_2845 = self.pnnx_unique_929(v_2809)
        v_2846 = self.pnnx_unique_930(v_2809)
        v_2847 = self.pnnx_unique_931(v_2809)
        v_2848 = v_2845.view(1, 72, 120, 128)
        v_2849 = v_2846.view(1, 72, 120, 128)
        v_2850 = v_2847.view(1, 72, 120, 128)
        v_2851 = torch.permute(input=v_2848, dims=(0,3,1,2))
        v_2852 = model.gmflow.utils.split_feature(v_2851)
        v_2853 = torch.permute(input=v_2849, dims=(0,3,1,2))
        v_2854 = model.gmflow.utils.split_feature(v_2853)
        v_2855 = torch.permute(input=v_2850, dims=(0,3,1,2))
        v_2856 = model.gmflow.utils.split_feature(v_2855)
        v_2857 = torch.permute(input=v_2854, dims=(0,1,3,4,2))
        v_2858 = v_2857.view(1, 64, -1, 128)
        v_2859 = torch.permute(input=v_2852, dims=(0,1,3,4,2))
        v_2860 = v_2859.view(1, 64, -1, 128)
        v_2861 = torch.permute(input=v_2858, dims=(0,1,3,2))
        v_2862 = torch.matmul(input=v_2860, other=v_2861)
        v_2863 = (v_2862 / 11.313708)
        v_2864 = F.softmax(input=v_2863, dim=-1)
        v_2865 = torch.permute(input=v_2856, dims=(0,1,3,4,2))
        v_2866 = v_2865.view(1, 64, -1, 128)
        v_2867 = torch.matmul(input=v_2864, other=v_2866)
        v_2868 = v_2867.view(1, 64, 9, 15, 128)
        v_2869 = torch.permute(input=v_2868, dims=(0,1,4,2,3))
        v_2870 = model.gmflow.utils.merge_splits(v_2869)
        v_2871 = torch.permute(input=v_2870, dims=(0,2,3,1))
        v_2872 = v_2871.view(1, -1, 128)
        v_2873 = self.pnnx_unique_936(v_2872)
        v_2874 = self.pnnx_unique_937(v_2873)
        v_2875 = (v_2809 + v_2874)
        v_2876 = self.pnnx_unique_938(v_2875)
        v_2877 = self.pnnx_unique_939(v_2776)
        v_2878 = self.pnnx_unique_940(v_2776)
        v_2879 = v_2876.view(1, 72, 120, 128)
        v_2880 = v_2877.view(1, 72, 120, 128)
        v_2881 = v_2878.view(1, 72, 120, 128)
        v_2882 = torch.permute(input=v_2879, dims=(0,3,1,2))
        v_2883 = model.gmflow.utils.split_feature(v_2882)
        v_2884 = torch.permute(input=v_2880, dims=(0,3,1,2))
        v_2885 = model.gmflow.utils.split_feature(v_2884)
        v_2886 = torch.permute(input=v_2881, dims=(0,3,1,2))
        v_2887 = model.gmflow.utils.split_feature(v_2886)
        v_2888 = torch.permute(input=v_2885, dims=(0,1,3,4,2))
        v_2889 = v_2888.view(1, 64, -1, 128)
        v_2890 = torch.permute(input=v_2883, dims=(0,1,3,4,2))
        v_2891 = v_2890.view(1, 64, -1, 128)
        v_2892 = torch.permute(input=v_2889, dims=(0,1,3,2))
        v_2893 = torch.matmul(input=v_2891, other=v_2892)
        v_2894 = (v_2893 / 11.313708)
        v_2895 = F.softmax(input=v_2894, dim=-1)
        v_2896 = torch.permute(input=v_2887, dims=(0,1,3,4,2))
        v_2897 = v_2896.view(1, 64, -1, 128)
        v_2898 = torch.matmul(input=v_2895, other=v_2897)
        v_2899 = v_2898.view(1, 64, 9, 15, 128)
        v_2900 = torch.permute(input=v_2899, dims=(0,1,4,2,3))
        v_2901 = model.gmflow.utils.merge_splits(v_2900)
        v_2902 = torch.permute(input=v_2901, dims=(0,2,3,1))
        v_2903 = v_2902.view(1, -1, 128)
        v_2904 = self.pnnx_unique_945(v_2903)
        v_2905 = self.pnnx_unique_946(v_2904)
        v_2906 = torch.cat((v_2875, v_2905), dim=-1)
        v_2907 = self.pnnx_unique_947(v_2906)
        v_2908 = self.pnnx_unique_948(v_2907)
        v_2909 = self.pnnx_unique_949(v_2908)
        v_2910 = self.pnnx_unique_950(v_2909)
        v_2911 = (v_2875 + v_2910)
        v_2912 = self.pnnx_unique_951(v_2844)
        v_2913 = self.pnnx_unique_952(v_2844)
        v_2914 = self.pnnx_unique_953(v_2844)
        v_2915 = v_2912.view(1, 72, 120, 128)
        v_2916 = v_2913.view(1, 72, 120, 128)
        v_2917 = v_2914.view(1, 72, 120, 128)
        v_2918 = torch.permute(input=v_2915, dims=(0,3,1,2))
        v_2919 = model.gmflow.utils.split_feature(v_2918)
        v_2920 = torch.permute(input=v_2916, dims=(0,3,1,2))
        v_2921 = model.gmflow.utils.split_feature(v_2920)
        v_2922 = torch.permute(input=v_2917, dims=(0,3,1,2))
        v_2923 = model.gmflow.utils.split_feature(v_2922)
        v_2924 = torch.permute(input=v_2921, dims=(0,1,3,4,2))
        v_2925 = v_2924.view(1, 64, -1, 128)
        v_2926 = torch.permute(input=v_2919, dims=(0,1,3,4,2))
        v_2927 = v_2926.view(1, 64, -1, 128)
        v_2928 = torch.permute(input=v_2925, dims=(0,1,3,2))
        v_2929 = torch.matmul(input=v_2927, other=v_2928)
        v_2930 = (v_2929 / 11.313708)
        v_2931 = F.softmax(input=v_2930, dim=-1)
        v_2932 = torch.permute(input=v_2923, dims=(0,1,3,4,2))
        v_2933 = v_2932.view(1, 64, -1, 128)
        v_2934 = torch.matmul(input=v_2931, other=v_2933)
        v_2935 = v_2934.view(1, 64, 9, 15, 128)
        v_2936 = torch.permute(input=v_2935, dims=(0,1,4,2,3))
        v_2937 = model.gmflow.utils.merge_splits(v_2936)
        v_2938 = torch.permute(input=v_2937, dims=(0,2,3,1))
        v_2939 = v_2938.view(1, -1, 128)
        v_2940 = self.pnnx_unique_958(v_2939)
        v_2941 = self.pnnx_unique_959(v_2940)
        v_2942 = (v_2844 + v_2941)
        v_2943 = self.pnnx_unique_960(v_2942)
        v_2944 = self.pnnx_unique_961(v_2911)
        v_2945 = self.pnnx_unique_962(v_2911)
        v_2946 = v_2943.view(1, 72, 120, 128)
        v_2947 = v_2944.view(1, 72, 120, 128)
        v_2948 = v_2945.view(1, 72, 120, 128)
        v_2949 = torch.permute(input=v_2946, dims=(0,3,1,2))
        v_2950 = model.gmflow.utils.split_feature(v_2949)
        v_2951 = torch.permute(input=v_2947, dims=(0,3,1,2))
        v_2952 = model.gmflow.utils.split_feature(v_2951)
        v_2953 = torch.permute(input=v_2948, dims=(0,3,1,2))
        v_2954 = model.gmflow.utils.split_feature(v_2953)
        v_2955 = torch.permute(input=v_2952, dims=(0,1,3,4,2))
        v_2956 = v_2955.view(1, 64, -1, 128)
        v_2957 = torch.permute(input=v_2950, dims=(0,1,3,4,2))
        v_2958 = v_2957.view(1, 64, -1, 128)
        v_2959 = torch.permute(input=v_2956, dims=(0,1,3,2))
        v_2960 = torch.matmul(input=v_2958, other=v_2959)
        v_2961 = (v_2960 / 11.313708)
        v_2962 = F.softmax(input=v_2961, dim=-1)
        v_2963 = torch.permute(input=v_2954, dims=(0,1,3,4,2))
        v_2964 = v_2963.view(1, 64, -1, 128)
        v_2965 = torch.matmul(input=v_2962, other=v_2964)
        v_2966 = v_2965.view(1, 64, 9, 15, 128)
        v_2967 = torch.permute(input=v_2966, dims=(0,1,4,2,3))
        v_2968 = model.gmflow.utils.merge_splits(v_2967)
        v_2969 = torch.permute(input=v_2968, dims=(0,2,3,1))
        v_2970 = v_2969.view(1, -1, 128)
        v_2971 = self.pnnx_unique_967(v_2970)
        v_2972 = self.pnnx_unique_968(v_2971)
        v_2973 = torch.cat((v_2942, v_2972), dim=-1)
        v_2974 = self.pnnx_unique_969(v_2973)
        v_2975 = self.pnnx_unique_970(v_2974)
        v_2976 = self.pnnx_unique_971(v_2975)
        v_2977 = self.pnnx_unique_972(v_2976)
        v_2978 = (v_2942 + v_2977)
        v_2979 = self.pnnx_unique_973(v_2911)
        v_2980 = self.pnnx_unique_974(v_2911)
        v_2981 = self.pnnx_unique_975(v_2911)
        v_2982 = v_2979.view(1, 72, 120, 128)
        v_2983 = v_2980.view(1, 72, 120, 128)
        v_2984 = v_2981.view(1, 72, 120, 128)
        v_2985 = torch.permute(input=v_2982, dims=(0,3,1,2))
        v_2986 = model.gmflow.utils.split_feature(v_2985)
        v_2987 = torch.permute(input=v_2983, dims=(0,3,1,2))
        v_2988 = model.gmflow.utils.split_feature(v_2987)
        v_2989 = torch.permute(input=v_2984, dims=(0,3,1,2))
        v_2990 = model.gmflow.utils.split_feature(v_2989)
        v_2991 = torch.permute(input=v_2988, dims=(0,1,3,4,2))
        v_2992 = v_2991.view(1, 64, -1, 128)
        v_2993 = torch.permute(input=v_2986, dims=(0,1,3,4,2))
        v_2994 = v_2993.view(1, 64, -1, 128)
        v_2995 = torch.permute(input=v_2992, dims=(0,1,3,2))
        v_2996 = torch.matmul(input=v_2994, other=v_2995)
        v_2997 = (v_2996 / 11.313708)
        v_2998 = F.softmax(input=v_2997, dim=-1)
        v_2999 = torch.permute(input=v_2990, dims=(0,1,3,4,2))
        v_3000 = v_2999.view(1, 64, -1, 128)
        v_3001 = torch.matmul(input=v_2998, other=v_3000)
        v_3002 = v_3001.view(1, 64, 9, 15, 128)
        v_3003 = torch.permute(input=v_3002, dims=(0,1,4,2,3))
        v_3004 = model.gmflow.utils.merge_splits(v_3003)
        v_3005 = torch.permute(input=v_3004, dims=(0,2,3,1))
        v_3006 = v_3005.view(1, -1, 128)
        v_3007 = self.pnnx_unique_980(v_3006)
        v_3008 = self.pnnx_unique_981(v_3007)
        v_3009 = (v_2911 + v_3008)
        v_3010 = self.pnnx_unique_982(v_3009)
        v_3011 = self.pnnx_unique_983(v_2844)
        v_3012 = self.pnnx_unique_984(v_2844)
        v_3013 = v_3010.view(1, 72, 120, 128)
        v_3014 = v_3011.view(1, 72, 120, 128)
        v_3015 = v_3012.view(1, 72, 120, 128)
        v_3016 = torch.permute(input=v_3013, dims=(0,3,1,2))
        v_3017 = model.gmflow.utils.split_feature(v_3016)
        v_3018 = torch.permute(input=v_3014, dims=(0,3,1,2))
        v_3019 = model.gmflow.utils.split_feature(v_3018)
        v_3020 = torch.permute(input=v_3015, dims=(0,3,1,2))
        v_3021 = model.gmflow.utils.split_feature(v_3020)
        v_3022 = torch.permute(input=v_3019, dims=(0,1,3,4,2))
        v_3023 = v_3022.view(1, 64, -1, 128)
        v_3024 = torch.permute(input=v_3017, dims=(0,1,3,4,2))
        v_3025 = v_3024.view(1, 64, -1, 128)
        v_3026 = torch.permute(input=v_3023, dims=(0,1,3,2))
        v_3027 = torch.matmul(input=v_3025, other=v_3026)
        v_3028 = (v_3027 / 11.313708)
        v_3029 = F.softmax(input=v_3028, dim=-1)
        v_3030 = torch.permute(input=v_3021, dims=(0,1,3,4,2))
        v_3031 = v_3030.view(1, 64, -1, 128)
        v_3032 = torch.matmul(input=v_3029, other=v_3031)
        v_3033 = v_3032.view(1, 64, 9, 15, 128)
        v_3034 = torch.permute(input=v_3033, dims=(0,1,4,2,3))
        v_3035 = model.gmflow.utils.merge_splits(v_3034)
        v_3036 = torch.permute(input=v_3035, dims=(0,2,3,1))
        v_3037 = v_3036.view(1, -1, 128)
        v_3038 = self.pnnx_unique_989(v_3037)
        v_3039 = self.pnnx_unique_990(v_3038)
        v_3040 = torch.cat((v_3009, v_3039), dim=-1)
        v_3041 = self.pnnx_unique_991(v_3040)
        v_3042 = self.pnnx_unique_992(v_3041)
        v_3043 = self.pnnx_unique_993(v_3042)
        v_3044 = self.pnnx_unique_994(v_3043)
        v_3045 = (v_3009 + v_3044)
        v_3046 = self.pnnx_unique_995(v_2978)
        v_3047 = self.pnnx_unique_996(v_2978)
        v_3048 = self.pnnx_unique_997(v_2978)
        v_3049 = v_3046.view(1, 72, 120, 128)
        v_3050 = v_3047.view(1, 72, 120, 128)
        v_3051 = v_3048.view(1, 72, 120, 128)
        v_3052 = torch.permute(input=v_3049, dims=(0,3,1,2))
        v_3053 = model.gmflow.utils.split_feature(v_3052)
        v_3054 = torch.permute(input=v_3050, dims=(0,3,1,2))
        v_3055 = model.gmflow.utils.split_feature(v_3054)
        v_3056 = torch.permute(input=v_3051, dims=(0,3,1,2))
        v_3057 = model.gmflow.utils.split_feature(v_3056)
        v_3058 = torch.permute(input=v_3055, dims=(0,1,3,4,2))
        v_3059 = v_3058.view(1, 64, -1, 128)
        v_3060 = torch.permute(input=v_3053, dims=(0,1,3,4,2))
        v_3061 = v_3060.view(1, 64, -1, 128)
        v_3062 = torch.permute(input=v_3059, dims=(0,1,3,2))
        v_3063 = torch.matmul(input=v_3061, other=v_3062)
        v_3064 = (v_3063 / 11.313708)
        v_3065 = F.softmax(input=v_3064, dim=-1)
        v_3066 = torch.permute(input=v_3057, dims=(0,1,3,4,2))
        v_3067 = v_3066.view(1, 64, -1, 128)
        v_3068 = torch.matmul(input=v_3065, other=v_3067)
        v_3069 = v_3068.view(1, 64, 9, 15, 128)
        v_3070 = torch.permute(input=v_3069, dims=(0,1,4,2,3))
        v_3071 = model.gmflow.utils.merge_splits(v_3070)
        v_3072 = torch.permute(input=v_3071, dims=(0,2,3,1))
        v_3073 = v_3072.view(1, -1, 128)
        v_3074 = self.pnnx_unique_1002(v_3073)
        v_3075 = self.pnnx_unique_1003(v_3074)
        v_3076 = (v_2978 + v_3075)
        v_3077 = self.pnnx_unique_1004(v_3076)
        v_3078 = self.pnnx_unique_1005(v_3045)
        v_3079 = self.pnnx_unique_1006(v_3045)
        v_3080 = v_3077.view(1, 72, 120, 128)
        v_3081 = v_3078.view(1, 72, 120, 128)
        v_3082 = v_3079.view(1, 72, 120, 128)
        v_3083 = torch.permute(input=v_3080, dims=(0,3,1,2))
        v_3084 = model.gmflow.utils.split_feature(v_3083)
        v_3085 = torch.permute(input=v_3081, dims=(0,3,1,2))
        v_3086 = model.gmflow.utils.split_feature(v_3085)
        v_3087 = torch.permute(input=v_3082, dims=(0,3,1,2))
        v_3088 = model.gmflow.utils.split_feature(v_3087)
        v_3089 = torch.permute(input=v_3086, dims=(0,1,3,4,2))
        v_3090 = v_3089.view(1, 64, -1, 128)
        v_3091 = torch.permute(input=v_3084, dims=(0,1,3,4,2))
        v_3092 = v_3091.view(1, 64, -1, 128)
        v_3093 = torch.permute(input=v_3090, dims=(0,1,3,2))
        v_3094 = torch.matmul(input=v_3092, other=v_3093)
        v_3095 = (v_3094 / 11.313708)
        v_3096 = F.softmax(input=v_3095, dim=-1)
        v_3097 = torch.permute(input=v_3088, dims=(0,1,3,4,2))
        v_3098 = v_3097.view(1, 64, -1, 128)
        v_3099 = torch.matmul(input=v_3096, other=v_3098)
        v_3100 = v_3099.view(1, 64, 9, 15, 128)
        v_3101 = torch.permute(input=v_3100, dims=(0,1,4,2,3))
        v_3102 = model.gmflow.utils.merge_splits(v_3101)
        v_3103 = torch.permute(input=v_3102, dims=(0,2,3,1))
        v_3104 = v_3103.view(1, -1, 128)
        v_3105 = self.pnnx_unique_1011(v_3104)
        v_3106 = self.pnnx_unique_1012(v_3105)
        v_3107 = torch.cat((v_3076, v_3106), dim=-1)
        v_3108 = self.pnnx_unique_1013(v_3107)
        v_3109 = self.pnnx_unique_1014(v_3108)
        v_3110 = self.pnnx_unique_1015(v_3109)
        v_3111 = self.pnnx_unique_1016(v_3110)
        v_3112 = (v_3076 + v_3111)
        v_3113 = self.pnnx_unique_1017(v_3045)
        v_3114 = self.pnnx_unique_1018(v_3045)
        v_3115 = self.pnnx_unique_1019(v_3045)
        v_3116 = v_3113.view(1, 72, 120, 128)
        v_3117 = v_3114.view(1, 72, 120, 128)
        v_3118 = v_3115.view(1, 72, 120, 128)
        v_3119 = torch.permute(input=v_3116, dims=(0,3,1,2))
        v_3120 = model.gmflow.utils.split_feature(v_3119)
        v_3121 = torch.permute(input=v_3117, dims=(0,3,1,2))
        v_3122 = model.gmflow.utils.split_feature(v_3121)
        v_3123 = torch.permute(input=v_3118, dims=(0,3,1,2))
        v_3124 = model.gmflow.utils.split_feature(v_3123)
        v_3125 = torch.permute(input=v_3122, dims=(0,1,3,4,2))
        v_3126 = v_3125.view(1, 64, -1, 128)
        v_3127 = torch.permute(input=v_3120, dims=(0,1,3,4,2))
        v_3128 = v_3127.view(1, 64, -1, 128)
        v_3129 = torch.permute(input=v_3126, dims=(0,1,3,2))
        v_3130 = torch.matmul(input=v_3128, other=v_3129)
        v_3131 = (v_3130 / 11.313708)
        v_3132 = F.softmax(input=v_3131, dim=-1)
        v_3133 = torch.permute(input=v_3124, dims=(0,1,3,4,2))
        v_3134 = v_3133.view(1, 64, -1, 128)
        v_3135 = torch.matmul(input=v_3132, other=v_3134)
        v_3136 = v_3135.view(1, 64, 9, 15, 128)
        v_3137 = torch.permute(input=v_3136, dims=(0,1,4,2,3))
        v_3138 = model.gmflow.utils.merge_splits(v_3137)
        v_3139 = torch.permute(input=v_3138, dims=(0,2,3,1))
        v_3140 = v_3139.view(1, -1, 128)
        v_3141 = self.pnnx_unique_1024(v_3140)
        v_3142 = self.pnnx_unique_1025(v_3141)
        v_3143 = (v_3045 + v_3142)
        v_3144 = self.pnnx_unique_1026(v_3143)
        v_3145 = self.pnnx_unique_1027(v_2978)
        v_3146 = self.pnnx_unique_1028(v_2978)
        v_3147 = v_3144.view(1, 72, 120, 128)
        v_3148 = v_3145.view(1, 72, 120, 128)
        v_3149 = v_3146.view(1, 72, 120, 128)
        v_3150 = torch.permute(input=v_3147, dims=(0,3,1,2))
        v_3151 = model.gmflow.utils.split_feature(v_3150)
        v_3152 = torch.permute(input=v_3148, dims=(0,3,1,2))
        v_3153 = model.gmflow.utils.split_feature(v_3152)
        v_3154 = torch.permute(input=v_3149, dims=(0,3,1,2))
        v_3155 = model.gmflow.utils.split_feature(v_3154)
        v_3156 = torch.permute(input=v_3153, dims=(0,1,3,4,2))
        v_3157 = v_3156.view(1, 64, -1, 128)
        v_3158 = torch.permute(input=v_3151, dims=(0,1,3,4,2))
        v_3159 = v_3158.view(1, 64, -1, 128)
        v_3160 = torch.permute(input=v_3157, dims=(0,1,3,2))
        v_3161 = torch.matmul(input=v_3159, other=v_3160)
        v_3162 = (v_3161 / 11.313708)
        v_3163 = F.softmax(input=v_3162, dim=-1)
        v_3164 = torch.permute(input=v_3155, dims=(0,1,3,4,2))
        v_3165 = v_3164.view(1, 64, -1, 128)
        v_3166 = torch.matmul(input=v_3163, other=v_3165)
        v_3167 = v_3166.view(1, 64, 9, 15, 128)
        v_3168 = torch.permute(input=v_3167, dims=(0,1,4,2,3))
        v_3169 = model.gmflow.utils.merge_splits(v_3168)
        v_3170 = torch.permute(input=v_3169, dims=(0,2,3,1))
        v_3171 = v_3170.view(1, -1, 128)
        v_3172 = self.pnnx_unique_1033(v_3171)
        v_3173 = self.pnnx_unique_1034(v_3172)
        v_3174 = torch.cat((v_3143, v_3173), dim=-1)
        v_3175 = self.pnnx_unique_1035(v_3174)
        v_3176 = self.pnnx_unique_1036(v_3175)
        v_3177 = self.pnnx_unique_1037(v_3176)
        v_3178 = self.pnnx_unique_1038(v_3177)
        v_3179 = (v_3143 + v_3178)
        v_3180 = self.pnnx_unique_1039(v_3112)
        v_3181 = self.pnnx_unique_1040(v_3112)
        v_3182 = self.pnnx_unique_1041(v_3112)
        v_3183 = v_3180.view(1, 72, 120, 128)
        v_3184 = v_3181.view(1, 72, 120, 128)
        v_3185 = v_3182.view(1, 72, 120, 128)
        v_3186 = torch.permute(input=v_3183, dims=(0,3,1,2))
        v_3187 = model.gmflow.utils.split_feature(v_3186)
        v_3188 = torch.permute(input=v_3184, dims=(0,3,1,2))
        v_3189 = model.gmflow.utils.split_feature(v_3188)
        v_3190 = torch.permute(input=v_3185, dims=(0,3,1,2))
        v_3191 = model.gmflow.utils.split_feature(v_3190)
        v_3192 = torch.permute(input=v_3189, dims=(0,1,3,4,2))
        v_3193 = v_3192.view(1, 64, -1, 128)
        v_3194 = torch.permute(input=v_3187, dims=(0,1,3,4,2))
        v_3195 = v_3194.view(1, 64, -1, 128)
        v_3196 = torch.permute(input=v_3193, dims=(0,1,3,2))
        v_3197 = torch.matmul(input=v_3195, other=v_3196)
        v_3198 = (v_3197 / 11.313708)
        v_3199 = F.softmax(input=v_3198, dim=-1)
        v_3200 = torch.permute(input=v_3191, dims=(0,1,3,4,2))
        v_3201 = v_3200.view(1, 64, -1, 128)
        v_3202 = torch.matmul(input=v_3199, other=v_3201)
        v_3203 = v_3202.view(1, 64, 9, 15, 128)
        v_3204 = torch.permute(input=v_3203, dims=(0,1,4,2,3))
        v_3205 = model.gmflow.utils.merge_splits(v_3204)
        v_3206 = torch.permute(input=v_3205, dims=(0,2,3,1))
        v_3207 = v_3206.view(1, -1, 128)
        v_3208 = self.pnnx_unique_1046(v_3207)
        v_3209 = self.pnnx_unique_1047(v_3208)
        v_3210 = (v_3112 + v_3209)
        v_3211 = self.pnnx_unique_1048(v_3210)
        v_3212 = self.pnnx_unique_1049(v_3179)
        v_3213 = self.pnnx_unique_1050(v_3179)
        v_3214 = v_3211.view(1, 72, 120, 128)
        v_3215 = v_3212.view(1, 72, 120, 128)
        v_3216 = v_3213.view(1, 72, 120, 128)
        v_3217 = torch.permute(input=v_3214, dims=(0,3,1,2))
        v_3218 = model.gmflow.utils.split_feature(v_3217)
        v_3219 = torch.permute(input=v_3215, dims=(0,3,1,2))
        v_3220 = model.gmflow.utils.split_feature(v_3219)
        v_3221 = torch.permute(input=v_3216, dims=(0,3,1,2))
        v_3222 = model.gmflow.utils.split_feature(v_3221)
        v_3223 = torch.permute(input=v_3220, dims=(0,1,3,4,2))
        v_3224 = v_3223.view(1, 64, -1, 128)
        v_3225 = torch.permute(input=v_3218, dims=(0,1,3,4,2))
        v_3226 = v_3225.view(1, 64, -1, 128)
        v_3227 = torch.permute(input=v_3224, dims=(0,1,3,2))
        v_3228 = torch.matmul(input=v_3226, other=v_3227)
        v_3229 = (v_3228 / 11.313708)
        v_3230 = F.softmax(input=v_3229, dim=-1)
        v_3231 = torch.permute(input=v_3222, dims=(0,1,3,4,2))
        v_3232 = v_3231.view(1, 64, -1, 128)
        v_3233 = torch.matmul(input=v_3230, other=v_3232)
        v_3234 = v_3233.view(1, 64, 9, 15, 128)
        v_3235 = torch.permute(input=v_3234, dims=(0,1,4,2,3))
        v_3236 = model.gmflow.utils.merge_splits(v_3235)
        v_3237 = torch.permute(input=v_3236, dims=(0,2,3,1))
        v_3238 = v_3237.view(1, -1, 128)
        v_3239 = self.pnnx_unique_1055(v_3238)
        v_3240 = self.pnnx_unique_1056(v_3239)
        v_3241 = torch.cat((v_3210, v_3240), dim=-1)
        v_3242 = self.pnnx_unique_1057(v_3241)
        v_3243 = self.pnnx_unique_1058(v_3242)
        v_3244 = self.pnnx_unique_1059(v_3243)
        v_3245 = self.pnnx_unique_1060(v_3244)
        v_3246 = (v_3210 + v_3245)
        v_3247 = self.pnnx_unique_1061(v_3179)
        v_3248 = self.pnnx_unique_1062(v_3179)
        v_3249 = self.pnnx_unique_1063(v_3179)
        v_3250 = v_3247.view(1, 72, 120, 128)
        v_3251 = v_3248.view(1, 72, 120, 128)
        v_3252 = v_3249.view(1, 72, 120, 128)
        v_3253 = torch.permute(input=v_3250, dims=(0,3,1,2))
        v_3254 = model.gmflow.utils.split_feature(v_3253)
        v_3255 = torch.permute(input=v_3251, dims=(0,3,1,2))
        v_3256 = model.gmflow.utils.split_feature(v_3255)
        v_3257 = torch.permute(input=v_3252, dims=(0,3,1,2))
        v_3258 = model.gmflow.utils.split_feature(v_3257)
        v_3259 = torch.permute(input=v_3256, dims=(0,1,3,4,2))
        v_3260 = v_3259.view(1, 64, -1, 128)
        v_3261 = torch.permute(input=v_3254, dims=(0,1,3,4,2))
        v_3262 = v_3261.view(1, 64, -1, 128)
        v_3263 = torch.permute(input=v_3260, dims=(0,1,3,2))
        v_3264 = torch.matmul(input=v_3262, other=v_3263)
        v_3265 = (v_3264 / 11.313708)
        v_3266 = F.softmax(input=v_3265, dim=-1)
        v_3267 = torch.permute(input=v_3258, dims=(0,1,3,4,2))
        v_3268 = v_3267.view(1, 64, -1, 128)
        v_3269 = torch.matmul(input=v_3266, other=v_3268)
        v_3270 = v_3269.view(1, 64, 9, 15, 128)
        v_3271 = torch.permute(input=v_3270, dims=(0,1,4,2,3))
        v_3272 = model.gmflow.utils.merge_splits(v_3271)
        v_3273 = torch.permute(input=v_3272, dims=(0,2,3,1))
        v_3274 = v_3273.view(1, -1, 128)
        v_3275 = self.pnnx_unique_1068(v_3274)
        v_3276 = self.pnnx_unique_1069(v_3275)
        v_3277 = (v_3179 + v_3276)
        v_3278 = self.pnnx_unique_1070(v_3277)
        v_3279 = self.pnnx_unique_1071(v_3112)
        v_3280 = self.pnnx_unique_1072(v_3112)
        v_3281 = v_3278.view(1, 72, 120, 128)
        v_3282 = v_3279.view(1, 72, 120, 128)
        v_3283 = v_3280.view(1, 72, 120, 128)
        v_3284 = torch.permute(input=v_3281, dims=(0,3,1,2))
        v_3285 = model.gmflow.utils.split_feature(v_3284)
        v_3286 = torch.permute(input=v_3282, dims=(0,3,1,2))
        v_3287 = model.gmflow.utils.split_feature(v_3286)
        v_3288 = torch.permute(input=v_3283, dims=(0,3,1,2))
        v_3289 = model.gmflow.utils.split_feature(v_3288)
        v_3290 = torch.permute(input=v_3287, dims=(0,1,3,4,2))
        v_3291 = v_3290.view(1, 64, -1, 128)
        v_3292 = torch.permute(input=v_3285, dims=(0,1,3,4,2))
        v_3293 = v_3292.view(1, 64, -1, 128)
        v_3294 = torch.permute(input=v_3291, dims=(0,1,3,2))
        v_3295 = torch.matmul(input=v_3293, other=v_3294)
        v_3296 = (v_3295 / 11.313708)
        v_3297 = F.softmax(input=v_3296, dim=-1)
        v_3298 = torch.permute(input=v_3289, dims=(0,1,3,4,2))
        v_3299 = v_3298.view(1, 64, -1, 128)
        v_3300 = torch.matmul(input=v_3297, other=v_3299)
        v_3301 = v_3300.view(1, 64, 9, 15, 128)
        v_3302 = torch.permute(input=v_3301, dims=(0,1,4,2,3))
        v_3303 = model.gmflow.utils.merge_splits(v_3302)
        v_3304 = torch.permute(input=v_3303, dims=(0,2,3,1))
        v_3305 = v_3304.view(1, -1, 128)
        v_3306 = self.pnnx_unique_1077(v_3305)
        v_3307 = self.pnnx_unique_1078(v_3306)
        v_3308 = torch.cat((v_3277, v_3307), dim=-1)
        v_3309 = self.pnnx_unique_1079(v_3308)
        v_3310 = self.pnnx_unique_1080(v_3309)
        v_3311 = self.pnnx_unique_1081(v_3310)
        v_3312 = self.pnnx_unique_1082(v_3311)
        v_3313 = (v_3277 + v_3312)
        v_3314 = self.pnnx_unique_1083(v_3246)
        v_3315 = self.pnnx_unique_1084(v_3246)
        v_3316 = self.pnnx_unique_1085(v_3246)
        v_3317 = v_3314.view(1, 72, 120, 128)
        v_3318 = v_3315.view(1, 72, 120, 128)
        v_3319 = v_3316.view(1, 72, 120, 128)
        v_3320 = torch.permute(input=v_3317, dims=(0,3,1,2))
        v_3321 = model.gmflow.utils.split_feature(v_3320)
        v_3322 = torch.permute(input=v_3318, dims=(0,3,1,2))
        v_3323 = model.gmflow.utils.split_feature(v_3322)
        v_3324 = torch.permute(input=v_3319, dims=(0,3,1,2))
        v_3325 = model.gmflow.utils.split_feature(v_3324)
        v_3326 = torch.permute(input=v_3323, dims=(0,1,3,4,2))
        v_3327 = v_3326.view(1, 64, -1, 128)
        v_3328 = torch.permute(input=v_3321, dims=(0,1,3,4,2))
        v_3329 = v_3328.view(1, 64, -1, 128)
        v_3330 = torch.permute(input=v_3327, dims=(0,1,3,2))
        v_3331 = torch.matmul(input=v_3329, other=v_3330)
        v_3332 = (v_3331 / 11.313708)
        v_3333 = F.softmax(input=v_3332, dim=-1)
        v_3334 = torch.permute(input=v_3325, dims=(0,1,3,4,2))
        v_3335 = v_3334.view(1, 64, -1, 128)
        v_3336 = torch.matmul(input=v_3333, other=v_3335)
        v_3337 = v_3336.view(1, 64, 9, 15, 128)
        v_3338 = torch.permute(input=v_3337, dims=(0,1,4,2,3))
        v_3339 = model.gmflow.utils.merge_splits(v_3338)
        v_3340 = torch.permute(input=v_3339, dims=(0,2,3,1))
        v_3341 = v_3340.view(1, -1, 128)
        v_3342 = self.pnnx_unique_1090(v_3341)
        v_3343 = self.pnnx_unique_1091(v_3342)
        v_3344 = (v_3246 + v_3343)
        v_3345 = self.pnnx_unique_1092(v_3344)
        v_3346 = self.pnnx_unique_1093(v_3313)
        v_3347 = self.pnnx_unique_1094(v_3313)
        v_3348 = v_3345.view(1, 72, 120, 128)
        v_3349 = v_3346.view(1, 72, 120, 128)
        v_3350 = v_3347.view(1, 72, 120, 128)
        v_3351 = torch.permute(input=v_3348, dims=(0,3,1,2))
        v_3352 = model.gmflow.utils.split_feature(v_3351)
        v_3353 = torch.permute(input=v_3349, dims=(0,3,1,2))
        v_3354 = model.gmflow.utils.split_feature(v_3353)
        v_3355 = torch.permute(input=v_3350, dims=(0,3,1,2))
        v_3356 = model.gmflow.utils.split_feature(v_3355)
        v_3357 = torch.permute(input=v_3354, dims=(0,1,3,4,2))
        v_3358 = v_3357.view(1, 64, -1, 128)
        v_3359 = torch.permute(input=v_3352, dims=(0,1,3,4,2))
        v_3360 = v_3359.view(1, 64, -1, 128)
        v_3361 = torch.permute(input=v_3358, dims=(0,1,3,2))
        v_3362 = torch.matmul(input=v_3360, other=v_3361)
        v_3363 = (v_3362 / 11.313708)
        v_3364 = F.softmax(input=v_3363, dim=-1)
        v_3365 = torch.permute(input=v_3356, dims=(0,1,3,4,2))
        v_3366 = v_3365.view(1, 64, -1, 128)
        v_3367 = torch.matmul(input=v_3364, other=v_3366)
        v_3368 = v_3367.view(1, 64, 9, 15, 128)
        v_3369 = torch.permute(input=v_3368, dims=(0,1,4,2,3))
        v_3370 = model.gmflow.utils.merge_splits(v_3369)
        v_3371 = torch.permute(input=v_3370, dims=(0,2,3,1))
        v_3372 = v_3371.view(1, -1, 128)
        v_3373 = self.pnnx_unique_1099(v_3372)
        v_3374 = self.pnnx_unique_1100(v_3373)
        v_3375 = torch.cat((v_3344, v_3374), dim=-1)
        v_3376 = self.pnnx_unique_1101(v_3375)
        v_3377 = self.pnnx_unique_1102(v_3376)
        v_3378 = self.pnnx_unique_1103(v_3377)
        v_3379 = self.pnnx_unique_1104(v_3378)
        v_3380 = (v_3344 + v_3379)
        v_3381 = self.pnnx_unique_1105(v_3313)
        v_3382 = self.pnnx_unique_1106(v_3313)
        v_3383 = self.pnnx_unique_1107(v_3313)
        v_3384 = v_3381.view(1, 72, 120, 128)
        v_3385 = v_3382.view(1, 72, 120, 128)
        v_3386 = v_3383.view(1, 72, 120, 128)
        v_3387 = torch.permute(input=v_3384, dims=(0,3,1,2))
        v_3388 = model.gmflow.utils.split_feature(v_3387)
        v_3389 = torch.permute(input=v_3385, dims=(0,3,1,2))
        v_3390 = model.gmflow.utils.split_feature(v_3389)
        v_3391 = torch.permute(input=v_3386, dims=(0,3,1,2))
        v_3392 = model.gmflow.utils.split_feature(v_3391)
        v_3393 = torch.permute(input=v_3390, dims=(0,1,3,4,2))
        v_3394 = v_3393.view(1, 64, -1, 128)
        v_3395 = torch.permute(input=v_3388, dims=(0,1,3,4,2))
        v_3396 = v_3395.view(1, 64, -1, 128)
        v_3397 = torch.permute(input=v_3394, dims=(0,1,3,2))
        v_3398 = torch.matmul(input=v_3396, other=v_3397)
        v_3399 = (v_3398 / 11.313708)
        v_3400 = F.softmax(input=v_3399, dim=-1)
        v_3401 = torch.permute(input=v_3392, dims=(0,1,3,4,2))
        v_3402 = v_3401.view(1, 64, -1, 128)
        v_3403 = torch.matmul(input=v_3400, other=v_3402)
        v_3404 = v_3403.view(1, 64, 9, 15, 128)
        v_3405 = torch.permute(input=v_3404, dims=(0,1,4,2,3))
        v_3406 = model.gmflow.utils.merge_splits(v_3405)
        v_3407 = torch.permute(input=v_3406, dims=(0,2,3,1))
        v_3408 = v_3407.view(1, -1, 128)
        v_3409 = self.pnnx_unique_1112(v_3408)
        v_3410 = self.pnnx_unique_1113(v_3409)
        v_3411 = (v_3313 + v_3410)
        v_3412 = self.pnnx_unique_1114(v_3411)
        v_3413 = self.pnnx_unique_1115(v_3246)
        v_3414 = self.pnnx_unique_1116(v_3246)
        v_3415 = v_3412.view(1, 72, 120, 128)
        v_3416 = v_3413.view(1, 72, 120, 128)
        v_3417 = v_3414.view(1, 72, 120, 128)
        v_3418 = torch.permute(input=v_3415, dims=(0,3,1,2))
        v_3419 = model.gmflow.utils.split_feature(v_3418)
        v_3420 = torch.permute(input=v_3416, dims=(0,3,1,2))
        v_3421 = model.gmflow.utils.split_feature(v_3420)
        v_3422 = torch.permute(input=v_3417, dims=(0,3,1,2))
        v_3423 = model.gmflow.utils.split_feature(v_3422)
        v_3424 = torch.permute(input=v_3421, dims=(0,1,3,4,2))
        v_3425 = v_3424.view(1, 64, -1, 128)
        v_3426 = torch.permute(input=v_3419, dims=(0,1,3,4,2))
        v_3427 = v_3426.view(1, 64, -1, 128)
        v_3428 = torch.permute(input=v_3425, dims=(0,1,3,2))
        v_3429 = torch.matmul(input=v_3427, other=v_3428)
        v_3430 = (v_3429 / 11.313708)
        v_3431 = F.softmax(input=v_3430, dim=-1)
        v_3432 = torch.permute(input=v_3423, dims=(0,1,3,4,2))
        v_3433 = v_3432.view(1, 64, -1, 128)
        v_3434 = torch.matmul(input=v_3431, other=v_3433)
        v_3435 = v_3434.view(1, 64, 9, 15, 128)
        v_3436 = torch.permute(input=v_3435, dims=(0,1,4,2,3))
        v_3437 = model.gmflow.utils.merge_splits(v_3436)
        v_3438 = torch.permute(input=v_3437, dims=(0,2,3,1))
        v_3439 = v_3438.view(1, -1, 128)
        v_3440 = self.pnnx_unique_1121(v_3439)
        v_3441 = self.pnnx_unique_1122(v_3440)
        v_3442 = torch.cat((v_3411, v_3441), dim=-1)
        v_3443 = self.pnnx_unique_1123(v_3442)
        v_3444 = self.pnnx_unique_1124(v_3443)
        v_3445 = self.pnnx_unique_1125(v_3444)
        v_3446 = self.pnnx_unique_1126(v_3445)
        v_3447 = (v_3411 + v_3446)
        v_3448 = self.pnnx_unique_1127(v_3380)
        v_3449 = self.pnnx_unique_1128(v_3380)
        v_3450 = self.pnnx_unique_1129(v_3380)
        v_3451 = v_3448.view(1, 72, 120, 128)
        v_3452 = v_3449.view(1, 72, 120, 128)
        v_3453 = v_3450.view(1, 72, 120, 128)
        v_3454 = torch.permute(input=v_3451, dims=(0,3,1,2))
        v_3455 = model.gmflow.utils.split_feature(v_3454)
        v_3456 = torch.permute(input=v_3452, dims=(0,3,1,2))
        v_3457 = model.gmflow.utils.split_feature(v_3456)
        v_3458 = torch.permute(input=v_3453, dims=(0,3,1,2))
        v_3459 = model.gmflow.utils.split_feature(v_3458)
        v_3460 = torch.permute(input=v_3457, dims=(0,1,3,4,2))
        v_3461 = v_3460.view(1, 64, -1, 128)
        v_3462 = torch.permute(input=v_3455, dims=(0,1,3,4,2))
        v_3463 = v_3462.view(1, 64, -1, 128)
        v_3464 = torch.permute(input=v_3461, dims=(0,1,3,2))
        v_3465 = torch.matmul(input=v_3463, other=v_3464)
        v_3466 = (v_3465 / 11.313708)
        v_3467 = F.softmax(input=v_3466, dim=-1)
        v_3468 = torch.permute(input=v_3459, dims=(0,1,3,4,2))
        v_3469 = v_3468.view(1, 64, -1, 128)
        v_3470 = torch.matmul(input=v_3467, other=v_3469)
        v_3471 = v_3470.view(1, 64, 9, 15, 128)
        v_3472 = torch.permute(input=v_3471, dims=(0,1,4,2,3))
        v_3473 = model.gmflow.utils.merge_splits(v_3472)
        v_3474 = torch.permute(input=v_3473, dims=(0,2,3,1))
        v_3475 = v_3474.view(1, -1, 128)
        v_3476 = self.pnnx_unique_1134(v_3475)
        v_3477 = self.pnnx_unique_1135(v_3476)
        v_3478 = (v_3380 + v_3477)
        v_3479 = self.pnnx_unique_1136(v_3478)
        v_3480 = self.pnnx_unique_1137(v_3447)
        v_3481 = self.pnnx_unique_1138(v_3447)
        v_3482 = v_3479.view(1, 72, 120, 128)
        v_3483 = v_3480.view(1, 72, 120, 128)
        v_3484 = v_3481.view(1, 72, 120, 128)
        v_3485 = torch.permute(input=v_3482, dims=(0,3,1,2))
        v_3486 = model.gmflow.utils.split_feature(v_3485)
        v_3487 = torch.permute(input=v_3483, dims=(0,3,1,2))
        v_3488 = model.gmflow.utils.split_feature(v_3487)
        v_3489 = torch.permute(input=v_3484, dims=(0,3,1,2))
        v_3490 = model.gmflow.utils.split_feature(v_3489)
        v_3491 = torch.permute(input=v_3488, dims=(0,1,3,4,2))
        v_3492 = v_3491.view(1, 64, -1, 128)
        v_3493 = torch.permute(input=v_3486, dims=(0,1,3,4,2))
        v_3494 = v_3493.view(1, 64, -1, 128)
        v_3495 = torch.permute(input=v_3492, dims=(0,1,3,2))
        v_3496 = torch.matmul(input=v_3494, other=v_3495)
        v_3497 = (v_3496 / 11.313708)
        v_3498 = F.softmax(input=v_3497, dim=-1)
        v_3499 = torch.permute(input=v_3490, dims=(0,1,3,4,2))
        v_3500 = v_3499.view(1, 64, -1, 128)
        v_3501 = torch.matmul(input=v_3498, other=v_3500)
        v_3502 = v_3501.view(1, 64, 9, 15, 128)
        v_3503 = torch.permute(input=v_3502, dims=(0,1,4,2,3))
        v_3504 = model.gmflow.utils.merge_splits(v_3503)
        v_3505 = torch.permute(input=v_3504, dims=(0,2,3,1))
        v_3506 = v_3505.view(1, -1, 128)
        v_3507 = self.pnnx_unique_1143(v_3506)
        v_3508 = self.pnnx_unique_1144(v_3507)
        v_3509 = torch.cat((v_3478, v_3508), dim=-1)
        v_3510 = self.pnnx_unique_1145(v_3509)
        v_3511 = self.pnnx_unique_1146(v_3510)
        v_3512 = self.pnnx_unique_1147(v_3511)
        v_3513 = self.pnnx_unique_1148(v_3512)
        v_3514 = (v_3478 + v_3513)
        v_3515 = self.pnnx_unique_1149(v_3447)
        v_3516 = self.pnnx_unique_1150(v_3447)
        v_3517 = self.pnnx_unique_1151(v_3447)
        v_3518 = v_3515.view(1, 72, 120, 128)
        v_3519 = v_3516.view(1, 72, 120, 128)
        v_3520 = v_3517.view(1, 72, 120, 128)
        v_3521 = torch.permute(input=v_3518, dims=(0,3,1,2))
        v_3522 = model.gmflow.utils.split_feature(v_3521)
        v_3523 = torch.permute(input=v_3519, dims=(0,3,1,2))
        v_3524 = model.gmflow.utils.split_feature(v_3523)
        v_3525 = torch.permute(input=v_3520, dims=(0,3,1,2))
        v_3526 = model.gmflow.utils.split_feature(v_3525)
        v_3527 = torch.permute(input=v_3524, dims=(0,1,3,4,2))
        v_3528 = v_3527.view(1, 64, -1, 128)
        v_3529 = torch.permute(input=v_3522, dims=(0,1,3,4,2))
        v_3530 = v_3529.view(1, 64, -1, 128)
        v_3531 = torch.permute(input=v_3528, dims=(0,1,3,2))
        v_3532 = torch.matmul(input=v_3530, other=v_3531)
        v_3533 = (v_3532 / 11.313708)
        v_3534 = F.softmax(input=v_3533, dim=-1)
        v_3535 = torch.permute(input=v_3526, dims=(0,1,3,4,2))
        v_3536 = v_3535.view(1, 64, -1, 128)
        v_3537 = torch.matmul(input=v_3534, other=v_3536)
        v_3538 = v_3537.view(1, 64, 9, 15, 128)
        v_3539 = torch.permute(input=v_3538, dims=(0,1,4,2,3))
        v_3540 = model.gmflow.utils.merge_splits(v_3539)
        v_3541 = torch.permute(input=v_3540, dims=(0,2,3,1))
        v_3542 = v_3541.view(1, -1, 128)
        v_3543 = self.pnnx_unique_1156(v_3542)
        v_3544 = self.pnnx_unique_1157(v_3543)
        v_3545 = (v_3447 + v_3544)
        v_3546 = self.pnnx_unique_1158(v_3545)
        v_3547 = self.pnnx_unique_1159(v_3380)
        v_3548 = self.pnnx_unique_1160(v_3380)
        v_3549 = v_3546.view(1, 72, 120, 128)
        v_3550 = v_3547.view(1, 72, 120, 128)
        v_3551 = v_3548.view(1, 72, 120, 128)
        v_3552 = torch.permute(input=v_3549, dims=(0,3,1,2))
        v_3553 = model.gmflow.utils.split_feature(v_3552)
        v_3554 = torch.permute(input=v_3550, dims=(0,3,1,2))
        v_3555 = model.gmflow.utils.split_feature(v_3554)
        v_3556 = torch.permute(input=v_3551, dims=(0,3,1,2))
        v_3557 = model.gmflow.utils.split_feature(v_3556)
        v_3558 = torch.permute(input=v_3555, dims=(0,1,3,4,2))
        v_3559 = v_3558.view(1, 64, -1, 128)
        v_3560 = torch.permute(input=v_3553, dims=(0,1,3,4,2))
        v_3561 = v_3560.view(1, 64, -1, 128)
        v_3562 = torch.permute(input=v_3559, dims=(0,1,3,2))
        v_3563 = torch.matmul(input=v_3561, other=v_3562)
        v_3564 = (v_3563 / 11.313708)
        v_3565 = F.softmax(input=v_3564, dim=-1)
        v_3566 = torch.permute(input=v_3557, dims=(0,1,3,4,2))
        v_3567 = v_3566.view(1, 64, -1, 128)
        v_3568 = torch.matmul(input=v_3565, other=v_3567)
        v_3569 = v_3568.view(1, 64, 9, 15, 128)
        v_3570 = torch.permute(input=v_3569, dims=(0,1,4,2,3))
        v_3571 = model.gmflow.utils.merge_splits(v_3570)
        v_3572 = torch.permute(input=v_3571, dims=(0,2,3,1))
        v_3573 = v_3572.view(1, -1, 128)
        v_3574 = self.pnnx_unique_1165(v_3573)
        v_3575 = self.pnnx_unique_1166(v_3574)
        v_3576 = torch.cat((v_3545, v_3575), dim=-1)
        v_3577 = self.pnnx_unique_1167(v_3576)
        v_3578 = self.pnnx_unique_1168(v_3577)
        v_3579 = self.pnnx_unique_1169(v_3578)
        v_3580 = self.pnnx_unique_1170(v_3579)
        v_3581 = (v_3545 + v_3580)
        v_3582 = v_3514.view(1, 72, 120, 128)
        v_3583 = v_3581.view(1, 72, 120, 128)
        v_3584 = torch.permute(input=v_3583, dims=(0,3,1,2))
        v_3585 = v_3584.contiguous(memory_format=torch.contiguous_format)
        v_3586 = torch.permute(input=v_3582, dims=(0,3,1,2))
        v_3587 = v_3586.contiguous(memory_format=torch.contiguous_format)
        v_3588 = self.pnnx_fold_coords_init_1_pnnx_fold_coords_init_1
        v_3589 = self.pnnx_fold_sample_coords_14_pnnx_fold_sample_coords_14
        v_3590 = self.pnnx_fold_grid_12_pnnx_fold_grid_12
        v_3591 = F.grid_sample(input=v_3585, grid=v_3590, align_corners=True, mode='bilinear', padding_mode='zeros')
        v_3592 = torch.permute(input=v_3587, dims=(0,2,3,1))
        v_3593 = v_3592.view(1, 8640, 1, 128)
        v_3594 = torch.permute(input=v_3591, dims=(0,2,1,3))
        v_3595 = torch.matmul(input=v_3593, other=v_3594)
        v_3596 = v_3595.view(1, 8640, -1)
        v_3597 = (v_3596 / 11.313708)
        v_3598 = F.softmax(input=v_3597, dim=-1)
        v_3599 = torch.unsqueeze(input=v_3598, dim=-2)
        v_3600 = torch.matmul(input=v_3599, other=v_3589)
        v_3601 = v_3600.reshape(1, 72, 120, 2)
        v_3602 = torch.permute(input=v_3601, dims=(0,3,1,2))
        v_3603 = (v_2753 + (v_3602 - v_3588))
        v_3604 = v_3587.view(1, 128, -1)
        v_3605 = torch.permute(input=v_3604, dims=(0,2,1))
        v_3606 = self.pnnx_unique_1171(v_3605)
        v_3607 = self.pnnx_unique_1172(v_3605)
        v_3608 = torch.permute(input=v_3607, dims=(0,2,1))
        v_3609 = v_3608.reshape(1, 128, 72, 120)
        v_3610 = F.unfold(input=v_3609, dilation=(1,1), kernel_size=(3,3), padding=(1,1), stride=(1,1))
        v_3611 = v_3610.view(1, 128, 9, 72, 120)
        v_3612 = F.unfold(input=v_3603, dilation=(1,1), kernel_size=(3,3), padding=(1,1), stride=(1,1))
        v_3613 = v_3612.view(1, 2, 9, 72, 120)
        v_3614 = torch.permute(input=v_3611, dims=(0,3,4,1,2))
        v_3615 = v_3614.reshape(1, 8640, 128, 9)
        v_3616 = v_3606.reshape(1, 8640, 1, 128)
        v_3617 = torch.matmul(input=v_3616, other=v_3615)
        v_3618 = (v_3617 / 11.313708)
        v_3619 = F.softmax(input=v_3618, dim=-1)
        v_3620 = torch.permute(input=v_3613, dims=(0,3,4,2,1))
        v_3621 = v_3620.reshape(1, 8640, 9, 2)
        v_3622 = torch.matmul(input=v_3619, other=v_3621)
        v_3623 = v_3622.view(1, 72, 120, 2)
        v_3624 = torch.permute(input=v_3623, dims=(0,3,1,2))
        v_3625 = v_3624.contiguous(memory_format=torch.contiguous_format)
        v_3626 = torch.cat((v_3625, v_3587), dim=1)
        v_3627 = self.pnnx_unique_1173(v_3626)
        v_3628 = self.pnnx_unique_1174(v_3627)
        v_3629 = self.pnnx_unique_1175(v_3628)
        v_3630 = v_3629.view(1, 1, 9, -1)
        v_3631 = F.softmax(input=v_3630, dim=2)
        v_3632 = v_3631.repeat(1, 2, 1, 1)
        v_3633 = (v_3625 * 4)
        v_3634 = F.unfold(input=v_3633, dilation=(1,1), kernel_size=(3,3), padding=(1,1), stride=(1,1))
        v_3635 = v_3634.view(1, 18, 1, 8640)
        v_3636 = v_3635.repeat(1, 1, 16, 1)
        v_3637 = v_3636.view(1, 18, 16, 72, 120)
        v_3638 = v_3632.view(1, 18, 16, 72, 120)
        v_3639 = (v_3638 * v_3637)
        v_3640 = v_3639.view(1, 2, 9, -1)
        v_3641 = torch.sum(input=v_3640, dim=(2,), keepdim=False)
        v_3642 = v_3641.view(1, 2, 16, 8640)
        v_3643 = model.gmflow.utils.convex_upsampling(v_3625, v_3642)
        v_3644 = self.pnnx_fold_grid_1_pnnx_fold_grid_1
        v_3645 = v_1901[:,:1]
        v_3646 = (v_3645 / 239.500000)
        v_3647 = v_1901[:,1:2]
        v_3648 = (v_3647 / 143.500000)
        v_3649 = torch.cat((v_3646, v_3648), dim=1)
        v_3650 = (v_3644 + v_3649)
        v_3651 = torch.permute(input=v_3650, dims=(0,2,3,1))
        v_3652 = F.grid_sample(input=v_36, grid=v_3651, align_corners=True, mode='bilinear', padding_mode='zeros')
        v_3653 = torch.abs((v_26 - v_3652))
        v_3654 = self.pnnx_fold_grid1_1_pnnx_fold_grid1_1
        v_3655 = v_3643[:,:1]
        v_3656 = (v_3655 / 239.500000)
        v_3657 = v_3643[:,1:2]
        v_3658 = (v_3657 / 143.500000)
        v_3659 = torch.cat((v_3656, v_3658), dim=1)
        v_3660 = (v_3654 + v_3659)
        v_3661 = torch.permute(input=v_3660, dims=(0,2,3,1))
        v_3662 = F.grid_sample(input=v_26, grid=v_3661, align_corners=True, mode='bilinear', padding_mode='zeros')
        v_3663 = torch.abs((v_36 - v_3662))
        v_3664 = torch.norm(input=v_3643, dim=(1,), keepdim=False, p='fro')
        v_3665 = torch.norm(input=v_1901, dim=(1,), keepdim=False, p='fro')
        v_3666 = self.pnnx_fold_12945_pnnx_fold_12945
        v_3667 = (v_3666 + v_1901)
        v_3668, v_3669 = torch.unbind(v_3667, dim=1)
        v_3670 = (((v_3668 * 2) / 479.000000) - 1)
        v_3671 = (((v_3669 * 2) / 287.000000) - 1)
        v_3672 = torch.unsqueeze(input=v_3671, dim=3)
        v_3673 = torch.unsqueeze(input=v_3670, dim=3)
        v_3674 = self.pnnx_fold_12994_pnnx_fold_12994
        v_3675 = (v_3674 + v_3643)
        v_3676, v_3677 = torch.unbind(v_3675, dim=1)
        v_3678 = (((v_3676 * 2) / 479.000000) - 1)
        v_3679 = (((v_3677 * 2) / 287.000000) - 1)
        v_3680 = torch.unsqueeze(input=v_3679, dim=3)
        v_3681 = torch.unsqueeze(input=v_3678, dim=3)
        v_3682 = torch.cat((v_3673, v_3672), dim=3)
        v_3683 = F.grid_sample(input=v_3643, grid=v_3682, align_corners=True, mode='bilinear', padding_mode='zeros')
        v_3684 = (v_1901 + v_3683)
        v_3685 = torch.cat((v_3681, v_3680), dim=3)
        v_3686 = F.grid_sample(input=v_1901, grid=v_3685, align_corners=True, mode='bilinear', padding_mode='zeros')
        v_3687 = (v_3643 + v_3686)
        v_3688 = (((v_3665 + v_3664) * 1.000000e-02) + 5.000000e-01)
        v_3689 = torch.norm(input=v_3684, dim=(1,), keepdim=False, p='fro')
        v_3690 = torch.gt(input=v_3689, other=v_3688)
        v_3691 = torch.norm(input=v_3687, dim=(1,), keepdim=False, p='fro')
        v_3692 = torch.gt(input=v_3691, other=v_3688)
        v_3693, v_3694 = torch.unbind(v_1901, dim=1)
        v_3695 = (v_3693 / 239.500000)
        v_3696 = (v_3694 / 143.500000)
        v_3697 = torch.unsqueeze(input=v_3696, dim=1)
        v_3698 = torch.unsqueeze(input=v_3695, dim=1)
        v_3699, v_3700 = torch.unbind(v_3643, dim=1)
        v_3701 = (v_3699 / 239.500000)
        v_3702 = (v_3700 / 143.500000)
        v_3703 = torch.unsqueeze(input=v_3702, dim=1)
        v_3704 = torch.unsqueeze(input=v_3701, dim=1)
        v_3705 = torch.mean(input=v_3653, dim=(1,), keepdim=True)
        v_3706 = torch.neg(v_3705)
        v_3707 = torch.mean(input=v_3663, dim=(1,), keepdim=True)
        v_3708 = torch.neg(v_3707)
        v_3709 = torch.cat((v_3704, v_3703), dim=1)
        v_3710 = torch.cat((v_3698, v_3697), dim=1)
        v_3711 = torch.unsqueeze(input=v_3692, dim=1)
        v_3712 = torch.unsqueeze(input=v_3690, dim=1)
        v_3713 = torch.cat((v_3712, v_3711), dim=1)
        v_3714 = torch.cat((v_3710, v_3709), dim=1)
        v_3715 = torch.cat((v_3706, v_3708), dim=1)
        v_3716 = torch.cat((v_26, v_36), dim=1)
        v_3717 = torch.cat((v_3716, v_3715, v_3714, v_3713), dim=1)
        v_3718 = self.metricnet_metric_in(v_3717)
        v_3719 = self.metricnet_metric_net1_0(v_3718)
        v_3720 = self.metricnet_metric_net1_1(v_3719)
        v_3721 = (v_3720 + v_3718)
        v_3722 = self.metricnet_metric_net2_0(v_3721)
        v_3723 = self.metricnet_metric_net2_1(v_3722)
        v_3724 = (v_3723 + v_3721)
        v_3725 = self.metricnet_metric_net3_0(v_3724)
        v_3726 = self.metricnet_metric_net3_1(v_3725)
        v_3727 = (v_3726 + v_3724)
        v_3728 = self.metricnet_metric_out_0(v_3727)
        v_3729 = self.metricnet_metric_out_1(v_3728)
        v_3730 = self.metricnet_metric_out_2(v_3729)
        v_3731 = (v_3730 * 10)
        v_3732 = (v_1901, v_3643, v_3731, v_5, v_9, v_13, v_17, v_21, v_25, )
        return v_3732

def export_torchscript():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 576, 960, dtype=torch.float)
    v_1 = torch.rand(1, 3, 576, 960, dtype=torch.float)

    mod = torch.jit.trace(net, (v_0, v_1))
    mod.save("D:/60-fps-Project/VFI/GMFSS2NCNN/reuse_576_pnnx.py.pt")

def export_onnx():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 576, 960, dtype=torch.float)
    v_1 = torch.rand(1, 3, 576, 960, dtype=torch.float)

    torch.onnx._export(net, (v_0, v_1), "D:/60-fps-Project/VFI/GMFSS2NCNN/reuse_576_pnnx.py.onnx", export_params=True, operator_export_type=torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK, opset_version=13, input_names=['in0', 'in1'], output_names=['out0'])

def test_inference():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 576, 960, dtype=torch.float)
    v_1 = torch.rand(1, 3, 576, 960, dtype=torch.float)

    return net(v_0, v_1)
