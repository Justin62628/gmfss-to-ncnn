import os
import numpy as np
import tempfile, zipfile
import torch
import torch.nn as nn
import torch.nn.functional as F
try:
    import torchvision
except:
    pass

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()

        self.ifnet_block0_conv0_0_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=7, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.ifnet_block0_conv0_0_1 = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block0_conv0_1_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.ifnet_block0_conv0_1_1 = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block0_convblock_0_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block0_convblock_0_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block0_convblock_1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block0_convblock_1_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block0_convblock_2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block0_convblock_2_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block0_convblock_3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block0_convblock_3_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block0_convblock_4_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block0_convblock_4_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block0_convblock_5_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block0_convblock_5_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block0_convblock_6_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block0_convblock_6_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block0_convblock_7_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block0_convblock_7_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block0_lastconv_0 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(4,4), out_channels=24, output_padding=(0,0), padding=(1,1), stride=(2,2))
        self.ifnet_block0_lastconv_1 = nn.PixelShuffle(upscale_factor=2)
        self.ifnet_block1_conv0_0_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=12, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.ifnet_block1_conv0_0_1 = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block1_conv0_1_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.ifnet_block1_conv0_1_1 = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block1_convblock_0_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block1_convblock_0_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block1_convblock_1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block1_convblock_1_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block1_convblock_2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block1_convblock_2_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block1_convblock_3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block1_convblock_3_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block1_convblock_4_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block1_convblock_4_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block1_convblock_5_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block1_convblock_5_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block1_convblock_6_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block1_convblock_6_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block1_convblock_7_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block1_convblock_7_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block1_lastconv_0 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(4,4), out_channels=24, output_padding=(0,0), padding=(1,1), stride=(2,2))
        self.ifnet_block1_lastconv_1 = nn.PixelShuffle(upscale_factor=2)
        self.ifnet_block2_conv0_0_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=12, kernel_size=(3,3), out_channels=48, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.ifnet_block2_conv0_0_1 = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block2_conv0_1_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=48, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.ifnet_block2_conv0_1_1 = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block2_convblock_0_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block2_convblock_0_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block2_convblock_1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block2_convblock_1_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block2_convblock_2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block2_convblock_2_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block2_convblock_3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block2_convblock_3_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block2_convblock_4_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block2_convblock_4_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block2_convblock_5_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block2_convblock_5_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block2_convblock_6_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block2_convblock_6_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block2_convblock_7_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(3,3), out_channels=96, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block2_convblock_7_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block2_lastconv_0 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(4,4), out_channels=24, output_padding=(0,0), padding=(1,1), stride=(2,2))
        self.ifnet_block2_lastconv_1 = nn.PixelShuffle(upscale_factor=2)
        self.ifnet_block3_conv0_0_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=12, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.ifnet_block3_conv0_0_1 = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block3_conv0_1_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.ifnet_block3_conv0_1_1 = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block3_convblock_0_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block3_convblock_0_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block3_convblock_1_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block3_convblock_1_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block3_convblock_2_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block3_convblock_2_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block3_convblock_3_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block3_convblock_3_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block3_convblock_4_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block3_convblock_4_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block3_convblock_5_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block3_convblock_5_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block3_convblock_6_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block3_convblock_6_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block3_convblock_7_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.ifnet_block3_convblock_7_relu = nn.LeakyReLU(negative_slope=0.200000)
        self.ifnet_block3_lastconv_0 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(4,4), out_channels=24, output_padding=(0,0), padding=(1,1), stride=(2,2))
        self.ifnet_block3_lastconv_1 = nn.PixelShuffle(upscale_factor=2)
        self.fusionnet_residual_model_head0_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_head0_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=9, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_head0_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_head0_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_head1_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_head1_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_head1_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_head1_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_01_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_01_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_01_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_01_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_downsample_model_10_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_downsample_model_10_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.fusionnet_downsample_model_10_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_downsample_model_10_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_head2_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_head2_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_head2_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_head2_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_downsample_model_20_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_downsample_model_20_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.fusionnet_downsample_model_20_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_downsample_model_20_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_head3_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_head3_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=384, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_head3_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_head3_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_11_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_11_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_11_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_11_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_downsample_model_11_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_downsample_model_11_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.fusionnet_downsample_model_11_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_downsample_model_11_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_21_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_21_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_21_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_21_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_downsample_model_21_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_downsample_model_21_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.fusionnet_downsample_model_21_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_downsample_model_21_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_24_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_24_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_24_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_24_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_25_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_25_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_25_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_25_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(3,3), out_channels=192, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_upsample_model_14_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_upsample_model_14_1 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(4,4), out_channels=128, output_padding=(0,0), padding=(1,1), stride=(2,2))
        self.fusionnet_upsample_model_14_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_upsample_model_14_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_14_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_14_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_14_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_14_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_upsample_model_04_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_upsample_model_04_1 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(4,4), out_channels=64, output_padding=(0,0), padding=(1,1), stride=(2,2))
        self.fusionnet_upsample_model_04_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_upsample_model_04_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_04_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_04_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_04_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_04_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_upsample_model_15_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_upsample_model_15_1 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(4,4), out_channels=128, output_padding=(0,0), padding=(1,1), stride=(2,2))
        self.fusionnet_upsample_model_15_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_upsample_model_15_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_15_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_15_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_15_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_15_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_upsample_model_05_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_upsample_model_05_1 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(4,4), out_channels=64, output_padding=(0,0), padding=(1,1), stride=(2,2))
        self.fusionnet_upsample_model_05_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_upsample_model_05_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_05_0 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_05_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_05_2 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_05_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_tail_conv_before_upsample_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_tail_conv_before_upsample_1 = nn.PReLU(num_parameters=1)
        self.fusionnet_residual_model_tail_upsample_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.fusionnet_residual_model_tail_upsample_1 = nn.PixelShuffle(upscale_factor=2)
        self.fusionnet_residual_model_tail_conv_last = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=3, padding=(1,1), padding_mode='zeros', stride=(1,1))

        archive = zipfile.ZipFile('D:/60-fps-Project/VFI/GMFSS2NCNN/infer_576.pnnx.bin', 'r')
        self.ifnet_block0_conv0_0_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.conv0.0.0.bias', (96), 'float32')
        self.ifnet_block0_conv0_0_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.conv0.0.0.weight', (96,7,3,3), 'float32')
        self.ifnet_block0_conv0_1_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.conv0.1.0.bias', (192), 'float32')
        self.ifnet_block0_conv0_1_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.conv0.1.0.weight', (192,96,3,3), 'float32')
        self.ifnet_block0_convblock_0_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.0.conv.bias', (192), 'float32')
        self.ifnet_block0_convblock_0_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.0.conv.weight', (192,192,3,3), 'float32')
        self.ifnet_block0_convblock_1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.1.conv.bias', (192), 'float32')
        self.ifnet_block0_convblock_1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.1.conv.weight', (192,192,3,3), 'float32')
        self.ifnet_block0_convblock_2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.2.conv.bias', (192), 'float32')
        self.ifnet_block0_convblock_2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.2.conv.weight', (192,192,3,3), 'float32')
        self.ifnet_block0_convblock_3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.3.conv.bias', (192), 'float32')
        self.ifnet_block0_convblock_3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.3.conv.weight', (192,192,3,3), 'float32')
        self.ifnet_block0_convblock_4_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.4.conv.bias', (192), 'float32')
        self.ifnet_block0_convblock_4_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.4.conv.weight', (192,192,3,3), 'float32')
        self.ifnet_block0_convblock_5_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.5.conv.bias', (192), 'float32')
        self.ifnet_block0_convblock_5_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.5.conv.weight', (192,192,3,3), 'float32')
        self.ifnet_block0_convblock_6_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.6.conv.bias', (192), 'float32')
        self.ifnet_block0_convblock_6_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.6.conv.weight', (192,192,3,3), 'float32')
        self.ifnet_block0_convblock_7_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.7.conv.bias', (192), 'float32')
        self.ifnet_block0_convblock_7_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.7.conv.weight', (192,192,3,3), 'float32')
        self.ifnet_block0_lastconv_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.lastconv.0.bias', (24), 'float32')
        self.ifnet_block0_lastconv_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.lastconv.0.weight', (192,24,4,4), 'float32')
        self.ifnet_block1_conv0_0_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.conv0.0.0.bias', (64), 'float32')
        self.ifnet_block1_conv0_0_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.conv0.0.0.weight', (64,12,3,3), 'float32')
        self.ifnet_block1_conv0_1_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.conv0.1.0.bias', (128), 'float32')
        self.ifnet_block1_conv0_1_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.conv0.1.0.weight', (128,64,3,3), 'float32')
        self.ifnet_block1_convblock_0_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.0.conv.bias', (128), 'float32')
        self.ifnet_block1_convblock_0_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.0.conv.weight', (128,128,3,3), 'float32')
        self.ifnet_block1_convblock_1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.1.conv.bias', (128), 'float32')
        self.ifnet_block1_convblock_1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.1.conv.weight', (128,128,3,3), 'float32')
        self.ifnet_block1_convblock_2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.2.conv.bias', (128), 'float32')
        self.ifnet_block1_convblock_2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.2.conv.weight', (128,128,3,3), 'float32')
        self.ifnet_block1_convblock_3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.3.conv.bias', (128), 'float32')
        self.ifnet_block1_convblock_3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.3.conv.weight', (128,128,3,3), 'float32')
        self.ifnet_block1_convblock_4_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.4.conv.bias', (128), 'float32')
        self.ifnet_block1_convblock_4_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.4.conv.weight', (128,128,3,3), 'float32')
        self.ifnet_block1_convblock_5_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.5.conv.bias', (128), 'float32')
        self.ifnet_block1_convblock_5_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.5.conv.weight', (128,128,3,3), 'float32')
        self.ifnet_block1_convblock_6_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.6.conv.bias', (128), 'float32')
        self.ifnet_block1_convblock_6_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.6.conv.weight', (128,128,3,3), 'float32')
        self.ifnet_block1_convblock_7_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.7.conv.bias', (128), 'float32')
        self.ifnet_block1_convblock_7_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.7.conv.weight', (128,128,3,3), 'float32')
        self.ifnet_block1_lastconv_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.lastconv.0.bias', (24), 'float32')
        self.ifnet_block1_lastconv_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.lastconv.0.weight', (128,24,4,4), 'float32')
        self.ifnet_block2_conv0_0_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.conv0.0.0.bias', (48), 'float32')
        self.ifnet_block2_conv0_0_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.conv0.0.0.weight', (48,12,3,3), 'float32')
        self.ifnet_block2_conv0_1_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.conv0.1.0.bias', (96), 'float32')
        self.ifnet_block2_conv0_1_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.conv0.1.0.weight', (96,48,3,3), 'float32')
        self.ifnet_block2_convblock_0_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.0.conv.bias', (96), 'float32')
        self.ifnet_block2_convblock_0_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.0.conv.weight', (96,96,3,3), 'float32')
        self.ifnet_block2_convblock_1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.1.conv.bias', (96), 'float32')
        self.ifnet_block2_convblock_1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.1.conv.weight', (96,96,3,3), 'float32')
        self.ifnet_block2_convblock_2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.2.conv.bias', (96), 'float32')
        self.ifnet_block2_convblock_2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.2.conv.weight', (96,96,3,3), 'float32')
        self.ifnet_block2_convblock_3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.3.conv.bias', (96), 'float32')
        self.ifnet_block2_convblock_3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.3.conv.weight', (96,96,3,3), 'float32')
        self.ifnet_block2_convblock_4_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.4.conv.bias', (96), 'float32')
        self.ifnet_block2_convblock_4_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.4.conv.weight', (96,96,3,3), 'float32')
        self.ifnet_block2_convblock_5_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.5.conv.bias', (96), 'float32')
        self.ifnet_block2_convblock_5_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.5.conv.weight', (96,96,3,3), 'float32')
        self.ifnet_block2_convblock_6_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.6.conv.bias', (96), 'float32')
        self.ifnet_block2_convblock_6_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.6.conv.weight', (96,96,3,3), 'float32')
        self.ifnet_block2_convblock_7_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.7.conv.bias', (96), 'float32')
        self.ifnet_block2_convblock_7_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.7.conv.weight', (96,96,3,3), 'float32')
        self.ifnet_block2_lastconv_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.lastconv.0.bias', (24), 'float32')
        self.ifnet_block2_lastconv_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.lastconv.0.weight', (96,24,4,4), 'float32')
        self.ifnet_block3_conv0_0_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.conv0.0.0.bias', (32), 'float32')
        self.ifnet_block3_conv0_0_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.conv0.0.0.weight', (32,12,3,3), 'float32')
        self.ifnet_block3_conv0_1_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.conv0.1.0.bias', (64), 'float32')
        self.ifnet_block3_conv0_1_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.conv0.1.0.weight', (64,32,3,3), 'float32')
        self.ifnet_block3_convblock_0_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.0.conv.bias', (64), 'float32')
        self.ifnet_block3_convblock_0_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.0.conv.weight', (64,64,3,3), 'float32')
        self.ifnet_block3_convblock_1_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.1.conv.bias', (64), 'float32')
        self.ifnet_block3_convblock_1_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.1.conv.weight', (64,64,3,3), 'float32')
        self.ifnet_block3_convblock_2_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.2.conv.bias', (64), 'float32')
        self.ifnet_block3_convblock_2_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.2.conv.weight', (64,64,3,3), 'float32')
        self.ifnet_block3_convblock_3_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.3.conv.bias', (64), 'float32')
        self.ifnet_block3_convblock_3_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.3.conv.weight', (64,64,3,3), 'float32')
        self.ifnet_block3_convblock_4_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.4.conv.bias', (64), 'float32')
        self.ifnet_block3_convblock_4_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.4.conv.weight', (64,64,3,3), 'float32')
        self.ifnet_block3_convblock_5_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.5.conv.bias', (64), 'float32')
        self.ifnet_block3_convblock_5_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.5.conv.weight', (64,64,3,3), 'float32')
        self.ifnet_block3_convblock_6_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.6.conv.bias', (64), 'float32')
        self.ifnet_block3_convblock_6_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.6.conv.weight', (64,64,3,3), 'float32')
        self.ifnet_block3_convblock_7_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.7.conv.bias', (64), 'float32')
        self.ifnet_block3_convblock_7_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.7.conv.weight', (64,64,3,3), 'float32')
        self.ifnet_block3_lastconv_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.lastconv.0.bias', (24), 'float32')
        self.ifnet_block3_lastconv_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.lastconv.0.weight', (64,24,4,4), 'float32')
        self.fusionnet_residual_model_head0_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head0.0.weight', (1), 'float32')
        self.fusionnet_residual_model_head0_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head0.1.bias', (64), 'float32')
        self.fusionnet_residual_model_head0_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head0.1.weight', (64,9,3,3), 'float32')
        self.fusionnet_residual_model_head0_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head0.2.weight', (1), 'float32')
        self.fusionnet_residual_model_head0_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head0.3.bias', (64), 'float32')
        self.fusionnet_residual_model_head0_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head0.3.weight', (64,64,3,3), 'float32')
        self.fusionnet_residual_model_head1_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head1.0.weight', (1), 'float32')
        self.fusionnet_residual_model_head1_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head1.1.bias', (64), 'float32')
        self.fusionnet_residual_model_head1_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head1.1.weight', (64,128,3,3), 'float32')
        self.fusionnet_residual_model_head1_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head1.2.weight', (1), 'float32')
        self.fusionnet_residual_model_head1_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head1.3.bias', (64), 'float32')
        self.fusionnet_residual_model_head1_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head1.3.weight', (64,64,3,3), 'float32')
        self.fusionnet_residual_model_01_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_01.0.weight', (1), 'float32')
        self.fusionnet_residual_model_01_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_01.1.bias', (64), 'float32')
        self.fusionnet_residual_model_01_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_01.1.weight', (64,64,3,3), 'float32')
        self.fusionnet_residual_model_01_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_01.2.weight', (1), 'float32')
        self.fusionnet_residual_model_01_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_01.3.bias', (64), 'float32')
        self.fusionnet_residual_model_01_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_01.3.weight', (64,64,3,3), 'float32')
        self.fusionnet_downsample_model_10_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_10.0.weight', (1), 'float32')
        self.fusionnet_downsample_model_10_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_10.1.bias', (128), 'float32')
        self.fusionnet_downsample_model_10_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_10.1.weight', (128,64,3,3), 'float32')
        self.fusionnet_downsample_model_10_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_10.2.weight', (1), 'float32')
        self.fusionnet_downsample_model_10_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_10.3.bias', (128), 'float32')
        self.fusionnet_downsample_model_10_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_10.3.weight', (128,128,3,3), 'float32')
        self.fusionnet_residual_model_head2_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head2.0.weight', (1), 'float32')
        self.fusionnet_residual_model_head2_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head2.1.bias', (128), 'float32')
        self.fusionnet_residual_model_head2_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head2.1.weight', (128,256,3,3), 'float32')
        self.fusionnet_residual_model_head2_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head2.2.weight', (1), 'float32')
        self.fusionnet_residual_model_head2_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head2.3.bias', (128), 'float32')
        self.fusionnet_residual_model_head2_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head2.3.weight', (128,128,3,3), 'float32')
        self.fusionnet_downsample_model_20_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_20.0.weight', (1), 'float32')
        self.fusionnet_downsample_model_20_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_20.1.bias', (192), 'float32')
        self.fusionnet_downsample_model_20_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_20.1.weight', (192,128,3,3), 'float32')
        self.fusionnet_downsample_model_20_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_20.2.weight', (1), 'float32')
        self.fusionnet_downsample_model_20_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_20.3.bias', (192), 'float32')
        self.fusionnet_downsample_model_20_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_20.3.weight', (192,192,3,3), 'float32')
        self.fusionnet_residual_model_head3_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head3.0.weight', (1), 'float32')
        self.fusionnet_residual_model_head3_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head3.1.bias', (192), 'float32')
        self.fusionnet_residual_model_head3_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head3.1.weight', (192,384,3,3), 'float32')
        self.fusionnet_residual_model_head3_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head3.2.weight', (1), 'float32')
        self.fusionnet_residual_model_head3_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head3.3.bias', (192), 'float32')
        self.fusionnet_residual_model_head3_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_head3.3.weight', (192,192,3,3), 'float32')
        self.fusionnet_residual_model_11_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_11.0.weight', (1), 'float32')
        self.fusionnet_residual_model_11_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_11.1.bias', (128), 'float32')
        self.fusionnet_residual_model_11_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_11.1.weight', (128,128,3,3), 'float32')
        self.fusionnet_residual_model_11_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_11.2.weight', (1), 'float32')
        self.fusionnet_residual_model_11_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_11.3.bias', (128), 'float32')
        self.fusionnet_residual_model_11_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_11.3.weight', (128,128,3,3), 'float32')
        self.fusionnet_downsample_model_11_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_11.0.weight', (1), 'float32')
        self.fusionnet_downsample_model_11_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_11.1.bias', (128), 'float32')
        self.fusionnet_downsample_model_11_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_11.1.weight', (128,64,3,3), 'float32')
        self.fusionnet_downsample_model_11_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_11.2.weight', (1), 'float32')
        self.fusionnet_downsample_model_11_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_11.3.bias', (128), 'float32')
        self.fusionnet_downsample_model_11_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_11.3.weight', (128,128,3,3), 'float32')
        self.fusionnet_residual_model_21_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_21.0.weight', (1), 'float32')
        self.fusionnet_residual_model_21_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_21.1.bias', (192), 'float32')
        self.fusionnet_residual_model_21_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_21.1.weight', (192,192,3,3), 'float32')
        self.fusionnet_residual_model_21_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_21.2.weight', (1), 'float32')
        self.fusionnet_residual_model_21_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_21.3.bias', (192), 'float32')
        self.fusionnet_residual_model_21_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_21.3.weight', (192,192,3,3), 'float32')
        self.fusionnet_downsample_model_21_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_21.0.weight', (1), 'float32')
        self.fusionnet_downsample_model_21_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_21.1.bias', (192), 'float32')
        self.fusionnet_downsample_model_21_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_21.1.weight', (192,128,3,3), 'float32')
        self.fusionnet_downsample_model_21_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_21.2.weight', (1), 'float32')
        self.fusionnet_downsample_model_21_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_21.3.bias', (192), 'float32')
        self.fusionnet_downsample_model_21_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.downsample_model_21.3.weight', (192,192,3,3), 'float32')
        self.fusionnet_residual_model_24_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_24.0.weight', (1), 'float32')
        self.fusionnet_residual_model_24_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_24.1.bias', (192), 'float32')
        self.fusionnet_residual_model_24_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_24.1.weight', (192,192,3,3), 'float32')
        self.fusionnet_residual_model_24_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_24.2.weight', (1), 'float32')
        self.fusionnet_residual_model_24_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_24.3.bias', (192), 'float32')
        self.fusionnet_residual_model_24_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_24.3.weight', (192,192,3,3), 'float32')
        self.fusionnet_residual_model_25_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_25.0.weight', (1), 'float32')
        self.fusionnet_residual_model_25_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_25.1.bias', (192), 'float32')
        self.fusionnet_residual_model_25_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_25.1.weight', (192,192,3,3), 'float32')
        self.fusionnet_residual_model_25_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_25.2.weight', (1), 'float32')
        self.fusionnet_residual_model_25_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_25.3.bias', (192), 'float32')
        self.fusionnet_residual_model_25_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_25.3.weight', (192,192,3,3), 'float32')
        self.fusionnet_upsample_model_14_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_14.0.weight', (1), 'float32')
        self.fusionnet_upsample_model_14_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_14.1.bias', (128), 'float32')
        self.fusionnet_upsample_model_14_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_14.1.weight', (192,128,4,4), 'float32')
        self.fusionnet_upsample_model_14_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_14.2.weight', (1), 'float32')
        self.fusionnet_upsample_model_14_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_14.3.bias', (128), 'float32')
        self.fusionnet_upsample_model_14_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_14.3.weight', (128,128,3,3), 'float32')
        self.fusionnet_residual_model_14_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_14.0.weight', (1), 'float32')
        self.fusionnet_residual_model_14_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_14.1.bias', (128), 'float32')
        self.fusionnet_residual_model_14_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_14.1.weight', (128,128,3,3), 'float32')
        self.fusionnet_residual_model_14_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_14.2.weight', (1), 'float32')
        self.fusionnet_residual_model_14_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_14.3.bias', (128), 'float32')
        self.fusionnet_residual_model_14_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_14.3.weight', (128,128,3,3), 'float32')
        self.fusionnet_upsample_model_04_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_04.0.weight', (1), 'float32')
        self.fusionnet_upsample_model_04_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_04.1.bias', (64), 'float32')
        self.fusionnet_upsample_model_04_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_04.1.weight', (128,64,4,4), 'float32')
        self.fusionnet_upsample_model_04_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_04.2.weight', (1), 'float32')
        self.fusionnet_upsample_model_04_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_04.3.bias', (64), 'float32')
        self.fusionnet_upsample_model_04_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_04.3.weight', (64,64,3,3), 'float32')
        self.fusionnet_residual_model_04_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_04.0.weight', (1), 'float32')
        self.fusionnet_residual_model_04_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_04.1.bias', (64), 'float32')
        self.fusionnet_residual_model_04_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_04.1.weight', (64,64,3,3), 'float32')
        self.fusionnet_residual_model_04_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_04.2.weight', (1), 'float32')
        self.fusionnet_residual_model_04_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_04.3.bias', (64), 'float32')
        self.fusionnet_residual_model_04_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_04.3.weight', (64,64,3,3), 'float32')
        self.fusionnet_upsample_model_15_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_15.0.weight', (1), 'float32')
        self.fusionnet_upsample_model_15_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_15.1.bias', (128), 'float32')
        self.fusionnet_upsample_model_15_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_15.1.weight', (192,128,4,4), 'float32')
        self.fusionnet_upsample_model_15_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_15.2.weight', (1), 'float32')
        self.fusionnet_upsample_model_15_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_15.3.bias', (128), 'float32')
        self.fusionnet_upsample_model_15_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_15.3.weight', (128,128,3,3), 'float32')
        self.fusionnet_residual_model_15_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_15.0.weight', (1), 'float32')
        self.fusionnet_residual_model_15_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_15.1.bias', (128), 'float32')
        self.fusionnet_residual_model_15_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_15.1.weight', (128,128,3,3), 'float32')
        self.fusionnet_residual_model_15_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_15.2.weight', (1), 'float32')
        self.fusionnet_residual_model_15_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_15.3.bias', (128), 'float32')
        self.fusionnet_residual_model_15_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_15.3.weight', (128,128,3,3), 'float32')
        self.fusionnet_upsample_model_05_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_05.0.weight', (1), 'float32')
        self.fusionnet_upsample_model_05_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_05.1.bias', (64), 'float32')
        self.fusionnet_upsample_model_05_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_05.1.weight', (128,64,4,4), 'float32')
        self.fusionnet_upsample_model_05_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_05.2.weight', (1), 'float32')
        self.fusionnet_upsample_model_05_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_05.3.bias', (64), 'float32')
        self.fusionnet_upsample_model_05_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.upsample_model_05.3.weight', (64,64,3,3), 'float32')
        self.fusionnet_residual_model_05_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_05.0.weight', (1), 'float32')
        self.fusionnet_residual_model_05_1.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_05.1.bias', (64), 'float32')
        self.fusionnet_residual_model_05_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_05.1.weight', (64,64,3,3), 'float32')
        self.fusionnet_residual_model_05_2.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_05.2.weight', (1), 'float32')
        self.fusionnet_residual_model_05_3.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_05.3.bias', (64), 'float32')
        self.fusionnet_residual_model_05_3.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_05.3.weight', (64,64,3,3), 'float32')
        self.fusionnet_residual_model_tail_conv_before_upsample_0.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_tail.conv_before_upsample.0.bias', (64), 'float32')
        self.fusionnet_residual_model_tail_conv_before_upsample_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_tail.conv_before_upsample.0.weight', (64,64,3,3), 'float32')
        self.fusionnet_residual_model_tail_conv_before_upsample_1.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_tail.conv_before_upsample.1.weight', (1), 'float32')
        self.fusionnet_residual_model_tail_upsample_0.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_tail.upsample.0.bias', (256), 'float32')
        self.fusionnet_residual_model_tail_upsample_0.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_tail.upsample.0.weight', (256,64,3,3), 'float32')
        self.fusionnet_residual_model_tail_conv_last.bias = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_tail.conv_last.bias', (3), 'float32')
        self.fusionnet_residual_model_tail_conv_last.weight = self.load_pnnx_bin_as_parameter(archive, 'fusionnet.residual_model_tail.conv_last.weight', (3,64,3,3), 'float32')
        self.ifnet_block0_convblock_0_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.0.beta', (1,192,1,1), 'float32')
        self.ifnet_block0_convblock_1_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.1.beta', (1,192,1,1), 'float32')
        self.ifnet_block0_convblock_2_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.2.beta', (1,192,1,1), 'float32')
        self.ifnet_block0_convblock_3_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.3.beta', (1,192,1,1), 'float32')
        self.ifnet_block0_convblock_4_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.4.beta', (1,192,1,1), 'float32')
        self.ifnet_block0_convblock_5_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.5.beta', (1,192,1,1), 'float32')
        self.ifnet_block0_convblock_6_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.6.beta', (1,192,1,1), 'float32')
        self.ifnet_block0_convblock_7_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block0.convblock.7.beta', (1,192,1,1), 'float32')
        self.pnnx_fold_grid_1_pnnx_fold_grid_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid.1.pnnx_fold_grid.1', (1,2,288,480), 'float32')
        self.pnnx_fold_grid1_1_pnnx_fold_grid1_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid1.1.pnnx_fold_grid1.1', (1,2,288,480), 'float32')
        self.ifnet_block1_convblock_0_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.0.beta', (1,128,1,1), 'float32')
        self.ifnet_block1_convblock_1_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.1.beta', (1,128,1,1), 'float32')
        self.ifnet_block1_convblock_2_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.2.beta', (1,128,1,1), 'float32')
        self.ifnet_block1_convblock_3_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.3.beta', (1,128,1,1), 'float32')
        self.ifnet_block1_convblock_4_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.4.beta', (1,128,1,1), 'float32')
        self.ifnet_block1_convblock_5_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.5.beta', (1,128,1,1), 'float32')
        self.ifnet_block1_convblock_6_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.6.beta', (1,128,1,1), 'float32')
        self.ifnet_block1_convblock_7_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block1.convblock.7.beta', (1,128,1,1), 'float32')
        self.pnnx_fold_grid3_1_pnnx_fold_grid3_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid3.1.pnnx_fold_grid3.1', (1,2,288,480), 'float32')
        self.pnnx_fold_grid5_1_pnnx_fold_grid5_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid5.1.pnnx_fold_grid5.1', (1,2,288,480), 'float32')
        self.ifnet_block2_convblock_0_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.0.beta', (1,96,1,1), 'float32')
        self.ifnet_block2_convblock_1_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.1.beta', (1,96,1,1), 'float32')
        self.ifnet_block2_convblock_2_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.2.beta', (1,96,1,1), 'float32')
        self.ifnet_block2_convblock_3_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.3.beta', (1,96,1,1), 'float32')
        self.ifnet_block2_convblock_4_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.4.beta', (1,96,1,1), 'float32')
        self.ifnet_block2_convblock_5_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.5.beta', (1,96,1,1), 'float32')
        self.ifnet_block2_convblock_6_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.6.beta', (1,96,1,1), 'float32')
        self.ifnet_block2_convblock_7_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block2.convblock.7.beta', (1,96,1,1), 'float32')
        self.pnnx_fold_grid7_1_pnnx_fold_grid7_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid7.1.pnnx_fold_grid7.1', (1,2,288,480), 'float32')
        self.pnnx_fold_grid9_1_pnnx_fold_grid9_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid9.1.pnnx_fold_grid9.1', (1,2,288,480), 'float32')
        self.ifnet_block3_convblock_0_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.0.beta', (1,64,1,1), 'float32')
        self.ifnet_block3_convblock_1_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.1.beta', (1,64,1,1), 'float32')
        self.ifnet_block3_convblock_2_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.2.beta', (1,64,1,1), 'float32')
        self.ifnet_block3_convblock_3_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.3.beta', (1,64,1,1), 'float32')
        self.ifnet_block3_convblock_4_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.4.beta', (1,64,1,1), 'float32')
        self.ifnet_block3_convblock_5_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.5.beta', (1,64,1,1), 'float32')
        self.ifnet_block3_convblock_6_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.6.beta', (1,64,1,1), 'float32')
        self.ifnet_block3_convblock_7_beta = self.load_pnnx_bin_as_parameter(archive, 'ifnet.block3.convblock.7.beta', (1,64,1,1), 'float32')
        self.pnnx_fold_grid11_1_pnnx_fold_grid11_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid11.1.pnnx_fold_grid11.1', (1,2,288,480), 'float32')
        self.pnnx_fold_grid13_1_pnnx_fold_grid13_1 = self.load_pnnx_bin_as_parameter(archive, 'pnnx_fold_grid13.1.pnnx_fold_grid13.1', (1,2,288,480), 'float32')
        archive.close()

    def load_pnnx_bin_as_parameter(self, archive, key, shape, dtype, requires_grad=True):
        return nn.Parameter(self.load_pnnx_bin_as_tensor(archive, key, shape, dtype), requires_grad)

    def load_pnnx_bin_as_tensor(self, archive, key, shape, dtype):
        _, tmppath = tempfile.mkstemp()
        tmpf = open(tmppath, 'wb')
        with archive.open(key) as keyfile:
            tmpf.write(keyfile.read())
        tmpf.close()
        m = np.memmap(tmppath, dtype=dtype, mode='r', shape=shape).copy()
        os.remove(tmppath)
        return torch.from_numpy(m)

    def forward(self, v_0, v_1, v_2, v_3, v_4, v_5, v_6, v_7, v_8, v_9, v_10, v_11):
        v_12 = (v_3 * v_2)
        v_13 = (v_4 * (1 - v_2))
        v_14 = (v_5 * v_2)
        v_15 = (v_5 * (1 - v_2))
        v_16 = F.upsample(input=v_12, align_corners=False, mode='bilinear', scale_factor=(0.500000,0.500000))
        v_17 = (v_16 * 5.000000e-01)
        v_18 = F.upsample(input=v_13, align_corners=False, mode='bilinear', scale_factor=(0.500000,0.500000))
        v_19 = (v_18 * 5.000000e-01)
        v_20 = F.upsample(input=v_12, align_corners=False, mode='bilinear', scale_factor=(0.250000,0.250000))
        v_21 = (v_20 * 2.500000e-01)
        v_22 = F.upsample(input=v_13, align_corners=False, mode='bilinear', scale_factor=(0.250000,0.250000))
        v_23 = (v_22 * 2.500000e-01)
        v_24 = v_14[:,:1]
        v_25 = torch.exp(v_24)
        v_26 = F.upsample(input=v_0, align_corners=False, mode='bilinear', scale_factor=(0.500000,0.500000))
        v_27 = (v_26 * v_25)
        v_28 = torch.cat((v_27, v_25), dim=1)
        v_29 = pnnx.custom_op.softsplat.forward(arg_0=v_28, arg_1=v_12)
        v_30 = v_29.select(dim=1, index=-1)
        v_31 = v_29[:,:-1]
        v_32 = (v_31 / (v_30 + 1.000000e-05))
        v_33 = v_15[:,1:2]
        v_34 = torch.exp(v_33)
        v_35 = F.upsample(input=v_1, align_corners=False, mode='bilinear', scale_factor=(0.500000,0.500000))
        v_36 = (v_35 * v_34)
        v_37 = torch.cat((v_36, v_34), dim=1)
        v_38 = pnnx.custom_op.softsplat.forward(arg_0=v_37, arg_1=v_13)
        v_39 = v_38.select(dim=1, index=-1)
        v_40 = v_38[:,:-1]
        v_41 = (v_40 / (v_39 + 1.000000e-05))
        v_42 = (v_6 * v_25)
        v_43 = torch.cat((v_42, v_25), dim=1)
        v_44 = pnnx.custom_op.softsplat.forward(arg_0=v_43, arg_1=v_12)
        v_45 = v_44.select(dim=1, index=-1)
        v_46 = v_44[:,:-1]
        v_47 = (v_46 / (v_45 + 1.000000e-05))
        v_48 = (v_9 * v_34)
        v_49 = torch.cat((v_48, v_34), dim=1)
        v_50 = pnnx.custom_op.softsplat.forward(arg_0=v_49, arg_1=v_13)
        v_51 = v_50.select(dim=1, index=-1)
        v_52 = v_50[:,:-1]
        v_53 = (v_52 / (v_51 + 1.000000e-05))
        v_54 = F.upsample(input=v_24, align_corners=False, mode='bilinear', scale_factor=(0.500000,0.500000))
        v_55 = torch.exp(v_54)
        v_56 = (v_7 * v_55)
        v_57 = torch.cat((v_56, v_55), dim=1)
        v_58 = pnnx.custom_op.softsplat.forward(arg_0=v_57, arg_1=v_17)
        v_59 = v_58.select(dim=1, index=-1)
        v_60 = v_58[:,:-1]
        v_61 = (v_60 / (v_59 + 1.000000e-05))
        v_62 = F.upsample(input=v_33, align_corners=False, mode='bilinear', scale_factor=(0.500000,0.500000))
        v_63 = torch.exp(v_62)
        v_64 = (v_10 * v_63)
        v_65 = torch.cat((v_64, v_63), dim=1)
        v_66 = pnnx.custom_op.softsplat.forward(arg_0=v_65, arg_1=v_19)
        v_67 = v_66.select(dim=1, index=-1)
        v_68 = v_66[:,:-1]
        v_69 = (v_68 / (v_67 + 1.000000e-05))
        v_70 = F.upsample(input=v_24, align_corners=False, mode='bilinear', scale_factor=(0.250000,0.250000))
        v_71 = torch.exp(v_70)
        v_72 = (v_8 * v_71)
        v_73 = torch.cat((v_72, v_71), dim=1)
        v_74 = pnnx.custom_op.softsplat.forward(arg_0=v_73, arg_1=v_21)
        v_75 = v_74.select(dim=1, index=-1)
        v_76 = v_74[:,:-1]
        v_77 = (v_76 / (v_75 + 1.000000e-05))
        v_78 = F.upsample(input=v_33, align_corners=False, mode='bilinear', scale_factor=(0.250000,0.250000))
        v_79 = torch.exp(v_78)
        v_80 = (v_11 * v_79)
        v_81 = torch.cat((v_80, v_79), dim=1)
        v_82 = pnnx.custom_op.softsplat.forward(arg_0=v_81, arg_1=v_23)
        v_83 = v_82.select(dim=1, index=-1)
        v_84 = v_82[:,:-1]
        v_85 = (v_84 / (v_83 + 1.000000e-05))
        v_86 = torch.cat((v_26, v_35), dim=1)
        v_87 = v_2.repeat(1, 1, 288, 480)
        v_88, v_89 = torch.tensor_split(v_86, dim=1, indices=(3,))
        v_90 = torch.cat((v_88, v_89, v_87), dim=1)
        v_91 = F.upsample(input=v_90, align_corners=False, mode='bilinear', scale_factor=(0.125000,0.125000))
        v_92 = self.ifnet_block0_conv0_0_0(v_91)
        v_93 = self.ifnet_block0_conv0_0_1(v_92)
        v_94 = self.ifnet_block0_conv0_1_0(v_93)
        v_95 = self.ifnet_block0_conv0_1_1(v_94)
        v_96 = self.ifnet_block0_convblock_0_beta
        v_97 = self.ifnet_block0_convblock_0_conv(v_95)
        v_98 = ((v_97 * v_96) + v_95)
        v_99 = self.ifnet_block0_convblock_0_relu(v_98)
        v_100 = self.ifnet_block0_convblock_1_beta
        v_101 = self.ifnet_block0_convblock_1_conv(v_99)
        v_102 = ((v_101 * v_100) + v_99)
        v_103 = self.ifnet_block0_convblock_1_relu(v_102)
        v_104 = self.ifnet_block0_convblock_2_beta
        v_105 = self.ifnet_block0_convblock_2_conv(v_103)
        v_106 = ((v_105 * v_104) + v_103)
        v_107 = self.ifnet_block0_convblock_2_relu(v_106)
        v_108 = self.ifnet_block0_convblock_3_beta
        v_109 = self.ifnet_block0_convblock_3_conv(v_107)
        v_110 = ((v_109 * v_108) + v_107)
        v_111 = self.ifnet_block0_convblock_3_relu(v_110)
        v_112 = self.ifnet_block0_convblock_4_beta
        v_113 = self.ifnet_block0_convblock_4_conv(v_111)
        v_114 = ((v_113 * v_112) + v_111)
        v_115 = self.ifnet_block0_convblock_4_relu(v_114)
        v_116 = self.ifnet_block0_convblock_5_beta
        v_117 = self.ifnet_block0_convblock_5_conv(v_115)
        v_118 = ((v_117 * v_116) + v_115)
        v_119 = self.ifnet_block0_convblock_5_relu(v_118)
        v_120 = self.ifnet_block0_convblock_6_beta
        v_121 = self.ifnet_block0_convblock_6_conv(v_119)
        v_122 = ((v_121 * v_120) + v_119)
        v_123 = self.ifnet_block0_convblock_6_relu(v_122)
        v_124 = self.ifnet_block0_convblock_7_beta
        v_125 = self.ifnet_block0_convblock_7_conv(v_123)
        v_126 = ((v_125 * v_124) + v_123)
        v_127 = self.ifnet_block0_convblock_7_relu(v_126)
        v_128 = self.ifnet_block0_lastconv_0(v_127)
        v_129 = self.ifnet_block0_lastconv_1(v_128)
        v_130 = F.upsample(input=v_129, align_corners=False, mode='bilinear', scale_factor=(8.000000,8.000000))
        v_131 = v_130[:,:4]
        v_132 = (v_131 * 8)
        v_133 = self.pnnx_fold_grid_1_pnnx_fold_grid_1
        v_134 = v_132[:,:2]
        v_135 = v_134[:,:1]
        v_136 = (v_135 / 239.500000)
        v_137 = v_134[:,1:2]
        v_138 = (v_137 / 143.500000)
        v_139 = torch.cat((v_136, v_138), dim=1)
        v_140 = (v_133 + v_139)
        v_141 = self.pnnx_fold_grid1_1_pnnx_fold_grid1_1
        v_142 = v_132[:,2:4]
        v_143 = v_142[:,:1]
        v_144 = (v_143 / 239.500000)
        v_145 = v_142[:,1:2]
        v_146 = (v_145 / 143.500000)
        v_147 = torch.cat((v_144, v_146), dim=1)
        v_148 = (v_141 + v_147)
        v_149 = torch.permute(input=v_148, dims=(0,2,3,1))
        v_150 = F.grid_sample(input=v_89, grid=v_149, align_corners=True, mode='bilinear', padding_mode='border')
        v_151 = torch.permute(input=v_140, dims=(0,2,3,1))
        v_152 = F.grid_sample(input=v_88, grid=v_151, align_corners=True, mode='bilinear', padding_mode='border')
        v_153 = F.upsample(input=v_132, align_corners=False, mode='bilinear', scale_factor=(0.250000,0.250000))
        v_154 = (v_153 / 4)
        v_155 = v_130[:,4:5]
        v_156 = torch.cat((v_152, v_150, v_87, v_155), dim=1)
        v_157 = F.upsample(input=v_156, align_corners=False, mode='bilinear', scale_factor=(0.250000,0.250000))
        v_158 = torch.cat((v_157, v_154), dim=1)
        v_159 = self.ifnet_block1_conv0_0_0(v_158)
        v_160 = self.ifnet_block1_conv0_0_1(v_159)
        v_161 = self.ifnet_block1_conv0_1_0(v_160)
        v_162 = self.ifnet_block1_conv0_1_1(v_161)
        v_163 = self.ifnet_block1_convblock_0_beta
        v_164 = self.ifnet_block1_convblock_0_conv(v_162)
        v_165 = ((v_164 * v_163) + v_162)
        v_166 = self.ifnet_block1_convblock_0_relu(v_165)
        v_167 = self.ifnet_block1_convblock_1_beta
        v_168 = self.ifnet_block1_convblock_1_conv(v_166)
        v_169 = ((v_168 * v_167) + v_166)
        v_170 = self.ifnet_block1_convblock_1_relu(v_169)
        v_171 = self.ifnet_block1_convblock_2_beta
        v_172 = self.ifnet_block1_convblock_2_conv(v_170)
        v_173 = ((v_172 * v_171) + v_170)
        v_174 = self.ifnet_block1_convblock_2_relu(v_173)
        v_175 = self.ifnet_block1_convblock_3_beta
        v_176 = self.ifnet_block1_convblock_3_conv(v_174)
        v_177 = ((v_176 * v_175) + v_174)
        v_178 = self.ifnet_block1_convblock_3_relu(v_177)
        v_179 = self.ifnet_block1_convblock_4_beta
        v_180 = self.ifnet_block1_convblock_4_conv(v_178)
        v_181 = ((v_180 * v_179) + v_178)
        v_182 = self.ifnet_block1_convblock_4_relu(v_181)
        v_183 = self.ifnet_block1_convblock_5_beta
        v_184 = self.ifnet_block1_convblock_5_conv(v_182)
        v_185 = ((v_184 * v_183) + v_182)
        v_186 = self.ifnet_block1_convblock_5_relu(v_185)
        v_187 = self.ifnet_block1_convblock_6_beta
        v_188 = self.ifnet_block1_convblock_6_conv(v_186)
        v_189 = ((v_188 * v_187) + v_186)
        v_190 = self.ifnet_block1_convblock_6_relu(v_189)
        v_191 = self.ifnet_block1_convblock_7_beta
        v_192 = self.ifnet_block1_convblock_7_conv(v_190)
        v_193 = ((v_192 * v_191) + v_190)
        v_194 = self.ifnet_block1_convblock_7_relu(v_193)
        v_195 = self.ifnet_block1_lastconv_0(v_194)
        v_196 = self.ifnet_block1_lastconv_1(v_195)
        v_197 = F.upsample(input=v_196, align_corners=False, mode='bilinear', scale_factor=(4.000000,4.000000))
        v_198 = v_197[:,:4]
        v_199 = (v_132 + (v_198 * 4))
        v_200 = v_197[:,4:5]
        v_201 = (v_155 + v_200)
        v_202 = self.pnnx_fold_grid3_1_pnnx_fold_grid3_1
        v_203 = v_199[:,:2]
        v_204 = v_203[:,:1]
        v_205 = (v_204 / 239.500000)
        v_206 = v_203[:,1:2]
        v_207 = (v_206 / 143.500000)
        v_208 = torch.cat((v_205, v_207), dim=1)
        v_209 = (v_202 + v_208)
        v_210 = self.pnnx_fold_grid5_1_pnnx_fold_grid5_1
        v_211 = v_199[:,2:4]
        v_212 = v_211[:,:1]
        v_213 = (v_212 / 239.500000)
        v_214 = v_211[:,1:2]
        v_215 = (v_214 / 143.500000)
        v_216 = torch.cat((v_213, v_215), dim=1)
        v_217 = (v_210 + v_216)
        v_218 = torch.permute(input=v_217, dims=(0,2,3,1))
        v_219 = F.grid_sample(input=v_89, grid=v_218, align_corners=True, mode='bilinear', padding_mode='border')
        v_220 = torch.permute(input=v_209, dims=(0,2,3,1))
        v_221 = F.grid_sample(input=v_88, grid=v_220, align_corners=True, mode='bilinear', padding_mode='border')
        v_222 = F.upsample(input=v_199, align_corners=False, mode='bilinear', scale_factor=(0.500000,0.500000))
        v_223 = (v_222 / 2)
        v_224 = torch.cat((v_221, v_219, v_87, v_201), dim=1)
        v_225 = F.upsample(input=v_224, align_corners=False, mode='bilinear', scale_factor=(0.500000,0.500000))
        v_226 = torch.cat((v_225, v_223), dim=1)
        v_227 = self.ifnet_block2_conv0_0_0(v_226)
        v_228 = self.ifnet_block2_conv0_0_1(v_227)
        v_229 = self.ifnet_block2_conv0_1_0(v_228)
        v_230 = self.ifnet_block2_conv0_1_1(v_229)
        v_231 = self.ifnet_block2_convblock_0_beta
        v_232 = self.ifnet_block2_convblock_0_conv(v_230)
        v_233 = ((v_232 * v_231) + v_230)
        v_234 = self.ifnet_block2_convblock_0_relu(v_233)
        v_235 = self.ifnet_block2_convblock_1_beta
        v_236 = self.ifnet_block2_convblock_1_conv(v_234)
        v_237 = ((v_236 * v_235) + v_234)
        v_238 = self.ifnet_block2_convblock_1_relu(v_237)
        v_239 = self.ifnet_block2_convblock_2_beta
        v_240 = self.ifnet_block2_convblock_2_conv(v_238)
        v_241 = ((v_240 * v_239) + v_238)
        v_242 = self.ifnet_block2_convblock_2_relu(v_241)
        v_243 = self.ifnet_block2_convblock_3_beta
        v_244 = self.ifnet_block2_convblock_3_conv(v_242)
        v_245 = ((v_244 * v_243) + v_242)
        v_246 = self.ifnet_block2_convblock_3_relu(v_245)
        v_247 = self.ifnet_block2_convblock_4_beta
        v_248 = self.ifnet_block2_convblock_4_conv(v_246)
        v_249 = ((v_248 * v_247) + v_246)
        v_250 = self.ifnet_block2_convblock_4_relu(v_249)
        v_251 = self.ifnet_block2_convblock_5_beta
        v_252 = self.ifnet_block2_convblock_5_conv(v_250)
        v_253 = ((v_252 * v_251) + v_250)
        v_254 = self.ifnet_block2_convblock_5_relu(v_253)
        v_255 = self.ifnet_block2_convblock_6_beta
        v_256 = self.ifnet_block2_convblock_6_conv(v_254)
        v_257 = ((v_256 * v_255) + v_254)
        v_258 = self.ifnet_block2_convblock_6_relu(v_257)
        v_259 = self.ifnet_block2_convblock_7_beta
        v_260 = self.ifnet_block2_convblock_7_conv(v_258)
        v_261 = ((v_260 * v_259) + v_258)
        v_262 = self.ifnet_block2_convblock_7_relu(v_261)
        v_263 = self.ifnet_block2_lastconv_0(v_262)
        v_264 = self.ifnet_block2_lastconv_1(v_263)
        v_265 = F.upsample(input=v_264, align_corners=False, mode='bilinear', scale_factor=(2.000000,2.000000))
        v_266 = v_265[:,:4]
        v_267 = (v_199 + (v_266 * 2))
        v_268 = v_265[:,4:5]
        v_269 = (v_201 + v_268)
        v_270 = self.pnnx_fold_grid7_1_pnnx_fold_grid7_1
        v_271 = v_267[:,:2]
        v_272 = v_271[:,:1]
        v_273 = (v_272 / 239.500000)
        v_274 = v_271[:,1:2]
        v_275 = (v_274 / 143.500000)
        v_276 = torch.cat((v_273, v_275), dim=1)
        v_277 = (v_270 + v_276)
        v_278 = self.pnnx_fold_grid9_1_pnnx_fold_grid9_1
        v_279 = v_267[:,2:4]
        v_280 = v_279[:,:1]
        v_281 = (v_280 / 239.500000)
        v_282 = v_279[:,1:2]
        v_283 = (v_282 / 143.500000)
        v_284 = torch.cat((v_281, v_283), dim=1)
        v_285 = (v_278 + v_284)
        v_286 = torch.permute(input=v_285, dims=(0,2,3,1))
        v_287 = F.grid_sample(input=v_89, grid=v_286, align_corners=True, mode='bilinear', padding_mode='border')
        v_288 = torch.permute(input=v_277, dims=(0,2,3,1))
        v_289 = F.grid_sample(input=v_88, grid=v_288, align_corners=True, mode='bilinear', padding_mode='border')
        v_290 = torch.cat((v_289, v_287, v_87, v_269), dim=1)
        v_291 = torch.cat((v_290, v_267), dim=1)
        v_292 = self.ifnet_block3_conv0_0_0(v_291)
        v_293 = self.ifnet_block3_conv0_0_1(v_292)
        v_294 = self.ifnet_block3_conv0_1_0(v_293)
        v_295 = self.ifnet_block3_conv0_1_1(v_294)
        v_296 = self.ifnet_block3_convblock_0_beta
        v_297 = self.ifnet_block3_convblock_0_conv(v_295)
        v_298 = ((v_297 * v_296) + v_295)
        v_299 = self.ifnet_block3_convblock_0_relu(v_298)
        v_300 = self.ifnet_block3_convblock_1_beta
        v_301 = self.ifnet_block3_convblock_1_conv(v_299)
        v_302 = ((v_301 * v_300) + v_299)
        v_303 = self.ifnet_block3_convblock_1_relu(v_302)
        v_304 = self.ifnet_block3_convblock_2_beta
        v_305 = self.ifnet_block3_convblock_2_conv(v_303)
        v_306 = ((v_305 * v_304) + v_303)
        v_307 = self.ifnet_block3_convblock_2_relu(v_306)
        v_308 = self.ifnet_block3_convblock_3_beta
        v_309 = self.ifnet_block3_convblock_3_conv(v_307)
        v_310 = ((v_309 * v_308) + v_307)
        v_311 = self.ifnet_block3_convblock_3_relu(v_310)
        v_312 = self.ifnet_block3_convblock_4_beta
        v_313 = self.ifnet_block3_convblock_4_conv(v_311)
        v_314 = ((v_313 * v_312) + v_311)
        v_315 = self.ifnet_block3_convblock_4_relu(v_314)
        v_316 = self.ifnet_block3_convblock_5_beta
        v_317 = self.ifnet_block3_convblock_5_conv(v_315)
        v_318 = ((v_317 * v_316) + v_315)
        v_319 = self.ifnet_block3_convblock_5_relu(v_318)
        v_320 = self.ifnet_block3_convblock_6_beta
        v_321 = self.ifnet_block3_convblock_6_conv(v_319)
        v_322 = ((v_321 * v_320) + v_319)
        v_323 = self.ifnet_block3_convblock_6_relu(v_322)
        v_324 = self.ifnet_block3_convblock_7_beta
        v_325 = self.ifnet_block3_convblock_7_conv(v_323)
        v_326 = ((v_325 * v_324) + v_323)
        v_327 = self.ifnet_block3_convblock_7_relu(v_326)
        v_328 = self.ifnet_block3_lastconv_0(v_327)
        v_329 = self.ifnet_block3_lastconv_1(v_328)
        v_330 = v_329[:,:4]
        v_331 = (v_267 + v_330)
        v_332 = v_329[:,4:5]
        v_333 = (v_269 + v_332)
        v_334 = self.pnnx_fold_grid11_1_pnnx_fold_grid11_1
        v_335 = v_331[:,:2]
        v_336 = v_335[:,:1]
        v_337 = (v_336 / 239.500000)
        v_338 = v_335[:,1:2]
        v_339 = (v_338 / 143.500000)
        v_340 = torch.cat((v_337, v_339), dim=1)
        v_341 = (v_334 + v_340)
        v_342 = self.pnnx_fold_grid13_1_pnnx_fold_grid13_1
        v_343 = v_331[:,2:4]
        v_344 = v_343[:,:1]
        v_345 = (v_344 / 239.500000)
        v_346 = v_343[:,1:2]
        v_347 = (v_346 / 143.500000)
        v_348 = torch.cat((v_345, v_347), dim=1)
        v_349 = (v_342 + v_348)
        v_350 = torch.permute(input=v_341, dims=(0,2,3,1))
        v_351 = F.grid_sample(input=v_88, grid=v_350, align_corners=True, mode='bilinear', padding_mode='border')
        v_352 = F.sigmoid(input=v_333)
        v_353 = torch.permute(input=v_349, dims=(0,2,3,1))
        v_354 = F.grid_sample(input=v_89, grid=v_353, align_corners=True, mode='bilinear', padding_mode='border')
        v_355 = ((v_351 * v_352) + (v_354 * (1 - v_352)))
        v_356 = torch.cat((v_32, v_355, v_41), dim=1)
        v_357 = self.fusionnet_residual_model_head0_0(v_356)
        v_358 = self.fusionnet_residual_model_head0_1(v_357)
        v_359 = self.fusionnet_residual_model_head0_2(v_358)
        v_360 = self.fusionnet_residual_model_head0_3(v_359)
        v_361 = torch.cat((v_47, v_53), dim=1)
        v_362 = self.fusionnet_residual_model_head1_0(v_361)
        v_363 = self.fusionnet_residual_model_head1_1(v_362)
        v_364 = self.fusionnet_residual_model_head1_2(v_363)
        v_365 = self.fusionnet_residual_model_head1_3(v_364)
        v_366 = (v_360 + v_365)
        v_367 = self.fusionnet_residual_model_01_0(v_366)
        v_368 = self.fusionnet_residual_model_01_1(v_367)
        v_369 = self.fusionnet_residual_model_01_2(v_368)
        v_370 = self.fusionnet_residual_model_01_3(v_369)
        v_371 = (v_370 + v_366)
        v_372 = self.fusionnet_downsample_model_10_0(v_366)
        v_373 = self.fusionnet_downsample_model_10_1(v_372)
        v_374 = self.fusionnet_downsample_model_10_2(v_373)
        v_375 = self.fusionnet_downsample_model_10_3(v_374)
        v_376 = torch.cat((v_61, v_69), dim=1)
        v_377 = self.fusionnet_residual_model_head2_0(v_376)
        v_378 = self.fusionnet_residual_model_head2_1(v_377)
        v_379 = self.fusionnet_residual_model_head2_2(v_378)
        v_380 = self.fusionnet_residual_model_head2_3(v_379)
        v_381 = (v_375 + v_380)
        v_382 = self.fusionnet_downsample_model_20_0(v_381)
        v_383 = self.fusionnet_downsample_model_20_1(v_382)
        v_384 = self.fusionnet_downsample_model_20_2(v_383)
        v_385 = self.fusionnet_downsample_model_20_3(v_384)
        v_386 = torch.cat((v_77, v_85), dim=1)
        v_387 = self.fusionnet_residual_model_head3_0(v_386)
        v_388 = self.fusionnet_residual_model_head3_1(v_387)
        v_389 = self.fusionnet_residual_model_head3_2(v_388)
        v_390 = self.fusionnet_residual_model_head3_3(v_389)
        v_391 = (v_385 + v_390)
        v_392 = self.fusionnet_residual_model_11_0(v_381)
        v_393 = self.fusionnet_residual_model_11_1(v_392)
        v_394 = self.fusionnet_residual_model_11_2(v_393)
        v_395 = self.fusionnet_residual_model_11_3(v_394)
        v_396 = self.fusionnet_downsample_model_11_0(v_371)
        v_397 = self.fusionnet_downsample_model_11_1(v_396)
        v_398 = self.fusionnet_downsample_model_11_2(v_397)
        v_399 = self.fusionnet_downsample_model_11_3(v_398)
        v_400 = ((v_395 + v_381) + v_399)
        v_401 = self.fusionnet_residual_model_21_0(v_391)
        v_402 = self.fusionnet_residual_model_21_1(v_401)
        v_403 = self.fusionnet_residual_model_21_2(v_402)
        v_404 = self.fusionnet_residual_model_21_3(v_403)
        v_405 = self.fusionnet_downsample_model_21_0(v_400)
        v_406 = self.fusionnet_downsample_model_21_1(v_405)
        v_407 = self.fusionnet_downsample_model_21_2(v_406)
        v_408 = self.fusionnet_downsample_model_21_3(v_407)
        v_409 = ((v_404 + v_391) + v_408)
        v_410 = self.fusionnet_residual_model_24_0(v_409)
        v_411 = self.fusionnet_residual_model_24_1(v_410)
        v_412 = self.fusionnet_residual_model_24_2(v_411)
        v_413 = self.fusionnet_residual_model_24_3(v_412)
        v_414 = (v_413 + v_409)
        v_415 = self.fusionnet_residual_model_25_0(v_414)
        v_416 = self.fusionnet_residual_model_25_1(v_415)
        v_417 = self.fusionnet_residual_model_25_2(v_416)
        v_418 = self.fusionnet_residual_model_25_3(v_417)
        v_419 = (v_418 + v_414)
        v_420 = self.fusionnet_upsample_model_14_0(v_414)
        v_421 = self.fusionnet_upsample_model_14_1(v_420)
        v_422 = self.fusionnet_upsample_model_14_2(v_421)
        v_423 = self.fusionnet_upsample_model_14_3(v_422)
        v_424 = self.fusionnet_residual_model_14_0(v_400)
        v_425 = self.fusionnet_residual_model_14_1(v_424)
        v_426 = self.fusionnet_residual_model_14_2(v_425)
        v_427 = self.fusionnet_residual_model_14_3(v_426)
        v_428 = (v_423 + (v_427 + v_400))
        v_429 = self.fusionnet_upsample_model_04_0(v_428)
        v_430 = self.fusionnet_upsample_model_04_1(v_429)
        v_431 = self.fusionnet_upsample_model_04_2(v_430)
        v_432 = self.fusionnet_upsample_model_04_3(v_431)
        v_433 = self.fusionnet_residual_model_04_0(v_371)
        v_434 = self.fusionnet_residual_model_04_1(v_433)
        v_435 = self.fusionnet_residual_model_04_2(v_434)
        v_436 = self.fusionnet_residual_model_04_3(v_435)
        v_437 = (v_432 + (v_436 + v_371))
        v_438 = self.fusionnet_upsample_model_15_0(v_419)
        v_439 = self.fusionnet_upsample_model_15_1(v_438)
        v_440 = self.fusionnet_upsample_model_15_2(v_439)
        v_441 = self.fusionnet_upsample_model_15_3(v_440)
        v_442 = self.fusionnet_residual_model_15_0(v_428)
        v_443 = self.fusionnet_residual_model_15_1(v_442)
        v_444 = self.fusionnet_residual_model_15_2(v_443)
        v_445 = self.fusionnet_residual_model_15_3(v_444)
        v_446 = (v_441 + (v_445 + v_428))
        v_447 = self.fusionnet_upsample_model_05_0(v_446)
        v_448 = self.fusionnet_upsample_model_05_1(v_447)
        v_449 = self.fusionnet_upsample_model_05_2(v_448)
        v_450 = self.fusionnet_upsample_model_05_3(v_449)
        v_451 = self.fusionnet_residual_model_05_0(v_437)
        v_452 = self.fusionnet_residual_model_05_1(v_451)
        v_453 = self.fusionnet_residual_model_05_2(v_452)
        v_454 = self.fusionnet_residual_model_05_3(v_453)
        v_455 = (v_450 + (v_454 + v_437))
        v_456 = self.fusionnet_residual_model_tail_conv_before_upsample_0(v_455)
        v_457 = self.fusionnet_residual_model_tail_conv_before_upsample_1(v_456)
        v_458 = self.fusionnet_residual_model_tail_upsample_0(v_457)
        v_459 = self.fusionnet_residual_model_tail_upsample_1(v_458)
        v_460 = self.fusionnet_residual_model_tail_conv_last(v_459)
        v_461 = torch.clamp(input=v_460, max=1, min=0)
        return v_461

def export_torchscript():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 576, 960, dtype=torch.float)
    v_1 = torch.rand(1, 3, 576, 960, dtype=torch.float)
    v_2 = torch.rand(1, 1, 1, 1, dtype=torch.float)
    v_3 = torch.rand(1, 2, 288, 480, dtype=torch.float)
    v_4 = torch.rand(1, 2, 288, 480, dtype=torch.float)
    v_5 = torch.rand(1, 2, 288, 480, dtype=torch.float)
    v_6 = torch.rand(1, 64, 288, 480, dtype=torch.float)
    v_7 = torch.rand(1, 128, 144, 240, dtype=torch.float)
    v_8 = torch.rand(1, 192, 72, 120, dtype=torch.float)
    v_9 = torch.rand(1, 64, 288, 480, dtype=torch.float)
    v_10 = torch.rand(1, 128, 144, 240, dtype=torch.float)
    v_11 = torch.rand(1, 192, 72, 120, dtype=torch.float)

    mod = torch.jit.trace(net, (v_0, v_1, v_2, v_3, v_4, v_5, v_6, v_7, v_8, v_9, v_10, v_11))
    mod.save("D:/60-fps-Project/VFI/GMFSS2NCNN/infer_576_pnnx.py.pt")

def export_onnx():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 576, 960, dtype=torch.float)
    v_1 = torch.rand(1, 3, 576, 960, dtype=torch.float)
    v_2 = torch.rand(1, 1, 1, 1, dtype=torch.float)
    v_3 = torch.rand(1, 2, 288, 480, dtype=torch.float)
    v_4 = torch.rand(1, 2, 288, 480, dtype=torch.float)
    v_5 = torch.rand(1, 2, 288, 480, dtype=torch.float)
    v_6 = torch.rand(1, 64, 288, 480, dtype=torch.float)
    v_7 = torch.rand(1, 128, 144, 240, dtype=torch.float)
    v_8 = torch.rand(1, 192, 72, 120, dtype=torch.float)
    v_9 = torch.rand(1, 64, 288, 480, dtype=torch.float)
    v_10 = torch.rand(1, 128, 144, 240, dtype=torch.float)
    v_11 = torch.rand(1, 192, 72, 120, dtype=torch.float)

    torch.onnx._export(net, (v_0, v_1, v_2, v_3, v_4, v_5, v_6, v_7, v_8, v_9, v_10, v_11), "D:/60-fps-Project/VFI/GMFSS2NCNN/infer_576_pnnx.py.onnx", export_params=True, operator_export_type=torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK, opset_version=13, input_names=['in0', 'in1', 'in2', 'in3', 'in4', 'in5', 'in6', 'in7', 'in8', 'in9', 'in10', 'in11'], output_names=['out0'])

def test_inference():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 576, 960, dtype=torch.float)
    v_1 = torch.rand(1, 3, 576, 960, dtype=torch.float)
    v_2 = torch.rand(1, 1, 1, 1, dtype=torch.float)
    v_3 = torch.rand(1, 2, 288, 480, dtype=torch.float)
    v_4 = torch.rand(1, 2, 288, 480, dtype=torch.float)
    v_5 = torch.rand(1, 2, 288, 480, dtype=torch.float)
    v_6 = torch.rand(1, 64, 288, 480, dtype=torch.float)
    v_7 = torch.rand(1, 128, 144, 240, dtype=torch.float)
    v_8 = torch.rand(1, 192, 72, 120, dtype=torch.float)
    v_9 = torch.rand(1, 64, 288, 480, dtype=torch.float)
    v_10 = torch.rand(1, 128, 144, 240, dtype=torch.float)
    v_11 = torch.rand(1, 192, 72, 120, dtype=torch.float)

    return net(v_0, v_1, v_2, v_3, v_4, v_5, v_6, v_7, v_8, v_9, v_10, v_11)
